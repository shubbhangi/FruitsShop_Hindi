/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.ItemAvailability;
import com.grocery.bean.ItemMaster;
import com.grocery.query.ItemAvailabilityQuery;
import com.grocery.query.ItemQuery;
import com.grocery.read.MessageFormat;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Admin
 */
public class AddOpeningStockView extends javax.swing.JInternalFrame {

    /**
     * Creates new form AddOpeningStockView
     */
    public AddOpeningStockView() {
        initComponents();
        loadItem();
        jTable1.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 11));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        load = new javax.swing.JButton();
        path = new javax.swing.JTextField();
        undo = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        save = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel22 = new javax.swing.JLabel();
        item = new javax.swing.JComboBox<>();
        jPanelItem = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        newItem = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        quantity = new javax.swing.JFormattedTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        gst = new javax.swing.JComboBox<>();
        jLabel32 = new javax.swing.JLabel();
        sellingPrice = new javax.swing.JFormattedTextField();
        jLabel40 = new javax.swing.JLabel();
        finalAmount = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator5 = new javax.swing.JSeparator();
        gstAmount = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        unitPrice = new javax.swing.JFormattedTextField();
        add = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        hsnCode = new javax.swing.JTextField();

        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        load.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        load.setText("Load From Excel Sheet");
        load.setMnemonic(KeyEvent.VK_L);
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        path.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        path.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        path.setEnabled(false);
        path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathActionPerformed(evt);
            }
        });

        undo.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        undo.setText("Undo Upload");
        undo.setMnemonic(KeyEvent.VK_U);
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });

        save.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        save.setText("Save");
        save.setMnemonic(KeyEvent.VK_S);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel21.setText("Item Details:");

        jLabel22.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel22.setText("Item Name:");

        item.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemActionPerformed(evt);
            }
        });

        jPanelItem.setBackground(new java.awt.Color(255, 255, 255));

        jLabel23.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel23.setText("Item Name:");

        newItem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        newItem.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newItemFocusGained(evt);
            }
        });
        newItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                newItemKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelItemLayout = new javax.swing.GroupLayout(jPanelItem);
        jPanelItem.setLayout(jPanelItemLayout);
        jPanelItemLayout.setHorizontalGroup(
            jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addGap(18, 18, 18)
                .addComponent(newItem, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelItemLayout.setVerticalGroup(
            jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemLayout.createSequentialGroup()
                .addGroup(jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jLabel24.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel24.setText("Quantity:");

        quantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        quantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantity.setText("0.000");
        quantity.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        quantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                quantityFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantityFocusLost(evt);
            }
        });
        quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantityKeyReleased(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel41.setText("Unit Price:");

        jLabel26.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel26.setText("GST %:");

        gst.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        gst.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "5", "12", "18", "28" }));
        gst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gstActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel32.setText("Selling Price:");

        sellingPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        sellingPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sellingPrice.setText("0.00");
        sellingPrice.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        sellingPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sellingPriceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sellingPriceFocusLost(evt);
            }
        });
        sellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sellingPriceKeyReleased(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel40.setText("Final Amount:");

        finalAmount.setEditable(false);
        finalAmount.setBackground(new java.awt.Color(255, 255, 153));
        finalAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        finalAmount.setForeground(new java.awt.Color(255, 0, 0));
        finalAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        finalAmount.setText("0.00");
        finalAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalAmountActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "HSN Code", "Quantity", "Unit Price", "GST %", "Selling Price", "Selling GST %", "GST Amount", "Final Selling Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName(""); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        gstAmount.setEditable(false);
        gstAmount.setBackground(new java.awt.Color(255, 255, 153));
        gstAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        gstAmount.setForeground(new java.awt.Color(255, 0, 0));
        gstAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gstAmount.setText("0.00");
        gstAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gstAmountActionPerformed(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel42.setText("GST Amount:");

        unitPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        unitPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        unitPrice.setText("0.00");
        unitPrice.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        unitPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                unitPriceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                unitPriceFocusLost(evt);
            }
        });

        add.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        add.setText("Add");
        add.setMnemonic(KeyEvent.VK_A);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addKeyPressed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel25.setText("HSN:");

        hsnCode.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        hsnCode.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hsnCode.setText("N/A");
        hsnCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hsnCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                hsnCodeFocusLost(evt);
            }
        });
        hsnCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hsnCodeKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addComponent(jSeparator4)
            .addComponent(jScrollPane1)
            .addComponent(jSeparator5)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(445, 445, 445))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(18, 18, 18)
                                .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelItem, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(hsnCode))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gst, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel42)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gstAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(undo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(load))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(285, 285, 285))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(460, 460, 460))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(load)
                    .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(undo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gstAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(finalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hsnCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pathActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel Workbook", "xlsx");
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setFileFilter(filter);

        int confirm = jFileChooser.showOpenDialog(this);
        if (confirm == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            try {
                String fileName = file.getAbsolutePath();
                path.setText(fileName);
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_loadActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        path.setText("");
    }//GEN-LAST:event_undoActionPerformed

    private void itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemActionPerformed
        newItem.setText("");
        if (item.getSelectedIndex() == 1) {
            jPanelItem.setVisible(true);
        } else {
            jPanelItem.setVisible(false);
        }
    }//GEN-LAST:event_itemActionPerformed

    private void newItemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newItemFocusGained
        newItem.selectAll();
    }//GEN-LAST:event_newItemFocusGained

    private void newItemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newItemKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || Character.isDigit(c) || c == ',' || c == '.' || c == KeyEvent.VK_SPACE || c == '-' || c == ':')) {
            evt.consume();
        }
    }//GEN-LAST:event_newItemKeyTyped

    private void quantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFocusGained
        quantity.selectAll();
    }//GEN-LAST:event_quantityFocusGained

    private void quantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFocusLost
        if (quantity.getText().trim().isEmpty()) {
            quantity.setText("0.00");
        }
    }//GEN-LAST:event_quantityFocusLost

    private void quantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityKeyReleased

    }//GEN-LAST:event_quantityKeyReleased

    private void gstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gstActionPerformed
        if (!(sellingPrice.getText().trim().isEmpty())) {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            float sellingPrice = Float.parseFloat(this.sellingPrice.getText());
            float gstPercent = Float.parseFloat(gst.getSelectedItem().toString());

            float gstAmount = calculateGst(sellingPrice, gstPercent);
            this.gstAmount.setText(decimalFormat.format(gstAmount));

            finalAmount.setText(decimalFormat.format(sellingPrice + gstAmount));
        } else {
            finalAmount.setText("0.00");
        }
    }//GEN-LAST:event_gstActionPerformed

    private void sellingPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sellingPriceFocusGained
        sellingPrice.selectAll();
    }//GEN-LAST:event_sellingPriceFocusGained

    private void sellingPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sellingPriceFocusLost
        if (sellingPrice.getText().trim().isEmpty()) {
            sellingPrice.setText("0.00");
        }
    }//GEN-LAST:event_sellingPriceFocusLost

    private void sellingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sellingPriceKeyReleased
        if (!(sellingPrice.getText().trim().isEmpty())) {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            float sellingPrice = Float.parseFloat(this.sellingPrice.getText());
            float gstPercent = Float.parseFloat(gst.getSelectedItem().toString());

            float gstAmount = calculateGst(sellingPrice, gstPercent);
            this.gstAmount.setText(decimalFormat.format(gstAmount));

            finalAmount.setText(decimalFormat.format(sellingPrice + gstAmount));
        } else {
            finalAmount.setText("0.00");
        }
    }//GEN-LAST:event_sellingPriceKeyReleased

    private void finalAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finalAmountActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        save();
    }//GEN-LAST:event_saveActionPerformed

    private void gstAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gstAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gstAmountActionPerformed

    private void unitPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitPriceFocusGained
        unitPrice.selectAll();
    }//GEN-LAST:event_unitPriceFocusGained

    private void unitPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitPriceFocusLost
        if (unitPrice.getText().trim().isEmpty()) {
            unitPrice.setText("0.00");
        }
    }//GEN-LAST:event_unitPriceFocusLost

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        addToTable();
    }//GEN-LAST:event_addActionPerformed

    private void addKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addToTable();
        }
    }//GEN-LAST:event_addKeyPressed

    private void hsnCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hsnCodeKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || Character.isDigit(c))) {
            evt.consume();
        }
    }//GEN-LAST:event_hsnCodeKeyTyped

    private void hsnCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hsnCodeFocusGained
        hsnCode.selectAll();
    }//GEN-LAST:event_hsnCodeFocusGained

    private void hsnCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hsnCodeFocusLost
        if (hsnCode.getText().trim().isEmpty()) {
            hsnCode.setText("N/A");
        }
    }//GEN-LAST:event_hsnCodeFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField finalAmount;
    private javax.swing.JComboBox<String> gst;
    private javax.swing.JTextField gstAmount;
    private javax.swing.JTextField hsnCode;
    private javax.swing.JComboBox<String> item;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton load;
    private javax.swing.JTextField newItem;
    private javax.swing.JTextField path;
    private javax.swing.JFormattedTextField quantity;
    private javax.swing.JButton save;
    private javax.swing.JFormattedTextField sellingPrice;
    private javax.swing.JButton undo;
    private javax.swing.JFormattedTextField unitPrice;
    // End of variables declaration//GEN-END:variables

    private void loadItem() {
        ItemMaster itemMaster = new ItemMaster();
        ItemQuery itemQuery = new ItemQuery();

        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) item.getModel();
        defaultComboBoxModel.removeAllElements();

        defaultComboBoxModel.addElement("--Select--");
        defaultComboBoxModel.addElement("Add New");

        List<String> list = itemQuery.getDistinctItem();

        for (String string : list) {
            defaultComboBoxModel.addElement(string);
        }

        item.setModel(defaultComboBoxModel);
    }

    private float calculateGst(float total, float gstPercent) {
        float gstAmount = (total * gstPercent) / 100;
        return gstAmount;
    }

    private void save() {
        ItemMaster itemMaster = new ItemMaster();
        ItemQuery itemQuery = new ItemQuery();
        ItemAvailability itemAvailability = new ItemAvailability();
        ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();

        if ((path.getText().trim().isEmpty()) && (jTable1.getRowCount() == 0)) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Nothing to save"), "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of saving this data?"));
        if (confirm == JOptionPane.YES_OPTION) {
            if (!(path.getText().trim().isEmpty())) {
                try {
                    FileInputStream excelFile = new FileInputStream(new File(path.getText().trim()));

                    Workbook workbook = new XSSFWorkbook(excelFile);

                    Sheet datatypeSheet = workbook.getSheetAt(0);
                    Iterator<Row> iterator = datatypeSheet.iterator();
                    System.out.println("Rows: " + (datatypeSheet.getLastRowNum() - datatypeSheet.getFirstRowNum()));
                    while (iterator.hasNext()) {
                        List<Cell> cellList = new ArrayList<>();
                        Row currentRow = iterator.next();

                        if (currentRow.getRowNum() == 0) {
                            continue;
                        }

                        Iterator<Cell> cellIterator = currentRow.iterator();
                        while (cellIterator.hasNext()) {
                            Cell currentCell = cellIterator.next();
                            cellList.add(currentCell);
                            System.out.println("Cellist: " + cellList);
                        }
                        System.out.println("Cellist: " + cellList);

                        if (String.valueOf(cellList.get(0)).trim().isEmpty()) {
                            break;
                        }

                        itemMaster.setName(String.valueOf(cellList.get(0)));
                        itemMaster.setHsnCode(String.valueOf(cellList.get(1)));
                        itemMaster.setUnitPrice(new BigDecimal(String.valueOf(cellList.get(2))));
                        itemMaster.setGstPercent(new BigDecimal(String.valueOf(cellList.get(3))));
                        itemMaster.setSellingPrice(new BigDecimal(String.valueOf(cellList.get(5))));
                        itemMaster.setSellingGstPercent(new BigDecimal(String.valueOf(cellList.get(5))));
                        itemMaster.setFinalSellingPrice(new BigDecimal(String.valueOf(cellList.get(6))));

                        List<ItemMaster> itemList = itemQuery.checkItem(itemMaster);
                        System.out.println(itemList.isEmpty());
                        if (itemList.isEmpty()) {
                            itemQuery.insertItem(itemMaster);
                        } else {
                            for (ItemMaster im : itemList) {
                                itemMaster.setId(im.getId());
                            }
                        }

                        BigDecimal thresholdPercent = new BigDecimal(0.25);

                        itemAvailability.setItemMaster(itemMaster);
                        itemAvailability.setAvailability(new BigDecimal(String.valueOf(cellList.get(7))));
                        itemAvailability.setThreshold(thresholdPercent.multiply(new BigDecimal(String.valueOf(cellList.get(7)))));

                        List<ItemAvailability> itemAvailabilityList = itemAvailabilityQuery.checkItem(itemAvailability);

                        if (itemAvailabilityList.isEmpty()) {
                            itemAvailabilityQuery.insertIntoItemAvailability(itemAvailability);
                        } else {
                            for (ItemAvailability ia : itemAvailabilityList) {
                                itemAvailability.setId(ia.getId());
                                itemAvailability.setAvailability(ia.getAvailability().add(new BigDecimal(String.valueOf(cellList.get(7)))));
                                itemAvailability.setThreshold(thresholdPercent.multiply(ia.getAvailability().add(new BigDecimal(String.valueOf(cellList.get(7))))));

                                itemAvailabilityQuery.updateItemAvailability(itemAvailability);
                            }
                        }
                    }

                    int rowNum = 1;
                    Row row = datatypeSheet.getRow(rowNum);
                    int rowCount = datatypeSheet.getLastRowNum() - datatypeSheet.getFirstRowNum();
                    int i = 0;

                    while (i < rowCount) {
                        for (int j = 0; j < row.getLastCellNum(); j++) {
                            Cell cell = row.getCell(j);
                            cell.setCellValue(new String());

                        }
                        i++;
                        rowNum++;
                        row = datatypeSheet.getRow(rowNum);
                    }

                    excelFile.close();
                    FileOutputStream outputStream = new FileOutputStream(new File(path.getText().trim()));

                    workbook.write(outputStream);
                    outputStream.close();
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter all the fields in the Excel Sheet"), "Error Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

            }
            if (jTable1.getRowCount() != 0) {
                int i = 0;

                while (i < jTable1.getRowCount()) {
                    String itemName = jTable1.getValueAt(i, 0).toString();
                    String hsnCode = jTable1.getValueAt(i, 1).toString();
                    float quantity = Float.parseFloat(jTable1.getValueAt(i, 2).toString());
                    float unitPrice = Float.parseFloat(jTable1.getValueAt(i, 3).toString());
                    float gstPercent = Float.parseFloat(jTable1.getValueAt(i, 4).toString());
                    float sellingPrice = Float.parseFloat(jTable1.getValueAt(i, 5).toString());
                    float sellingGstPercent = Float.parseFloat(jTable1.getValueAt(i, 6).toString());
                    float gstAmount = Float.parseFloat(jTable1.getValueAt(i, 7).toString());
                    float finalSellingPrice = Float.parseFloat(jTable1.getValueAt(i, 8).toString());

                    itemMaster.setName(itemName);
                    itemMaster.setHsnCode(hsnCode);
                    itemMaster.setUnitPrice(new BigDecimal(unitPrice));
                    itemMaster.setGstPercent(new BigDecimal(gstPercent));
                    itemMaster.setSellingGstPercent(new BigDecimal(sellingGstPercent));
                    itemMaster.setSellingPrice(new BigDecimal(sellingPrice));
                    itemMaster.setFinalSellingPrice(new BigDecimal(finalSellingPrice));

                    List<ItemMaster> itemList = itemQuery.checkItem(itemMaster);
                    if (itemList.isEmpty()) {
                        itemQuery.insertItem(itemMaster);
                    } else {
                        for (ItemMaster im : itemList) {
                            itemMaster.setId(im.getId());
                        }
                    }

                    BigDecimal thresholdPercent = new BigDecimal(0.25);

                    itemAvailability.setItemMaster(itemMaster);
                    itemAvailability.setAvailability(new BigDecimal(quantity));
                    itemAvailability.setThreshold(thresholdPercent.multiply(new BigDecimal(quantity)));

                    List<ItemAvailability> itemAvailabilityList = itemAvailabilityQuery.checkItem(itemAvailability);

                    if (itemAvailabilityList.isEmpty()) {
                        itemAvailabilityQuery.insertIntoItemAvailability(itemAvailability);
                    } else {
                        for (ItemAvailability ia : itemAvailabilityList) {
                            itemAvailability.setId(ia.getId());
                            itemAvailability.setAvailability(ia.getAvailability().add(new BigDecimal(quantity)));
                            itemAvailability.setThreshold(thresholdPercent.multiply(ia.getAvailability().add(new BigDecimal(quantity))));

                            itemAvailabilityQuery.updateItemAvailability(itemAvailability);
                        }
                    }
                    i++;
                }

            }

            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Stock added successfully"));
            DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
            defaultTableModel.setRowCount(0);
            jTable1.setModel(defaultTableModel);
            path.setText("");
            loadItem();
        }
    }

    private void clear() {
        quantity.setText("0.00");
        unitPrice.setText("0.00");
        item.setSelectedIndex(0);
        gst.setSelectedIndex(0);
        sellingPrice.setText("0.00");
        finalAmount.setText("0.00");
        hsnCode.setText("N/A");
    }

    private void addToTable() {
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        String itemName = item.getSelectedItem().toString();

        if (itemName.equalsIgnoreCase("--select--")) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
            item.requestFocus();
            return;
        }
        if (itemName.equalsIgnoreCase("add new")) {
            if (newItem.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
                newItem.requestFocus();
                return;
            } else {
                itemName = newItem.getText().trim();
            }
        }
        if (quantity.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
            quantity.requestFocus();
            return;
        }

        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();

        float quantity = Float.parseFloat(this.quantity.getText().trim());
        String hsnCode = this.hsnCode.getText().trim();
        float unitPrice = Float.parseFloat(this.unitPrice.getText().trim());
        float gstPercent = Float.parseFloat(gst.getSelectedItem().toString());
        float sellingPrice;
        float sellingGstPercent;
        float sellingGstAmount;
        float finalSellingPrice;

        sellingPrice = Float.parseFloat(this.sellingPrice.getText().trim());
        sellingGstPercent = Float.parseFloat(this.gst.getSelectedItem().toString());
        sellingGstAmount = calculateGst(sellingPrice, sellingGstPercent);
        finalSellingPrice = sellingPrice + sellingGstAmount;

        defaultTableModel.addRow(new Object[]{itemName, hsnCode, quantity, decimalFormat.format(unitPrice), decimalFormat.format(gstPercent), decimalFormat.format(sellingPrice), decimalFormat.format(sellingGstPercent), decimalFormat.format(sellingGstAmount), decimalFormat.format(finalSellingPrice)});

        jTable1.setModel(defaultTableModel);

        clear();
        item.requestFocus();
    }
}
