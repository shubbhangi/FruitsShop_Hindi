/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.CustomerMaster;
import com.grocery.bean.Expenses;
import com.grocery.bean.ItemAvailability;
import com.grocery.bean.ItemMaster;
import com.grocery.bean.SaleDetails;
import com.grocery.bean.SaleMaster;
import com.grocery.query.BeginningCashQuery;
import com.grocery.query.CustomerMasterQuery;
import com.grocery.query.ExpensesQuery;
import com.grocery.query.ItemAvailabilityQuery;
import com.grocery.query.SaleDetailsQuery;
import com.grocery.query.SaleMasterQuery;
import com.grocery.read.MessageFormat;
import com.grocery.read.ReadFile;
import com.grocery.util.MyConnection;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Admin
 */
public class EditSalesBillView extends javax.swing.JInternalFrame {

    private BigDecimal beginningCash;
    private BigDecimal expenses;
    private Date currentDate = new Date();
    private JTextFieldDateEditor editor;
    private JDesktopPane jDesktopPane;
    private BigDecimal discount;
    
    
    public EditSalesBillView() {
        initComponents();
        editor = (JTextFieldDateEditor)chequeDate.getDateEditor();
        editor.setEditable(false);
        
        chequeDate.setDate(currentDate);
        jLabel22.setVisible(false);
        paymentMode.setVisible(false);
        jLabel32.setVisible(false);
        availableCash.setVisible(false);
        jPanelNumber.setVisible(false);
        jTable1.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 11));
        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        
        jTable2.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 11));
        jTable2.getColumnModel().getColumn(0).setMinWidth(0);
        jTable2.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable2.getColumnModel().getColumn(1).setMinWidth(0);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(0);
        
        ItemMaster itemMaster = new ItemMaster();
        loadTable(itemMaster);
        loadBeginningCash();
        loadExpenses();
        loadCash();
        getTotal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        billId = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        add = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel19 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jSeparator4 = new javax.swing.JSeparator();
        remove = new javax.swing.JButton();
        change = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jPanelNumber = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        number = new javax.swing.JTextField();
        chequeDate = new com.toedter.calendar.JDateChooser();
        jLabel25 = new javax.swing.JLabel();
        bank = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        paymentMode = new javax.swing.JComboBox<>();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel32 = new javax.swing.JLabel();
        availableCash = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        billAmount = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        item = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        balance = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        paidAmount = new javax.swing.JFormattedTextField();
        jSeparator6 = new javax.swing.JSeparator();
        save = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        remarks = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel30.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("Enter Bill Id:");

        billId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        billId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        billId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billIdKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                billIdKeyTyped(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Item Name", "HSN Code", "Availability", "Unit Price", "GST %", "Selling Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        add.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        add.setText("Add");
        add.setMnemonic(KeyEvent.VK_A);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addKeyPressed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel19.setText("Sale Details:");

        jTable2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Details Id", "Item Id", "Item Name", "HSN Code", "Unit Price", "GST %", "Selling Price", "Quantity", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        remove.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        remove.setText("Remove");
        remove.setMnemonic(KeyEvent.VK_R);
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        remove.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                removeKeyPressed(evt);
            }
        });

        change.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        change.setText("Change Quantity");
        change.setMnemonic(KeyEvent.VK_Q);
        change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActionPerformed(evt);
            }
        });
        change.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                changeKeyPressed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel31.setText("Total:");

        total.setEditable(false);
        total.setBackground(new java.awt.Color(255, 255, 153));
        total.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        total.setForeground(new java.awt.Color(255, 0, 0));
        total.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jPanelNumber.setBackground(new java.awt.Color(255, 255, 255));

        jLabel23.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel23.setText("Card/Cheque #:");

        number.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        number.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        number.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberKeyTyped(evt);
            }
        });

        chequeDate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel25.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel25.setText("Bank Name:");

        bank.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bank.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A.P. Mahesh Co-Op Urban Bank Ltd", "Abhyudaya Co-op Bank Ltd", "Abu Dhabi Commercial Bank", "Ahmedabad Mercantile Co-operative Bank Ltd", "Allahabad Bank", "Andhra Bank", "Apna Sahakari Bank Ltd.", "Axis Bank", "Bank Of America", "Bank Of Bahrain And Kuwait", "Bank Of Baroda", "Bank Of Ceylon", "Bank Of India", "Bank Of Maharashtra", "Bank Of Nova Scotia", "Bank Of Rajasthan Ltd", "Bank Of Tokyo-Mitsubishi UFJ Ltd", "Barclays Bank PLC", "Bassein Catholic Co-Op Bank Ltd", "Bharat Co-operative Bank (Mumbai) Ltd", "Bharat Overseas Bank", "BNP Paribas", "Calyon Bank", "Canara Bank", "Catholic Syrian Bank Ltd", "Central Bank Of India", "Chinatrust Commercial Bank", "Citibank NA", "Citizencredit Co-operative Bank Ltd", "City Union Bank Ltd", "Corporation Bank", "Cosmos Co-operative Bank Ltd.", "Credit Agricole Corp N Invsmnt Bank", "DBS Bank Ltd", "Dena Bank", "Deutsche Bank AG", "Development Credit Bank Limited", "Dhanalakshmi Bank Ltd", "DICGC", "Dombivli Nagari Sahakari Bank Limited", "Federal Bank Ltd", "Firstrand Bank Limited", "Greater Bombay Co-op. Bank Ltd", "HDFC Bank Ltd", "HSBC", "ICICI Bank Ltd", "IDBI Bank Ltd", "Indian Bank", "Indian Overseas Bank", "Indusind Bank Ltd", "ING Vysya Bank Ltd", "Jammu And Kashmir Bank Ltd", "Janakalyan Sahakari Bank Ltd", "Janata Sahakari Bank Ltd (Pune)", "JP Morgan Chase Bank NA", "Kallappanna Awade Ich Janata S Bank", "Kalupur Commercial Co. Op. Bank Ltd.", "Kalyan Janata Sahakari Bank Ltd.", "Kapole Co Op Bank", "Karad Urban Co-Op Bank Ltd", "Karnataka Bank Ltd", "Karnataka State Apex  Coop. Bank Ltd.", "Karur Vysya Bank", "Kotak Mahindra Bank", "Lakshmi Vilas Bank Ltd", "Mahanagar Co-op Bank Ltd", "Maharashtra State Co Operative Bank", "Mashreq Bank PSC", "Mehsana Urban Cooperative Bank Ltd", "Mizuho Corporate Bank Ltd", "Nagpur Nagrik Sahakari Bank Ltd", "Nainital Bank Limited", "Nasik Merchants Co-Op Bank Ltd", "New India Co-operative Bank Ltd", "Nkgsb Co-op Bank Ltd", "Nutan Nagarik Sahakari Bank Ltd", "Oman International Bank Saog", "Oriental Bank Of Commerce", "Parsik Janata Sahakari Bank Ltd", "PMC Bank", "Punjab And Maharashtra Co-op Bank Ltd", "Punjab And Sind Bank", "Punjab National Bank", "Rajkot Nagarik Sahakari Bank Ltd", "Ratnakar Bank Ltd", "Reserve Bank Of India", "Saraswat Co-operative Bank Ltd", "Shamrao Vithal Co-operative Bank Limited", "Shinhan Bank", "Societe Generale", "South Indian Bank", "Standard Chartered Bank", "State Bank Of Bikaner And Jaipur", "State Bank Of Hyderabad", "State Bank Of India", "State Bank Of Indore", "State Bank Of Mauritius Ltd", "State Bank Of Mysore", "State Bank Of Patiala", "State Bank Of Travancore", "Surat Peoples Co-Op Bank Ltd", "Syndicate Bank", "Tamilnad Mercantile Bank Ltd", "Tamilnadu State Apex Cooperative Bank Limited", "Thane Janata Sahakari Bank Ltd", "The Royal Bank Of Scotland NV", "UBS AG", "UCO Bank", "Union Bank Of India", "United Bank Of India", "Vijaya Bank", "West Bengal State Cooperative Bank Ltd", "Yes Bank Ltd" }));

        javax.swing.GroupLayout jPanelNumberLayout = new javax.swing.GroupLayout(jPanelNumber);
        jPanelNumber.setLayout(jPanelNumberLayout);
        jPanelNumberLayout.setHorizontalGroup(
            jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNumberLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addGap(18, 18, 18)
                .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chequeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelNumberLayout.setVerticalGroup(
            jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNumberLayout.createSequentialGroup()
                .addGroup(jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chequeDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel22.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel22.setText("Payment Mode:");

        paymentMode.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        paymentMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Card", "Cheque", "Paytm" }));
        paymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel32.setText("Available Cash:");

        availableCash.setEditable(false);
        availableCash.setBackground(new java.awt.Color(255, 255, 153));
        availableCash.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        availableCash.setForeground(new java.awt.Color(255, 0, 0));
        availableCash.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel33.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel33.setText("Customer Name:");

        customerName.setEditable(false);
        customerName.setBackground(new java.awt.Color(255, 255, 153));
        customerName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        customerName.setForeground(new java.awt.Color(255, 0, 0));
        customerName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel34.setText("Previous Bill Amount:");

        billAmount.setEditable(false);
        billAmount.setBackground(new java.awt.Color(255, 255, 153));
        billAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        billAmount.setForeground(new java.awt.Color(255, 0, 0));
        billAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        billAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billAmountActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("Search Item By Name:");

        item.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        item.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        item.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                itemKeyTyped(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel35.setText("Balance:");

        balance.setEditable(false);
        balance.setBackground(new java.awt.Color(255, 255, 153));
        balance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        balance.setForeground(new java.awt.Color(255, 0, 0));
        balance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel36.setText("Paid Amount:");

        paidAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        paidAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        paidAmount.setText("0.00");
        paidAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        paidAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                paidAmountFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                paidAmountFocusLost(evt);
            }
        });
        paidAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                paidAmountKeyPressed(evt);
            }
        });

        save.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        save.setMnemonic(KeyEvent.VK_S);
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        close.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        close.setMnemonic(KeyEvent.VK_C);
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        close.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                closeKeyPressed(evt);
            }
        });

        remarks.setEditable(false);
        remarks.setBackground(new java.awt.Color(255, 255, 153));
        remarks.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        remarks.setForeground(new java.awt.Color(255, 0, 0));
        remarks.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        remarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remarksActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel37.setText("Remarks:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(availableCash, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(jLabel31)
                        .addGap(54, 54, 54)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(448, 448, 448))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(0, 962, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(billId, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(remarks, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76))))
                    .addComponent(jSeparator5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(449, 449, 449))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jPanelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel22)
                                    .addGap(18, 18, 18)
                                    .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(paidAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel35)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel34)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(billAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(34, 34, 34)))
                    .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 1010, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(remarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(billId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel17)
                    .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remove)
                    .addComponent(change)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(availableCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(billAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(paidAmount)
                        .addComponent(jLabel36))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(close))
                .addGap(12, 12, 12))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1012, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void billIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billIdKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)))
            evt.consume();
    }//GEN-LAST:event_billIdKeyTyped

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            addItem();
    }//GEN-LAST:event_jTable1KeyPressed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        addItem();
    }//GEN-LAST:event_addActionPerformed

    private void addKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            addItem();
    }//GEN-LAST:event_addKeyPressed

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            remove();
    }//GEN-LAST:event_jTable2KeyPressed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        remove();
    }//GEN-LAST:event_removeActionPerformed

    private void removeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_removeKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        remove();
    }//GEN-LAST:event_removeKeyPressed

    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed
        changeQuantity();
    }//GEN-LAST:event_changeActionPerformed

    private void changeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_changeKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        changeQuantity();
    }//GEN-LAST:event_changeKeyPressed

    private void numberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)))
            evt.consume();
    }//GEN-LAST:event_numberKeyTyped

    private void paymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeActionPerformed
        number.setText("");
        chequeDate.setVisible(false);
        jLabel25.setVisible(false);
        bank.setVisible(false);
        if(paymentMode.getItemCount() > 0)
        {
            if(paymentMode.getSelectedItem().toString().equalsIgnoreCase("cash"))
            jPanelNumber.setVisible(false);
            else
            if(paymentMode.getSelectedItem().toString().equalsIgnoreCase("cheque"))
            {
                jPanelNumber.setVisible(true);
                chequeDate.setVisible(true);
                jLabel25.setVisible(true);
                bank.setVisible(true);
            }
            else
            if(paymentMode.getSelectedItem().toString().equalsIgnoreCase("card"))
            {
                jPanelNumber.setVisible(true);
                jLabel25.setVisible(true);
                bank.setVisible(true);
            }
            else
            {
                jPanelNumber.setVisible(true);
                jLabel25.setVisible(false);
                bank.setVisible(false);
            }
        }
    }//GEN-LAST:event_paymentModeActionPerformed

    private void billIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billIdKeyReleased
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable2.getModel();
        defaultTableModel.setRowCount(0);
        
        jTable2.setModel(defaultTableModel);
        customerName.setText("");
        billAmount.setText("");
        balance.setText("");
        remarks.setText("");
        getTotal();
        if(!(billId.getText().trim().isEmpty()))
        {
            SaleMaster saleMaster = new SaleMaster();
            saleMaster.setId(Integer.parseInt(billId.getText().trim()));
            
            loadTable(saleMaster);
        }
    }//GEN-LAST:event_billIdKeyReleased

    private void customerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerNameActionPerformed

    private void billAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_billAmountActionPerformed

    private void itemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemKeyPressed

    }//GEN-LAST:event_itemKeyPressed

    private void itemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemKeyReleased
        ItemMaster itemMaster = new ItemMaster();
        if(!(item.getText().trim().isEmpty()))
        itemMaster.setName(item.getText().trim());
            loadTable(itemMaster);
    }//GEN-LAST:event_itemKeyReleased

    private void itemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isAlphabetic(c) ||  (c == KeyEvent.VK_BACK_SPACE)||  c == KeyEvent.VK_DELETE || Character.isDigit(c) || c == ',' || c == '.' || c == KeyEvent.VK_SPACE || c == '-' || c == ':'))
        evt.consume();
    }//GEN-LAST:event_itemKeyTyped

    private void balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_balanceActionPerformed

    private void paidAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paidAmountFocusGained
        paidAmount.selectAll();
    }//GEN-LAST:event_paidAmountFocusGained

    private void paidAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paidAmountFocusLost
        if(paidAmount.getText().trim().isEmpty())
            paidAmount.setText("0.00");
    }//GEN-LAST:event_paidAmountFocusLost

    private void paidAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidAmountKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            save();
    }//GEN-LAST:event_paidAmountKeyPressed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
            close();
    }//GEN-LAST:event_closeActionPerformed

    private void closeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_closeKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            close();
    }//GEN-LAST:event_closeKeyPressed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        save();
    }//GEN-LAST:event_saveActionPerformed

    private void remarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remarksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_remarksActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField availableCash;
    private javax.swing.JTextField balance;
    private javax.swing.JComboBox<String> bank;
    private javax.swing.JTextField billAmount;
    private javax.swing.JTextField billId;
    private javax.swing.JButton change;
    private com.toedter.calendar.JDateChooser chequeDate;
    private javax.swing.JButton close;
    private javax.swing.JTextField customerName;
    private javax.swing.JTextField item;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelNumber;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField number;
    private javax.swing.JFormattedTextField paidAmount;
    private javax.swing.JComboBox<String> paymentMode;
    private javax.swing.JTextField remarks;
    private javax.swing.JButton remove;
    private javax.swing.JButton save;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

    
    private void getTotal() 
    {
        int i = 0;
        float sum = 0;
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        
        while(i < jTable2.getRowCount())
        {
            sum = sum + Float.parseFloat(jTable2.getValueAt(i, 8).toString());
            i++;
        }
        total.setText(decimalFormat.format(sum));
    }
    
    private void addItem() 
    {
        try
        {
            if(billId.getText().trim().isEmpty())
            {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Bill Id"), "Error Message", JOptionPane.ERROR_MESSAGE);
                billId.requestFocus();
                return;
            }
            String hsnCode = jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString();
            float availability = Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            int itemId = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            float sellingPrice = Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());
            float unitPrice = Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
            float gstPercent = Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
            String itemName = jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString();
            DecimalFormat decimalFormat = new DecimalFormat("#0.000");
            float total = 0;
            float soldQuantity = 0f;
            
            JFrame frame = new JFrame("Input");
            
            try
            {
                soldQuantity = Float.parseFloat(JOptionPane.showInputDialog(frame, "<HTML><FONT color=\"#000000\">Enter the quantity of: <strong><U>" + itemName + "</U></strong><br>Available Quantity = <strong><U>" + decimalFormat.format(availability) + "</FONT></HTML>" ));
                
              /*  if(soldQuantity > availability)
                {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Quantity can't be greater than Available Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
                }
                else */
                    if(soldQuantity == 0)
                    {
                        JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Quantity can't be zero"), "Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                    else
                    {
                        total = soldQuantity * sellingPrice;

                        ItemMaster itemMaster = new ItemMaster();
                        itemMaster.setId(itemId);

                        SaleMaster saleMaster = new SaleMaster();
                        SaleMasterQuery saleMasterQuery = new SaleMasterQuery();
                       
                        SaleDetails saleDetails = new SaleDetails();
                        SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
                        
                        saleMaster.setId(Integer.parseInt(billId.getText().trim()));
                        
                        saleDetails.setSaleMaster(saleMaster);
                        saleDetails.setItemMaster(itemMaster);

                        List<SaleDetails> saleDetailsList = saleDetailsQuery.checkItem(saleDetails);
                        if(!(saleDetailsList.isEmpty()))
                        {
                            for(SaleDetails sd: saleDetailsList)
                            {
                                saleDetails.setId(sd.getId());
                                saleDetails.setQuantity(sd.getQuantity().add(new BigDecimal(soldQuantity)));
                                saleDetails.setTotal(sd.getTotal().add(new BigDecimal(total)));
                            }
                            saleDetailsQuery.updateSaleDetails(saleDetails);
                        }
                        else
                        {
                            saleDetails.setQuantity(new BigDecimal(soldQuantity));
                            saleDetails.setUnitPrice(new BigDecimal(unitPrice));
                            saleDetails.setTotal(new BigDecimal(total));
                            saleDetails.setGstPercent(new BigDecimal(gstPercent));
                            saleDetails.setSellingPrice(new BigDecimal(sellingPrice));
                            saleDetailsQuery.insertIntoSaleDetails(saleDetails);
                        }

                        ItemAvailability itemAvailability = new ItemAvailability();
                        ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();

                        itemAvailability.setItemMaster(itemMaster);
                        itemAvailability.setAvailability(new BigDecimal(availability).subtract(new BigDecimal(soldQuantity)));

                        List<ItemAvailability> itemAvailabilityList = itemAvailabilityQuery.checkItem(itemAvailability);
                        for(ItemAvailability ia: itemAvailabilityList)
                            itemAvailability.setId(ia.getId());

                        itemAvailabilityQuery.updateItemAvailability(itemAvailability);
                        
                        
                        clear();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter numeric value"), "Error Message", JOptionPane.ERROR_MESSAGE);
              
                }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to add"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void changeQuantity() 
    {
        try
        {
            DecimalFormat decimalFormat = new DecimalFormat("#0.000");
            int detailsId = Integer.parseInt(jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString());
            int itemId = Integer.parseInt(jTable2.getValueAt(jTable2.getSelectedRow(), 1).toString());
            float quantity = Float.parseFloat(jTable2.getValueAt(jTable2.getSelectedRow(), 7).toString());
            float unitPrice = Float.parseFloat(jTable2.getValueAt(jTable2.getSelectedRow(), 4).toString());
            float sellingPrice = Float.parseFloat(jTable2.getValueAt(jTable2.getSelectedRow(), 6).toString());
            String itemName = jTable2.getValueAt(jTable2.getSelectedRow(), 2).toString();
            float newQuantity = 0;
            
            JFrame frame = new JFrame("Input");
            
            ItemMaster itemMaster = new ItemMaster();
            itemMaster.setId(itemId);
            
            ItemAvailability eAvailability = new ItemAvailability();
            ItemAvailabilityQuery endProductAvailabilityQuery = new ItemAvailabilityQuery();
            
            eAvailability.setItemMaster(itemMaster);
            
            List<ItemAvailability> endProductAvalabilityList = endProductAvailabilityQuery.checkItem(eAvailability);
            for(ItemAvailability ea: endProductAvalabilityList)
            {
                eAvailability.setId(ea.getId());
                eAvailability.setAvailability(ea.getAvailability());
            }
            
            
            eAvailability.setAvailability(eAvailability.getAvailability().add(new BigDecimal(quantity)));
            
            newQuantity = Float.parseFloat(JOptionPane.showInputDialog(frame, "<HTML><FONT color=\"#000000\">Enter the quantity of: <strong><U>" + itemName + "</U></strong><br>Available Quantity = <strong><U>" + decimalFormat.format(eAvailability.getAvailability()) + "</FONT></HTML>" ));
            int compare = new BigDecimal(newQuantity).compareTo(eAvailability.getAvailability());
            
          /*  if(compare == 1)
            {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Entered Quantity is greater than Available Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            } */
            if(newQuantity == 0)
            {
               JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Quantity can't be zero"), "Error Message", JOptionPane.ERROR_MESSAGE);
               return; 
            }
            
            endProductAvailabilityQuery.updateItemAvailability(eAvailability);
            eAvailability.setAvailability(eAvailability.getAvailability().subtract(new BigDecimal(newQuantity)));
            
            endProductAvailabilityQuery.updateItemAvailability(eAvailability);
            float total = newQuantity * sellingPrice;
            
            
            SaleDetails saleDetails = new SaleDetails();
            saleDetails.setId(detailsId);
            saleDetails.setQuantity(new BigDecimal(newQuantity));
            saleDetails.setTotal(new BigDecimal(total));
            
            SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
            saleDetailsQuery.updateSaleDetails(saleDetails);   

            clear();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to change the quantity of"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void remove() 
    {
        try
        {
            int detailsId = Integer.parseInt(jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString());
            int itemId = Integer.parseInt(jTable2.getValueAt(jTable2.getSelectedRow(), 1).toString());
            float quantity = Float.parseFloat(jTable2.getValueAt(jTable2.getSelectedRow(), 7).toString());
            
            ItemMaster itemMaster = new ItemMaster();
            itemMaster.setId(itemId);
            
            ItemAvailability itemAvailability = new ItemAvailability();
            ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();
            
            itemAvailability.setItemMaster(itemMaster);
            
            List<ItemAvailability> endProductAvalabilityList = itemAvailabilityQuery.checkItem(itemAvailability);
            for(ItemAvailability ea: endProductAvalabilityList)
            {
                itemAvailability.setId(ea.getId());
                itemAvailability.setAvailability(ea.getAvailability());
            }
            
            itemAvailability.setAvailability(itemAvailability.getAvailability().add(new BigDecimal(quantity)));
            SaleDetails saleDetails = new SaleDetails();
            saleDetails.setId(detailsId);
            
            SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
            saleDetailsQuery.deleteSaleDetails(saleDetails);
            
            itemAvailabilityQuery.updateItemAvailability(itemAvailability);
            
            clear();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to remove"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void getSaleDetails(SaleMaster saleMaster) 
    {
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable2.getModel();
        defaultTableModel.setRowCount(0);
        
        SaleDetails saleDetails = new SaleDetails();
        SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
        
        saleDetails.setSaleMaster(saleMaster);
        
        List<Object[]> list = saleDetailsQuery.getSale(saleDetails);
        
        for(Object[] object: list)
        {
            SaleDetails sd = (SaleDetails)object[0];
            
            defaultTableModel.addRow(new Object[]{sd.getId(), sd.getItemMaster().getId(), sd.getItemMaster().getName(), sd.getItemMaster().getHsnCode(), sd.getUnitPrice(), sd.getGstPercent(), sd.getSellingPrice(), sd.getQuantity(), sd.getTotal()});
        }
        
        jTable2.setModel(defaultTableModel);
        
        getTotal();
    }
    
    private void clear()
    {
        ItemMaster endProduct = new ItemMaster();
        loadTable(endProduct);
        item.setText("");
        item.requestFocus();
        getTotal();
        paymentMode.setSelectedIndex(0);
    }
    
    private void loadBeginningCash() 
    {
        BeginningCashQuery beginningCashQuery = new BeginningCashQuery();
        
        List<BigDecimal> list = beginningCashQuery.getBeginningCash();
        
        for(BigDecimal bd: list)
            beginningCash = bd;
    }

    private void loadExpenses() 
    {
        ExpensesQuery expensesQuery = new ExpensesQuery();
        
        List<BigDecimal> list = expensesQuery.getExpenses();
        
        for(BigDecimal bd: list)
            expenses = bd;
    }

    private void loadCash() 
    {
        availableCash.setText(String.valueOf(beginningCash.subtract(expenses)));
    }

    private void loadTable(SaleMaster saleMaster) 
    {
        discount = new BigDecimal(0);
        SaleMasterQuery saleMasterQuery = new SaleMasterQuery();
        List <Object[]>list = saleMasterQuery.getSaleOnId(saleMaster);
        
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable2.getModel();
        defaultTableModel.setRowCount(0);
        for(Object[] object: list)
        {
            SaleDetails sd = (SaleDetails)object[0];
            defaultTableModel.addRow(new Object[]{sd.getId(), sd.getItemMaster().getId(), sd.getItemMaster().getName(), sd.getItemMaster().getHsnCode(), sd.getUnitPrice(), sd.getGstPercent(), sd.getSellingPrice(), sd.getQuantity(), sd.getTotal()});
            
            customerName.setText(sd.getSaleMaster().getCustomerMaster().getName());
            billAmount.setText(String.valueOf(sd.getSaleMaster().getBillAmount()));
            balance.setText(String.valueOf(sd.getSaleMaster().getCustomerMaster().getBalance()));
            remarks.setText(sd.getSaleMaster().getRemark());
            
            discount = sd.getSaleMaster().getDiscount();
        }
        
        getTotal();
    }

    public void loadTable(ItemMaster itemMaster)
    {
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable1.getModel();
        defaultTableModel.setRowCount(0);
        
        List<Object[]> list = new ArrayList<>();
        
        ItemAvailability itemAvailability = new ItemAvailability();
        ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();
        
        itemAvailability.setItemMaster(itemMaster);
        list = itemAvailabilityQuery.getAvailability(itemAvailability);
        
        for(Object[] object: list)
        {
            ItemAvailability ia = (ItemAvailability)object[0];
            
            defaultTableModel.addRow(new Object[]{ia.getItemMaster().getId(), ia.getItemMaster().getName(), ia.getItemMaster().getHsnCode(), ia.getAvailability(), ia.getItemMaster().getSellingPrice(), ia.getItemMaster().getGstPercent(), ia.getItemMaster().getFinalSellingPrice()});
        }
        jTable1.setModel(defaultTableModel);
       
        if(!(billId.getText().trim().isEmpty()))
        {
            SaleMaster saleMaster = new SaleMaster();
        
            saleMaster.setId(Integer.parseInt(billId.getText().trim()));

            getSaleDetails(saleMaster);
        }
        
    }

    private void save() 
    {
        if(paidAmount.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the paid amount"), "Error Message", JOptionPane.ERROR_MESSAGE);
            paidAmount.requestFocus();
            return;
        }
        
        if(jTable2.getRowCount() == 0)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Nothing to save"), "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(!(paymentMode.getSelectedItem().toString().equalsIgnoreCase("cash")))
        {
            if(number.getText().trim().isEmpty())
            {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Cheque/Card/Paytm number"), "Error Message", JOptionPane.ERROR_MESSAGE);
                number.requestFocus();
                return;
            }
        }
        
        int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of editing this bill?"));
        
        if(confirm == JOptionPane.YES_OPTION)
        {
            CustomerMaster customerMaster = new CustomerMaster();
            customerMaster.setName(customerName.getText());

            CustomerMasterQuery customerMasterQuery = new CustomerMasterQuery();
            List<CustomerMaster> list = customerMasterQuery.getCustomerDetails(customerMaster);

            for(CustomerMaster cm: list)
            {
                customerMaster.setId(cm.getId());
                customerMaster.setBalance(cm.getBalance());
            }

            BigDecimal paidAmount = new BigDecimal(this.paidAmount.getText().trim());
            BigDecimal balance = new BigDecimal(this.balance.getText().trim());
            BigDecimal billAmount = new BigDecimal(this.billAmount.getText().trim());
            BigDecimal total = new BigDecimal(this.total.getText().trim());

            if(Float.parseFloat(this.billAmount.getText()) > Float.parseFloat(this.total.getText()))
            {


                if(Float.parseFloat(this.paidAmount.getText()) ==  0)
                       customerMaster.setBalance(customerMaster.getBalance().subtract((billAmount.subtract(total))));
                else
                {
                    customerMaster.setBalance(customerMaster.getBalance().subtract((billAmount.subtract(total))).add(paidAmount));

                    Expenses expenses = new Expenses();
                    ExpensesQuery expensesQuery = new ExpensesQuery();

                    expenses.setDate(currentDate);
                    expenses.setAmount(paidAmount);
                    expenses.setRemark("Amount paid to customer: " + customerMaster.getName());

                    expensesQuery.insertIntoExpenses(expenses);
                }

                customerMasterQuery.updateCustomerBalance(customerMaster);
            }

            else
                if(Float.parseFloat(this.billAmount.getText()) < Float.parseFloat(this.total.getText()))
                {
                    if(Float.parseFloat(this.paidAmount.getText()) ==  0)
                        customerMaster.setBalance(customerMaster.getBalance().add((total.subtract(billAmount))));
                    else
                        customerMaster.setBalance(customerMaster.getBalance().add((total.subtract(billAmount))).subtract(paidAmount));

                    customerMasterQuery.updateCustomerBalance(customerMaster);
                }

            SaleMaster saleMaster = new SaleMaster();

            saleMaster.setId(Integer.parseInt(billId.getText().trim()));
            saleMaster.setBillAmount(total);
            saleMaster.setFinalBillAmount(total.subtract(discount));

            SaleMasterQuery saleMasterQuery = new SaleMasterQuery();
            saleMasterQuery.updateBillAmount(saleMaster);

            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Bill Edited successfully"));
            
            if(remarks.getText().trim().equalsIgnoreCase("gst taken"))
                printBill(saleMaster, true);
            else
                printBill(saleMaster, false);
            
            DefaultTableModel defaultTableModel = (DefaultTableModel)jTable2.getModel();
            defaultTableModel.setRowCount(0);
            billId.setText("");
            this.paidAmount.setText("");
            jTable2.setModel(defaultTableModel);
            customerName.setText("");
            this.billAmount.setText("");
            this.balance.setText("");
            getTotal();
        }
    }

    private void close() 
    {
        int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of closing this form?"));
        
        if(confirm == JOptionPane.YES_OPTION)
            dispose();
    }

    private void printBill(SaleMaster saleMaster, boolean flag) 
    {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        
        String joinQuery =  "SELECT\n" +
                            "     counter.`Id` AS counter_Id,\n" +
                            "     counter.`name` AS counter_name,\n" +
                            "     counter.`status` AS counter_status,\n" +
                            "     item_master.`Id` AS item_master_Id,\n" +
                            "     item_master.`name` AS item_master_name,\n" +
                            "     item_master.`unitPrice` AS item_master_unitPrice,\n" +
                            "     item_master.`gstPercent` AS item_master_gstPercent,\n" +
                            "     item_master.`sellingPrice` AS item_master_sellingPrice,\n" +
                            "     item_master.`sellingGstPercent` AS item_master_sellingGstPercent,\n" +
                            "     item_master.`finalSellingPrice` AS item_master_finalSellingPrice,\n" +
                            "     item_master.`hsnCode` AS hsnCode,\n" +
                            "     sale_details.`Id` AS sale_details_Id,\n" +
                            "     sale_details.`saleId` AS sale_details_saleId,\n" +
                            "     sale_details.`itemId` AS sale_details_itemId,\n" +
                            "     sale_details.`unitPrice` AS sale_details_unitPrice,\n" +
                            "     sale_details.`gstPercent` AS sale_details_gstPercent,\n" +
                            "     sale_details.`sellingPrice` AS sale_details_sellingPrice,\n" +
                            "     sale_details.`quantity` AS sale_details_quantity,\n" +
                            "     sale_details.`total` AS sale_details_total,\n" +
                            "     sale_master.`Id` AS sale_master_Id,\n" +
                            "     sale_master.`date` AS sale_master_date,\n" +
                            "     sale_master.`storeId` AS sale_master_storeId,\n" +
                            "     sale_master.`counterId` AS sale_master_counterId,\n" +
                            "     sale_master.`customerId` AS sale_master_customerId,\n" +
                            "     sale_master.`billAmount` AS sale_master_billAmount,\n" +
                            "     sale_master.`discount` AS sale_master_discount,\n" +
                            "     sale_master.`finalBillAmount` AS sale_master_finalBillAmount,\n" +
                            "     sale_master.`status` AS sale_master_status,\n" +
                            "     sale_master.`remark` AS sale_master_remark,\n" +
                            "     store_details.`Id` AS store_details_Id,\n" +
                            "     store_details.`name` AS store_details_name,\n" +
                            "     store_details.`address` AS store_details_address,\n" +
                            "     store_details.`city` AS store_details_city,\n" +
                            "     store_details.`state` AS store_details_state,\n" +
                            "     store_details.`pincode` AS store_details_pincode,\n" +
                            "     store_details.`phone` AS store_details_phone,\n" +
                            "     store_details.`website` AS store_details_website,\n" +
                            "     store_details.`email` AS store_details_email,\n" +
                            "     store_details.`gstNumber` AS store_details_gstNumber,\n" +
                            "     store_details.`photo` AS store_details_photo\n" +
                            "FROM\n" +
                            "     `item_master` item_master INNER JOIN `sale_details` sale_details ON item_master.`Id` = sale_details.`itemId`\n" +
                            "     INNER JOIN `sale_master` sale_master ON sale_details.`saleId` = sale_master.`Id`\n" +
                            "     INNER JOIN `counter` counter ON sale_master.`counterId` = counter.`Id`\n" +
                            "     INNER JOIN `store_details` store_details ON sale_master.`storeId` = store_details.`Id` \n" +
                            "WHERE sale_master.id = " + saleMaster.getId();
        
        try
        {
            connection = MyConnection.createConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(joinQuery);
            
            String reportSource = "";
            
            if(flag)
               reportSource = ReadFile.getPath() + "Reports\\GstSaleDetails.jrxml"; 
            else
                reportSource = ReadFile.getPath() + "Reports\\NonGstSaleDetails.jrxml"; 
            
            JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
            JRResultSetDataSource resultSetDataSource = new JRResultSetDataSource(resultSet);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, resultSetDataSource);
            JasperViewer.viewReport(jasperPrint, false);
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if (resultSet != null) 
            {
                try 
                {
                //    System.out.println("Statement");
                    resultSet.close();
                } 
                catch (SQLException e) 
                { /* ignored */}
            }
            if (statement != null) 
            {
                try 
                {
                //    System.out.println("Statement");
                    statement.close();
                } 
                catch (SQLException e) 
                { /* ignored */}
            }
            
            if (connection != null) 
            {
                try 
                {
                //    System.out.println("Connection");
                    connection.close();
                } 
                catch (SQLException e)
                {

                }
            }
        }
    }
}
