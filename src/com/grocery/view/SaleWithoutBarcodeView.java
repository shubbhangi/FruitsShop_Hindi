/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.Counter;
import com.grocery.bean.CustomerDetails;
import com.grocery.bean.CustomerPartialPayment;
import com.grocery.bean.ItemAvailability;
import com.grocery.bean.ItemMaster;
import com.grocery.bean.SaleDetails;
import com.grocery.bean.SaleMaster;
import com.grocery.bean.StoreDetails;
//import com.grocery.bean.CustomerDetails;
//import com.grocery.bean.CustomerPartialPayment;
import com.grocery.query.CounterQuery;
import com.grocery.query.CustomerDetailsQuery;
import com.grocery.query.ItemAvailabilityQuery;
import com.grocery.query.ItemQuery;
import com.grocery.query.SaleDetailsQuery;
import com.grocery.query.SaleMasterQuery;
import com.grocery.query.WarehoseDetailsQuery123;
import com.grocery.query.CustomerPartialPaymentQuery;
import com.grocery.read.MessageFormat;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author GanpatiBappa
 */
public class SaleWithoutBarcodeView extends javax.swing.JFrame {

    private boolean itemFlag;
    private boolean brandFlag;
    private int currRow_g = 0;
    private int currRow_s = 0;
    private double sumOfSellingPrice = 0.0;
    private boolean waresumOfSellingPricehouseFlag;
    private boolean warehouseFlag;
    private boolean newWarehouseFlag;

    /**
     * Creates new form SaleWithoutBarcodeView
     */
    public SaleWithoutBarcodeView() {
        initComponents();
        loadItem();
        loadBrand();
        loadWarehouswe();
        getTotal();
        loadCounter();
        // getTotal();

        jLabel33.setVisible(false);
        billId.setVisible(false);

        ItemMaster itemMaster = new ItemMaster();
        //loadTable(itemMaster);
        loadCounter();
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        defaultTableModel.setRowCount(0);
        jTable1.setModel(defaultTableModel);
        getTotal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        purchaseDate = new com.toedter.calendar.JDateChooser();
        jButton3 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jPanelWithoutBaracode = new javax.swing.JPanel();
        item = new javax.swing.JComboBox<String>();
        jLabel30 = new javax.swing.JLabel();
        total = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        brand = new javax.swing.JComboBox<String>();
        jLabel8 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        weight1 = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        quantity = new javax.swing.JFormattedTextField();
        jLabel43 = new javax.swing.JLabel();
        mfgDateText = new com.toedter.calendar.JDateChooser();
        jLabel44 = new javax.swing.JLabel();
        expDateText = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        unit1 = new javax.swing.JComboBox<String>();
        jLabel41 = new javax.swing.JLabel();
        unitPrice1 = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        remove = new javax.swing.JButton();
        change = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        cancel1 = new javax.swing.JButton();
        fullPayment = new javax.swing.JButton();
        warehouseName = new javax.swing.JComboBox<String>();
        add1 = new javax.swing.JButton();
        withoutBbarcodeFlag = new javax.swing.JRadioButton();
        barcodeFlag = new javax.swing.JRadioButton();
        jPanelSearch = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        barCode1 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        paymentMode = new javax.swing.JComboBox<String>();
        jPanelTds = new javax.swing.JPanel();
        number = new javax.swing.JFormattedTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        billId = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        counter = new javax.swing.JComboBox<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("बिक्री  भण्डार");
        jLabel1.setToolTipText("counter");

        jLabel29.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("खरीद की तारीख:");
        jLabel29.setToolTipText("Purchase Date:");

        purchaseDate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jButton3.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jButton3.setText("वापस");
        jButton3.setToolTipText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(181, 181, 181)
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(purchaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(purchaseDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel17.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("नाम :");
        jLabel17.setToolTipText("Name");

        jPanelWithoutBaracode.setBackground(new java.awt.Color(255, 255, 255));
        jPanelWithoutBaracode.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "आइटम विवरण:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Unicode MS", 0, 12), new java.awt.Color(255, 0, 0))); // NOI18N

        item.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("कुल रकम");
        jLabel30.setToolTipText("Total Amount");

        total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        total.setText("0.00");
        total.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        total.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                totalFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                totalFocusLost(evt);
            }
        });
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });
        total.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalKeyReleased(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("*");
        jLabel5.setPreferredSize(new java.awt.Dimension(7, 15));

        jLabel23.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel23.setText("वस्तु का नाम:");
        jLabel23.setToolTipText("Item Name:");

        jLabel26.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel26.setText("ब्रांड :");
        jLabel26.setToolTipText("Brand");

        brand.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        brand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("*");
        jLabel8.setPreferredSize(new java.awt.Dimension(7, 15));

        jLabel27.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel27.setText("वजन ");
        jLabel27.setToolTipText("weight");

        weight1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        weight1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        weight1.setText("00");
        weight1.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        weight1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                weight1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                weight1FocusLost(evt);
            }
        });
        weight1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                weight1KeyReleased(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("*");
        jLabel9.setPreferredSize(new java.awt.Dimension(7, 15));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("*");
        jLabel3.setPreferredSize(new java.awt.Dimension(7, 15));

        jLabel28.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel28.setText(" मात्रा");
        jLabel28.setToolTipText("quantity");

        quantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        quantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantity.setText("00");
        quantity.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        quantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                quantityFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantityFocusLost(evt);
            }
        });
        quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantityKeyReleased(evt);
            }
        });

        jLabel43.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel43.setText("निर्माण तिथि");
        jLabel43.setToolTipText("manufacturing Date");

        mfgDateText.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N

        jLabel44.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel44.setText("समाप्ति तिथि");
        jLabel44.setToolTipText("expiry date");

        expDateText.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("*");
        jLabel7.setPreferredSize(new java.awt.Dimension(7, 15));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("*");
        jLabel6.setPreferredSize(new java.awt.Dimension(7, 15));

        jLabel32.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel32.setText("इकाई");
        jLabel32.setToolTipText("Unit");

        unit1.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        unit1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select Units--", "Kg", "gm", "unit" }));
        unit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unit1ActionPerformed(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel41.setText("यूनिट मूल्य:");
        jLabel41.setToolTipText("Unit Price:");

        unitPrice1.setText("0.00");
        unitPrice1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                unitPrice1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                unitPrice1FocusLost(evt);
            }
        });
        unitPrice1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unitPrice1KeyReleased(evt);
            }
        });

        add.setBackground(new java.awt.Color(255, 255, 255));
        add.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        add.setText("जोड़ना");
        add.setToolTipText("Print");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelWithoutBaracodeLayout = new javax.swing.GroupLayout(jPanelWithoutBaracode);
        jPanelWithoutBaracode.setLayout(jPanelWithoutBaracodeLayout);
        jPanelWithoutBaracodeLayout.setHorizontalGroup(
            jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unitPrice1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(brand, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weight1)
                    .addComponent(mfgDateText, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel44)))
                .addGap(10, 10, 10)
                .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addComponent(expDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 36, Short.MAX_VALUE))
                    .addComponent(unit1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelWithoutBaracodeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(487, 487, 487))
        );
        jPanelWithoutBaracodeLayout.setVerticalGroup(
            jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelWithoutBaracodeLayout.createSequentialGroup()
                        .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 21, Short.MAX_VALUE)
                        .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(mfgDateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(expDateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(unitPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelWithoutBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(32, Short.MAX_VALUE))))
        );

        jTable1.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "वस्तु का नाम", "ब्रांड", "बारकोड", "वजन ", "इकाई", "यूनिट मूल्य", "मात्रा", "कुल", "निर्माण तिथि", "समाप्ति तिथि"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        remove.setBackground(new java.awt.Color(255, 255, 255));
        remove.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/remove.png"))); // NOI18N
        remove.setText(" हटाना");
        remove.setToolTipText("Remove");
        remove.setMnemonic(KeyEvent.VK_R);
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        remove.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                removeKeyPressed(evt);
            }
        });

        change.setBackground(new java.awt.Color(255, 255, 255));
        change.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        change.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/change.png"))); // NOI18N
        change.setText("मात्रा बदलें");
        change.setToolTipText("Change Quantity");
        change.setMnemonic(KeyEvent.VK_Q);
        change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActionPerformed(evt);
            }
        });
        change.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                changeKeyPressed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel31.setText("कुल\t");
        jLabel31.setToolTipText("Total:");

        amount.setEditable(false);
        amount.setBackground(new java.awt.Color(255, 255, 153));
        amount.setFont(new java.awt.Font("Arial Unicode MS", 1, 10)); // NOI18N
        amount.setForeground(new java.awt.Color(255, 0, 0));
        amount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        amount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                amountFocusGained(evt);
            }
        });
        amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountActionPerformed(evt);
            }
        });
        amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountKeyReleased(evt);
            }
        });

        save.setBackground(new java.awt.Color(255, 255, 255));
        save.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        save.setText("सहेजें");
        save.setToolTipText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        cancel1.setBackground(new java.awt.Color(255, 255, 255));
        cancel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        cancel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cancel.png"))); // NOI18N
        cancel1.setText(" रद्द करना");
        cancel1.setToolTipText("Cancel");
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        fullPayment.setBackground(new java.awt.Color(255, 255, 255));
        fullPayment.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        fullPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/print.png"))); // NOI18N
        fullPayment.setText(" छाप");
        fullPayment.setToolTipText("Print");
        fullPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullPaymentActionPerformed(evt);
            }
        });

        warehouseName.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        warehouseName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "--Add Customer--" }));
        warehouseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warehouseNameActionPerformed(evt);
            }
        });

        add1.setBackground(new java.awt.Color(0, 204, 51));
        add1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        add1.setForeground(new java.awt.Color(255, 255, 255));
        add1.setText("जोड़ना");
        add1.setToolTipText("Add");
        add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add1ActionPerformed(evt);
            }
        });

        withoutBbarcodeFlag.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(withoutBbarcodeFlag);
        withoutBbarcodeFlag.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        withoutBbarcodeFlag.setText(" नहीं-बारकोड");
        withoutBbarcodeFlag.setToolTipText("non-barcode");
        withoutBbarcodeFlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withoutBbarcodeFlagActionPerformed(evt);
            }
        });

        barcodeFlag.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(barcodeFlag);
        barcodeFlag.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        barcodeFlag.setText("बारकोड");
        barcodeFlag.setToolTipText("barcode");
        barcodeFlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeFlagActionPerformed(evt);
            }
        });
        barcodeFlag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barcodeFlagKeyPressed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel19.setText("नाम से खोजें:");
        jLabel19.setToolTipText("Search By Name:");

        barCode1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        barCode1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        barCode1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barCode1ActionPerformed(evt);
            }
        });
        barCode1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barCode1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                barCode1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                barCode1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelSearchLayout = new javax.swing.GroupLayout(jPanelSearch);
        jPanelSearch.setLayout(jPanelSearchLayout);
        jPanelSearchLayout.setHorizontalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(barCode1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelSearchLayout.setVerticalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barCode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel34.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel34.setText("Payment Mode:");

        paymentMode.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        paymentMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Cash", "Card", "Sodexo" }));
        paymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeActionPerformed(evt);
            }
        });

        jPanelTds.setBackground(new java.awt.Color(255, 255, 255));

        number.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        number.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        number.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        number.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numberFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                numberFocusLost(evt);
            }
        });
        number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberActionPerformed(evt);
            }
        });
        number.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numberKeyReleased(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel42.setText("TID Number");

        javax.swing.GroupLayout jPanelTdsLayout = new javax.swing.GroupLayout(jPanelTds);
        jPanelTds.setLayout(jPanelTdsLayout);
        jPanelTdsLayout.setHorizontalGroup(
            jPanelTdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTdsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel42)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelTdsLayout.setVerticalGroup(
            jPanelTdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel33.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel33.setText("Bill Id:");

        billId.setEditable(false);
        billId.setBackground(new java.awt.Color(255, 255, 153));
        billId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        billId.setForeground(new java.awt.Color(255, 0, 0));
        billId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        billId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billIdActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("Counter:");

        counter.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        counter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                counterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(fullPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addGap(18, 18, 18)
                        .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanelTds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(169, 169, 169)))
                .addGap(18, 18, 18)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(counter, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(warehouseName, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(billId, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(barcodeFlag)
                .addGap(18, 18, 18)
                .addComponent(withoutBbarcodeFlag)
                .addGap(187, 187, 187))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelWithoutBaracode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                                .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(billId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(warehouseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(add1)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(counter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(withoutBbarcodeFlag)
                            .addComponent(barcodeFlag))))
                .addGap(18, 18, 18)
                .addComponent(jPanelWithoutBaracode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelTds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(cancel1)
                    .addComponent(fullPayment))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemActionPerformed

    }//GEN-LAST:event_itemActionPerformed

    private void totalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalFocusGained
        total.selectAll();
    }//GEN-LAST:event_totalFocusGained

    private void totalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalFocusLost
        if (total.getText().trim().isEmpty()) {
            total.setText("0.00");
            unitPrice1.setText("0.00");
        }
        if (Float.parseFloat(total.getText()) == 0) {
            unitPrice1.setText("0.00");
        }
    }//GEN-LAST:event_totalFocusLost

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalActionPerformed

    private void totalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalKeyReleased
        if (!(total.getText().trim().isEmpty())) {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            float quantity = Float.parseFloat(this.quantity.getText());
            float total = Float.parseFloat(this.total.getText());

            //  float unitPrice = getUnitPrice(total, quantity);
            this.unitPrice1.setText(decimalFormat.format(unitPrice1));
        } else {
            unitPrice1.setText("0.00");
        }
    }//GEN-LAST:event_totalKeyReleased

    private void brandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandActionPerformed

    }//GEN-LAST:event_brandActionPerformed

    private void weight1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weight1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_weight1FocusGained

    private void weight1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weight1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_weight1FocusLost

    private void weight1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weight1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_weight1KeyReleased

    private void quantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFocusGained
        quantity.selectAll();
    }//GEN-LAST:event_quantityFocusGained

    private void quantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFocusLost
        if (quantity.getText().trim().isEmpty()) {
            quantity.setText("0.00");
        }
    }//GEN-LAST:event_quantityFocusLost

    private void quantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityKeyReleased
        if (!(quantity.getText().trim().isEmpty())) {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            float quantity = Float.parseFloat(this.quantity.getText());
            float total = Float.parseFloat(this.total.getText());
            float unitPrice1 = Float.parseFloat(this.unitPrice1.getText());

            //this.unitPrice1.setText(decimalFormat.format(unitPrice1.getText()));
        } else {
            unitPrice1.setText("0.00");
        }
    }//GEN-LAST:event_quantityKeyReleased

    private void unit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unit1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unit1ActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        //        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        //        remove();
    }//GEN-LAST:event_jTable1KeyPressed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        remove();
    }//GEN-LAST:event_removeActionPerformed

    private void removeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_removeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // remove();
        }
    }//GEN-LAST:event_removeKeyPressed

    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed
        changeQuantity();
    }//GEN-LAST:event_changeActionPerformed

    private void changeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_changeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //  changeQuantity();
        }
    }//GEN-LAST:event_changeKeyPressed

    private void amountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_amountFocusGained

//        double gstAmount = Double.valueOf(totalGstAmount.getText());
//        double totalAmount = Double.valueOf(total.getText());
//        double finalTOtalAmount = 0;
//        if (!(gstAmount <= 0) || !(totalAmount <= 0)) {
//            finalTOtalAmount = totalAmount + gstAmount;
//            finalAmountSale.setText(String.valueOf(finalTOtalAmount));
//        } else {
//
//            finalAmountSale.setText("0.00");
//        }
    }//GEN-LAST:event_amountFocusGained

    private void amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountActionPerformed
        getTotal();
    }//GEN-LAST:event_amountActionPerformed

    private void amountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountKeyReleased

        double totalAmount = Double.valueOf(total.getText());
        double finalTOtalAmount = 0;
    }//GEN-LAST:event_amountKeyReleased

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        try {
            //save();
            addToTable();
        } catch (Exception ex) {
            Logger.getLogger(SaleWithoutBarcodeView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        pay();
    }//GEN-LAST:event_saveActionPerformed

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancel1ActionPerformed

    private void fullPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullPaymentActionPerformed
        pay();
    }//GEN-LAST:event_fullPaymentActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        HomePage1 obj = new HomePage1();
        obj.show();
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void warehouseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warehouseNameActionPerformed
        /*     newWarehouswe.setText("");
         contact.setText("N/A");
         address.setText("N/A");
         gstNumber.setText("N/A");

         try
         {
         if(warehouseName.getItemCount() != 0)
         {
         if(warehouseName.getSelectedIndex() == 0)
         {
         warehouseFlag = false;
         jPanelNewWarehouswe.setVisible(false);
         }
         else
         if(warehouseName.getSelectedIndex() == 1)
         {
         warehouseFlag = false;
         jPanelNewWarehouswe.setVisible(true);
         }
         else
         {
         warehouseFlag = true;
         jPanelNewWarehouswe.setVisible(false);
         loadWarehouswe();
         }
         }
         }
         catch(Exception e)
         {
         }
         */
    }//GEN-LAST:event_warehouseNameActionPerformed

    private void add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add1ActionPerformed
        CustomerView customerView = new CustomerView();
        // WarehousweView customerView = new WarehousweView();
        customerView.setVisible(true);
        //    addVendor();
    }//GEN-LAST:event_add1ActionPerformed

    private void unitPrice1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitPrice1FocusGained
        unitPrice1.selectAll();
    }//GEN-LAST:event_unitPrice1FocusGained

    private void unitPrice1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitPrice1FocusLost
        if (unitPrice1.getText().trim().isEmpty()) {
            unitPrice1.setText("0.00");
            total.setText("0.00");
        }
        if (Float.parseFloat(unitPrice1.getText()) == 0) {
            total.setText("0.00");
        }
    }//GEN-LAST:event_unitPrice1FocusLost

    private void unitPrice1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitPrice1KeyReleased

        if (!(quantity.getText().trim().isEmpty())) {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            float quantity = Float.parseFloat(this.quantity.getText());
            float unitPrice1 = Float.parseFloat(this.unitPrice1.getText());

            float total = getUnitPrice(unitPrice1, quantity);
            this.total.setText(decimalFormat.format(total));
        } else {
            total.setText("0.00");
        }

    }//GEN-LAST:event_unitPrice1KeyReleased

    private void barcodeFlagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeFlagActionPerformed

        if (barcodeFlag.isSelected()) {
            jPanelWithoutBaracode.setVisible(false);
            jPanelSearch.setVisible(true);

        } else {
            jPanelWithoutBaracode.setVisible(true);
            jPanelSearch.setVisible(false);

//            jTable1.getColumnModel().getColumn(2).setMinWidth(0);
//            jTable1.getColumnModel().getColumn(2).setMaxWidth(0);
        }

    }//GEN-LAST:event_barcodeFlagActionPerformed

    private void barcodeFlagKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeFlagKeyPressed
        SalesBarCodeView salesBarCodeView = new SalesBarCodeView();
        salesBarCodeView.setVisible(true);
    }//GEN-LAST:event_barcodeFlagKeyPressed

    private void withoutBbarcodeFlagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withoutBbarcodeFlagActionPerformed
        if (withoutBbarcodeFlag.isSelected()) {
            jPanelSearch.setVisible(false);
            jPanelWithoutBaracode.setVisible(true);
//            jTable1.getColumnModel().getColumn(2).setMinWidth(0);
//            jTable1.getColumnModel().getColumn(2).setMaxWidth(0);
        } else {
            jPanelSearch.setVisible(true);
            jPanelWithoutBaracode.setVisible(false);

        }
    }//GEN-LAST:event_withoutBbarcodeFlagActionPerformed

    private void barCode1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barCode1KeyPressed

    }//GEN-LAST:event_barCode1KeyPressed

    private void barCode1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barCode1KeyReleased
        ItemMaster itemMaster = new ItemMaster();
        if (!(barCode1.getText().trim().isEmpty())) {
            // itemMaster.setName(item.getText().trim());
            itemMaster.setBarCode(barCode1.getText().trim());
            //getTotalBarCode();
            if (jTable1.getRowCount() > 0) {
                boolean notfound = true;
                for (int i = 0; i < jTable1.getRowCount(); i++) {

                    String barcode = jTable1.getValueAt(i, 2).toString();

                    BigDecimal unitPrice = new BigDecimal(jTable1.getValueAt(i, 5).toString());
                    BigDecimal quantity = new BigDecimal(jTable1.getValueAt(i, 6).toString());
                    BigDecimal total = new BigDecimal(jTable1.getValueAt(i, 7).toString());
                    if (itemMaster.getBarCode().equalsIgnoreCase(barcode)) {
                        jTable1.setValueAt((Integer.parseInt(jTable1.getValueAt(i, 6).toString().trim()) + 1), i, 6);
                        jTable1.setValueAt((new BigDecimal(jTable1.getValueAt(i, 7).toString().trim()).add(new BigDecimal(jTable1.getValueAt(i, 5).toString()))), i, 7);
                        barCode1.setText("");
                        notfound = false;
                    }
                }
                if(notfound) {
                      loadBarcodeItem(itemMaster);  
                    }
            } else {
                loadBarcodeItem(itemMaster);
            }
        }


    }//GEN-LAST:event_barCode1KeyReleased

    private void barCode1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barCode1KeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || Character.isDigit(c) || c == ',' || c == '.' || c == KeyEvent.VK_SPACE || c == '-' || c == ':')) {
            evt.consume();
        }
    }//GEN-LAST:event_barCode1KeyTyped

    private void barCode1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barCode1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barCode1ActionPerformed

    private void paymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeActionPerformed
        number.setText("");
        // bank.setSelectedIndex(0);
        if (paymentMode.getSelectedIndex() == 0 || paymentMode.getSelectedIndex() == 1) {
            jPanelTds.setVisible(false);
        } else if (paymentMode.getSelectedIndex() == 2) {
            // bank.setSelectedIndex(0);
            jPanelTds.setVisible(false);
            // chequeDate.setVisible(false);
        } else {
            jPanelTds.setVisible(true);
        }
    }//GEN-LAST:event_paymentModeActionPerformed

    private void numberFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numberFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_numberFocusGained

    private void numberFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numberFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_numberFocusLost

    private void numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberActionPerformed

    private void numberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_numberKeyReleased

    private void billIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_billIdActionPerformed

    private void counterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_counterActionPerformed
        if (counter.getItemCount() > 0) {
            ItemMaster itemMaster = new ItemMaster();
            loadTable(itemMaster);
            getDetails();

//            jPanelDiscount.setVisible(false);
//            jCheckBoxDiscount.setSelected(false);
//            discount.setText("0.00");
//            finalAmount.setText("0.00");
        }
    }//GEN-LAST:event_counterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaleWithoutBarcodeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaleWithoutBarcodeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaleWithoutBarcodeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaleWithoutBarcodeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SaleWithoutBarcodeView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton add1;
    private javax.swing.JTextField amount;
    private javax.swing.JTextField barCode1;
    private javax.swing.JRadioButton barcodeFlag;
    private javax.swing.JTextField billId;
    private javax.swing.JComboBox<String> brand;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancel1;
    private javax.swing.JButton change;
    private javax.swing.JComboBox<String> counter;
    private com.toedter.calendar.JDateChooser expDateText;
    private javax.swing.JButton fullPayment;
    private javax.swing.JComboBox<String> item;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JPanel jPanelTds;
    private javax.swing.JPanel jPanelWithoutBaracode;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JDateChooser mfgDateText;
    private javax.swing.JFormattedTextField number;
    private javax.swing.JComboBox<String> paymentMode;
    private com.toedter.calendar.JDateChooser purchaseDate;
    private javax.swing.JFormattedTextField quantity;
    private javax.swing.JButton remove;
    private javax.swing.JButton save;
    private javax.swing.JFormattedTextField total;
    private javax.swing.JComboBox<String> unit1;
    private javax.swing.JTextField unitPrice1;
    private javax.swing.JComboBox<String> warehouseName;
    private javax.swing.JFormattedTextField weight1;
    private javax.swing.JRadioButton withoutBbarcodeFlag;
    // End of variables declaration//GEN-END:variables

    private void getDetails() {
        Counter counter = new Counter();
        CounterQuery counterQuery = new CounterQuery();

        counter.setName(this.counter.getSelectedItem().toString());
        List<Counter> list = counterQuery.getCounterDetails(counter);
        for (Counter c : list) {
            counter.setId(c.getId());
        }
        SaleMaster saleMaster = new SaleMaster();
        SaleMasterQuery saleMasterQuery = new SaleMasterQuery();

        saleMaster.setCounter(counter);
        List<SaleMaster> saleList = saleMasterQuery.getSaleDetails(saleMaster);

        for (SaleMaster sm : saleList) {
            saleMaster.setId(sm.getId());
        }
        if (saleList.isEmpty()) {
            billId.setText("");
        } else {
            billId.setText(String.valueOf(saleMaster.getId()));
        }
        getSaleDetails(saleMaster);
    }

    private void getSaleDetails(SaleMaster saleMaster) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        defaultTableModel.setRowCount(0);

        SaleDetails saleDetails = new SaleDetails();
        SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
        saleDetails.setSaleMaster(saleMaster);

        List<Object[]> list = saleDetailsQuery.getSale(saleDetails);

        float gstPercentage = 0f;
        for (Object[] object : list) {
            SaleDetails sd = (SaleDetails) object[0];
            float unitPrce = Float.valueOf(sd.getUnitPrice().toString());
            float selingUnitprice = Float.valueOf(sd.getSellingPrice().toString());
            float quantity = Float.valueOf(sd.getQuantity().toString());
            float totalSellingPrice = (unitPrce * quantity);
            float totalSellingPrice1 = (selingUnitprice * quantity);
            float gstAmount = totalSellingPrice * gstPercentage / 100;

            defaultTableModel.addRow(new Object[]{sd.getId(), sd.getItemMaster().getId(), sd.getItemMaster().getName(), sd.getItemMaster().getBarCode(), sd.getQuantity(), sd.getItemMaster().getSellingPrice(), totalSellingPrice, sd.getItemMaster().getEfgDate(), sd.getItemMaster().getExpDate()});
        }
        jTable1.setModel(defaultTableModel);
        getTotal();
    }

    private void addToTable1() throws Exception {
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        DecimalFormat intFormat = new DecimalFormat("#0");
        String itemName = item.getSelectedItem().toString();
        String brandName = brand.getSelectedItem().toString();
        // String barCode = this.barCode1.getText().trim();
        String unitName = unit1.getSelectedItem().toString();
        /**
         * *********************manifacturing and Expairy Date Add to jTAble in
         * save *******************
         */
        Date mfgDate = mfgDateText.getDate();
        Date expDate = expDateText.getDate();
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        String mfg = dateFormat.format(mfgDate);
        String exp = dateFormat.format(expDate);

        if (itemName.equalsIgnoreCase("--select--")) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
            item.requestFocus();
            return;
        }
//        if (itemName.equalsIgnoreCase("add new")) {
//            if (newItem.getText().trim().isEmpty()) {
//                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
//                newItem.requestFocus();
//                return;
//            } else {
//                
//                ItemQuery itemQuery = new ItemQuery();
//                ItemMaster itemMaster = new ItemMaster();
//                itemMaster.setBarCode(barCode1.getText().trim());
//                List<ItemMaster> itemList = itemQuery.checkItem(itemMaster);
//                    if (itemList.isEmpty()) {
//                        itemQuery.insertItem(itemMaster);
//                    } else {
////                        
//                            return;
//                        } 
//                
//                itemName = newItem.getText().trim();
//            }
     /*   if (brandName.equalsIgnoreCase("--select--")) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Brand"), "Error Message", JOptionPane.ERROR_MESSAGE);
         brand.requestFocus();
         return;
         }
         if (brandName.equalsIgnoreCase("add new")) {
         if (newBrand.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the brand name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
         newBrand.requestFocus();
         return;
         } else {
         brandName = newBrand.getText().trim();
         }
         }
         if (weight1.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the weight"), "Error Message", JOptionPane.ERROR_MESSAGE);
         weight1.requestFocus();
         return;
         }
        
         if (unitName.equalsIgnoreCase("--select--")) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Unit"), "Error Message", JOptionPane.ERROR_MESSAGE);
         unit1.requestFocus();
         return;
         }
         
         unitName = this.unit1.getSelectedItem().toString();
        
         if (quantity.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
         quantity.requestFocus();
         return;
         }
         if (unitPrice1.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
         unitPrice1.requestFocus();
         return;
         }
         */
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
//        String name = this.newItem.getText().trim();
//        String brand = this.newBrand.getText().trim();
        float quantity = Float.parseFloat(this.quantity.getText().trim());
        float weight = Float.parseFloat(this.weight1.getText().trim());
        float unitPrice1 = Float.parseFloat(this.unitPrice1.getText().trim());
        // float unitPrice1 = Float.parseFloat(this.unitPrice1.getText());
        float total = getUnitPrice(unitPrice1, quantity);

//            if (itemName.equalsIgnoreCase("add new")) {
//            if (newItem.getText().trim().isEmpty()) {
//                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
//                newItem.requestFocus();
//                return;
//            } else {
//                
//                ItemQuery itemQuery = new ItemQuery();
//                ItemMaster itemMaster = new ItemMaster();
//                itemMaster.setBarCode(barCode1.getText().trim());
//                List<ItemMaster> itemList = itemQuery.checkItem(itemMaster);
//                    if (!itemList.isEmpty()) {
//                       // itemQuery.insertItem(itemMaster);
//                       JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the unique barCode Id of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
//                      barCode1.requestFocus();
//                        return;
//                    } 
//                
//                itemName = newItem.getText().trim();
//            }
        defaultTableModel.addRow(new Object[]{itemName, brandName, weight, unitName, quantity, unitPrice1, total, mfg, exp});
        jTable1.setModel(defaultTableModel);

        getTotal();
        clear();
        item.requestFocus();
        // }   
    }

    private void getTotal() {
        int i = 0;
        float sum = 0;
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        while (i < jTable1.getRowCount()) {
            sum = sum + Float.parseFloat(jTable1.getValueAt(i, 7).toString());
            i++;
        }
        amount.setText(decimalFormat.format(sum));
    }

    private void clear() {
        item.setSelectedIndex(0);
        brand.setSelectedIndex(0);
        //  barCode1.setText("00");
        weight1.setText("00");
        unit1.setSelectedIndex(0);
        quantity.setText("00");
        unitPrice1.setText("0.00");
        total.setText("0.00");
        mfgDateText.setDate(null);
        expDateText.setDate(null);

        //  discount.setText("0.00");
    }

    public void loadTable(ItemMaster itemMaster) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        // defaultTableModel.setRowCount(0);
        List<Object[]> list = new ArrayList<>();
        ItemAvailability itemAvailability = new ItemAvailability();
        ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();

        float quantity = 1;

//        float quantity = Float.parseFloat(this.quantity.getText().trim());
//         amount.setText(decimalFormat.format(sum));
        itemAvailability.setItemMaster(itemMaster);
        list = itemAvailabilityQuery.getAvailability(itemAvailability);

        for (Object[] object : list) {
            ItemAvailability ia = (ItemAvailability) object[0];

            //if(ia.getItemMaster().getGstType().equals("GST")){
            //  if(!(Double.valueOf(String.valueOf(ia.getAvailability()))<=0)) {
            //     getTotalBarCode();
            defaultTableModel.addRow(new Object[]{ia.getItemMaster().getName(), ia.getItemMaster().getBrand(), ia.getItemMaster().getBarCode(), ia.getItemMaster().getWeight(), ia.getItemMaster().getUnit(), ia.getItemMaster().getUnitPrice(), quantity, ia.getItemMaster().getTotalAmount(), ia.getItemMaster().getEfgDate(), ia.getItemMaster().getExpDate()});
              // defaultTableModel.addRow(new Object[]{ia.getItemMaster().getName(),ia.getItemMaster().getBrand(), ia.getItemMaster().getBarCode(),ia.getItemMaster().getWeight(), ia.getItemMaster().getUnit(),ia.getItemMaster().getUnitPrice(),ia.getAvailability(),ia.getItemMaster().getTotalAmount(),ia.getItemMaster().getEfgDate(),ia.getItemMaster().getExpDate()});

            //  } 
        }
        jTable1.setModel(defaultTableModel);
        barCode1.setText("");
    }

    public void loadBarcodeItem(ItemMaster itemMaster) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        // defaultTableModel.setRowCount(0);
        List<ItemMaster> list = new ArrayList<>();
        int quantity = 1;

        ItemQuery itemQuery = new ItemQuery();
        list = itemQuery.getItemByBarCode(itemMaster);
        if (!list.isEmpty()) {
            ItemMaster ia = (ItemMaster) list.get(0);

            defaultTableModel.addRow(new Object[]{ia.getName(), ia.getBrand(), ia.getBarCode(), ia.getWeight(), ia.getUnit(), ia.getUnitPrice(), quantity, ia.getUnitPrice().multiply(new BigDecimal(quantity)), ia.getEfgDate(), ia.getExpDate()});
            // defaultTableModel.addRow(new Object[]{ia.getItemMaster().getName(),ia.getItemMaster().getBrand(), ia.getItemMaster().getBarCode(),ia.getItemMaster().getWeight(), ia.getItemMaster().getUnit(),ia.getItemMaster().getUnitPrice(),ia.getAvailability(),ia.getItemMaster().getTotalAmount(),ia.getItemMaster().getEfgDate(),ia.getItemMaster().getExpDate()});
        }
        jTable1.setModel(defaultTableModel);
        barCode1.setText("");
    }

    private void getTotalBarCode() {
        int i = 0;
        float sum = 0;
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        while (i < jTable1.getRowCount()) {
            sum = sum + Float.parseFloat(jTable1.getValueAt(i, 7).toString());
            i++;
        }
        amount.setText(decimalFormat.format(sum));
    }

    private void addToTable() throws Exception {
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        DecimalFormat intFormat = new DecimalFormat("#0");
        String itemName = item.getSelectedItem().toString();
        String brandName = brand.getSelectedItem().toString();
        String barCode = "0";
        String unitName = unit1.getSelectedItem().toString();
        /**
         * *********************manifacturing and Expairy Date Add to jTAble in
         * save *******************
         */
        Date mfgDate = mfgDateText.getDate();
        Date expDate = expDateText.getDate();
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        String mfg = dateFormat.format(mfgDate);
        String exp = dateFormat.format(expDate);

        /*   if (itemName.equalsIgnoreCase("--select--")) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
         item.requestFocus();
         return;
         }
         if (itemName.equalsIgnoreCase("add new")) {
         if (newItem.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
         newItem.requestFocus();
         return;
         } else {
         itemName = newItem.getText().trim();
         /*      }
         if (brandName.equalsIgnoreCase("--select--")) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Brand"), "Error Message", JOptionPane.ERROR_MESSAGE);
         brand.requestFocus();
         return;
         }
         if (brandName.equalsIgnoreCase("add new")) {
         if (newBrand.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the brand name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
         newBrand.requestFocus();
         return;
         } else {
         brandName = newBrand.getText().trim();
         }
         }
         if (weight1.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the weight"), "Error Message", JOptionPane.ERROR_MESSAGE);
         weight1.requestFocus();
         return;
         }
        
         if (unitName.equalsIgnoreCase("--select--")) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Unit"), "Error Message", JOptionPane.ERROR_MESSAGE);
         unit1.requestFocus();
         return;
         }
         
         unitName = this.unit1.getSelectedItem().toString();
        
         if (quantity.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
         quantity.requestFocus();
         return;
         }
         if (unitPrice1.getText().trim().isEmpty()) {
         JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
         unitPrice1.requestFocus();
         return;
         }
         */
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        float quantity = Float.parseFloat(this.quantity.getText().trim());
        float weight = Float.parseFloat(this.weight1.getText().trim());
        float unitPrice = Float.parseFloat(this.unitPrice1.getText().trim());
        float unitPrice1 = Float.parseFloat(this.unitPrice1.getText());
        float total = getUnitPrice(unitPrice1, quantity);

        float totalSellingPrice = (unitPrice * quantity);
        // total.setText(decimalFormat.format(totalSellingPrice));
        int id = 1;

        defaultTableModel.addRow(new Object[]{itemName, brandName, barCode, weight, unitName, quantity, unitPrice, total, mfg, exp});
        jTable1.setModel(defaultTableModel);
        getTotal();
        clear();
        item.requestFocus();

    }
//  private void getFinalAmountPaid(String discount) {
//        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
//        finalAmount.setText(decimalFormat.format(Float.parseFloat(total.getText()) - Float.parseFloat(discount)));
//    }

    private float getUnitPrice(float unitPrice1, float quantity) {
        float total = 0;
        try {
            if (quantity == 0) {
                throw new RuntimeException();
            }
            total = unitPrice1 * quantity;

        } catch (Exception e) {
            this.total.setText("0.00");
        }
        return total;
    }

    public TableModel getTableData() {
        return jTable1.getModel();
    }

    private void loadCounter() {
        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) counter.getModel();

        Counter counter = new Counter();
        CounterQuery counterQuery = new CounterQuery();

        defaultComboBoxModel.removeAllElements();
        List<Counter> list = counterQuery.getCounterDetails(counter);

        for (Counter c : list) {
            defaultComboBoxModel.addElement(c.getName());
        }
        this.counter.setModel(defaultComboBoxModel);
    }

    private void loadItem() {
        ItemMaster itemMaster = new ItemMaster();
        ItemQuery itemQuery = new ItemQuery();

        if (itemFlag) {
            itemMaster.setName(item.getSelectedItem().toString());
        }

        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) item.getModel();

        List<ItemMaster> list = itemQuery.getItemDetails1(itemMaster);
        if (!(itemFlag)) {

            defaultComboBoxModel.removeAllElements();

            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("Add New");

            for (ItemMaster im : list) {
                defaultComboBoxModel.addElement(im.getName());
            }
        } else {
            for (ItemMaster im : list) {
                item.setSelectedItem(im.getName());
            }
        }
        item.setModel(defaultComboBoxModel);
    }

    private void loadBrand() {
        ItemMaster itemMaster = new ItemMaster();
        ItemQuery itemQuery = new ItemQuery();

        if (brandFlag) {
            itemMaster.setName(brand.getSelectedItem().toString());
        }

        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) brand.getModel();

        List<ItemMaster> list = itemQuery.getBrandDetails1(itemMaster);
        if (!(brandFlag)) {

            defaultComboBoxModel.removeAllElements();

            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("Add New");

            for (ItemMaster im : list) {
                defaultComboBoxModel.addElement(im.getBrand());
            }
        } else {
            for (ItemMaster im : list) {
                brand.setSelectedItem(im.getBrand());
            }
        }
        brand.setModel(defaultComboBoxModel);
    }

    private void remove() {
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
            defaultTableModel.removeRow(jTable1.getSelectedRow());
            jTable1.setModel(defaultTableModel);
            getTotal();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the row you want to remove"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void pay() {
        try {
//            newWarehouseFlag = false;
            if (jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("No order placed"), "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String paymentMode = this.paymentMode.getSelectedItem().toString();
            String warehouseName = this.warehouseName.getSelectedItem().toString();

            SaleMaster saleMaster = new SaleMaster();
            SaleMasterQuery saleMasterQuery = new SaleMasterQuery();

            if (warehouseName.equalsIgnoreCase("--Select--")) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select a Warehouswe"), "Error message", JOptionPane.ERROR_MESSAGE);
                this.warehouseName.requestFocus();
                return;
            }

            if (paymentMode.equalsIgnoreCase("--Select--")) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select a payment Mode"), "Error message", JOptionPane.ERROR_MESSAGE);
                this.paymentMode.requestFocus();
                return;
            }

            /*             StoreDetails storeDetails = new StoreDetails();
             //  WarehoseDetailsQuery123 customerDetailsQuery = new WarehoseDetailsQuery123();
             StoreDetailsQuery storeDetailsQuery = new StoreDetailsQuery();
             storeDetails.setName("1");

             List<StoreDetails> list = storeDetailsQuery.getStoreDetails(storeDetails);
             if (list.isEmpty()) // customerDetailsQuery.insertWarehouse(customerDetails);        
             {
             customerDetailsQuery.insertCustomer(customerDetails);
             } else {
             for (CustomerDetails cm : list) {
             customerDetails.setId(cm.getId());
             customerDetails.setBalance(cm.getBalance().add(new BigDecimal(0.00)));
             }
             customerDetailsQuery.updateCustomerBalance(customerDetails);
             }
             */
            StoreDetails storeDetails = new StoreDetails();
            CounterQuery counterQuery = new CounterQuery();
            Counter counter = new Counter();
            Date date = this.purchaseDate.getDate();
            storeDetails.setId(1);

            saleMaster.setDate(date);
            saleMaster.setStoreDetails(storeDetails);
            saleMaster.setId(1);

            CustomerDetails customerDetails = new CustomerDetails();
            CustomerDetailsQuery customerDetailsQuery = new CustomerDetailsQuery();
            customerDetails.setName(warehouseName);

            //counter.setName(this.counter.getSelectedItem().toString());
            // List<Counter> list = counterQuery.getCounterDetails(counter);
            List<CustomerDetails> list = customerDetailsQuery.getCustomerDetails(customerDetails);
            if (list.isEmpty()) // customerDetailsQuery.insertWarehouse(customerDetails);        
            {
                customerDetailsQuery.insertCustomer(customerDetails);
            } else {
                for (CustomerDetails cm : list) {
                    customerDetails.setId(cm.getId());
                    customerDetails.setBalance(cm.getBalance().add(new BigDecimal(0.00)));
                }
                customerDetailsQuery.updateCustomerBalance(customerDetails);
            }
            CustomerPartialPayment customerPartialPayment = new CustomerPartialPayment();
            customerPartialPayment.setPaymentMode(paymentMode);
            customerPartialPayment.setBank("N/A");
            customerPartialPayment.setChequeOrCardNumber(this.number.getText());
            customerPartialPayment.setCustomerDetails(customerDetails);
            customerPartialPayment.setDate(this.purchaseDate.getDate());
            customerPartialPayment.setStatus("1");
            // customerPartialPayment.setPaidAmount(new BigDecimal(total.getText().trim()));
            customerPartialPayment.setPaidAmount(new BigDecimal(amount.getText().trim()));
            CustomerPartialPaymentQuery customerPartialPaymentQuery = new CustomerPartialPaymentQuery();
            if ((paymentMode.equalsIgnoreCase("Cash"))) {
            }

            if ((paymentMode.equalsIgnoreCase("Card"))) {
            }

            //    saleMaster.setGstAmount(BigDecimal.valueOf(getTotalGSTAmount()));
            saleMaster.setBillAmount(new BigDecimal(getTotalBillAmount()));
            // saleMaster.setFinalBillAmount(new BigDecimal(total.getText().trim()));
            saleMaster.setFinalBillAmount(new BigDecimal(amount.getText().trim()));
            //           saleMaster.setDiscount(new BigDecimal(0));
            saleMaster.setDiscount(new BigDecimal(0.00));
            //saleMaster.setFinalBillAmount(new BigDecimal(total.getText().trim()));
            saleMaster.setFinalBillAmount(new BigDecimal(amount.getText().trim()));
            customerPartialPayment.setPaidAmount(new BigDecimal(amount.getText().trim()));
            //   customerPartialPayment.setPaidAmount(new BigDecimal(total.getText().trim()));

            int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of this Sale?"));
            if (confirm == JOptionPane.YES_OPTION) {
                //saleMaster.setId(Integer.parseInt(billId.getText()));
                saleMaster.setCustomerDetails(customerDetails);

                //  saleMaster.setStoreDetails(customerDetails);
                // saleMaster.setCounter();
                saleMaster.setCustomerDetails(customerDetails);
                saleMaster.setStatus("1");
                saleMasterQuery.insertIntoSaleMaster(saleMaster);

                customerPartialPaymentQuery.insertIntoCustomerPartialPaymentView(customerPartialPayment);
                saveSaleDetails(saleMaster);
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Sale successful"));

                //printBill(saleMaster);
                clear();
                //clear1();
                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
                defaultTableModel.setRowCount(0);
                jTable1.setModel(defaultTableModel);
                getTotal();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Invalid Entry!!!"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    double getTotalBillAmount() {
        int index = jTable1.getRowCount();
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        while (currRow_s < index) {
            sumOfSellingPrice = sumOfSellingPrice + Float.parseFloat(jTable1.getValueAt(currRow_s, 6).toString());
            currRow_s++;
        }

        return sumOfSellingPrice;
    }

    private void getTotal1() {
        int i = 0;
        float sum = 0;
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");

        while (i < jTable1.getRowCount()) {
            sum = sum + Float.parseFloat(jTable1.getValueAt(i, 6).toString());
            i++;
        }
        total.setText(decimalFormat.format(sum));
    }

    private void loadWarehouswe() {
        CustomerDetails customerDetails = new CustomerDetails();
        WarehoseDetailsQuery123 customerQuery = new WarehoseDetailsQuery123();

        if (warehouseFlag) {
            customerDetails.setName(warehouseName.getSelectedItem().toString());
        }
        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) warehouseName.getModel();
        List<CustomerDetails> list = customerQuery.getCustomerDetails(customerDetails);
        if (!(warehouseFlag)) {
            defaultComboBoxModel.removeAllElements();
            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("--Add Warehouswe--");
            defaultComboBoxModel.addElement("N/A");
            for (CustomerDetails vm : list) {
                defaultComboBoxModel.addElement(vm.getName());
            }
        } else {
            for (CustomerDetails vm : list) {
                warehouseName.setSelectedItem(vm.getName());
            }
        }
        warehouseName.setModel(defaultComboBoxModel);

    }

    private void saveSaleDetails(SaleMaster saleMaster) {

        //DefaultTableModel tm = (DefaultTableModel) this.jTable1;
        int i = 0;
        String itemName = "";
        String brand;
        String barcode;
        String weight;
        BigDecimal quantity;
        BigDecimal total;
        BigDecimal unitPrice;
        String unit;
        Date mfg;
        Date exp;
        while (i < jTable1.getRowCount()) {

            itemName = jTable1.getValueAt(i, 0).toString();
            brand = jTable1.getValueAt(i, 1).toString();
            barcode = jTable1.getValueAt(i, 2).toString();
            weight = jTable1.getValueAt(i, 3).toString();
            unit = jTable1.getValueAt(i, 4).toString();
            unitPrice = new BigDecimal(jTable1.getValueAt(i, 5).toString());
            quantity = new BigDecimal(jTable1.getValueAt(i, 6).toString());
            total = new BigDecimal(jTable1.getValueAt(i, 7).toString());
//            try{
//                
//            mfg=new SimpleDateFormat("dd/MM/yyyy").parse(jTable1.getValueAt(i, 8).toString()); 
//            //mfg = new Date(jTable1.getValueAt(i, 8).toString());
//            exp = new Date(jTable1.getValueAt(i, 9).toString());
//            }catch(Exception e){
//                e.printStackTrace();
//            }
            //  mrp = new BigDecimal(tm.getValueAt(i ,12).toString());

            ItemMaster im = new ItemMaster();
            im.setBarCode(barcode);
            im.setName(itemName);
            im.setBrand(brand);
//            im.setEfgDate(mfg);
//            im.setExpDate(exp);
            im.setQuantity(quantity);
            im.setUnit(unit);
            im.setUnitPrice(unitPrice);
            im.setTotalAmount(total);
            im.setWeight(new BigDecimal(weight));
            List<ItemMaster> list = new ArrayList<>();
            if (!barcode.equals("0")) {

                ItemQuery itemQuery = new ItemQuery();
                list = itemQuery.getItemByBarCode(im);
                if (!list.isEmpty()) {

                    SaleDetails saleDetails = new SaleDetails();
                    saleDetails.setItemMaster(list.get(0));
                    saleDetails.setQuantity(quantity);
                    saleDetails.setUnitPrice(unitPrice);
                    saleDetails.setSaleMaster(saleMaster);
                    saleDetails.setTotal(total);

                    SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
                    saleDetailsQuery.insertIntoSaleDetails(saleDetails);
                } else {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Invalid Barcode!!!"), "Error Message", JOptionPane.ERROR_MESSAGE);

                }

            } else {
                //without barcode code here 
            }

            i++;
        }

    }

    private void changeQuantity() {
        int i = jTable1.getSelectedRow();

        try {
            DecimalFormat decimalFormat = new DecimalFormat("#0.000");

           
            BigDecimal newQuantity ;

            JFrame frame = new JFrame("Input");
            String itemName = jTable1.getValueAt(i, 0).toString();
            newQuantity = new BigDecimal(JOptionPane.showInputDialog(frame, "<HTML><FONT color=\"#000000\">Enter the quantity of: <strong><U>" + itemName + "</U></strong><br><strong><U> Quantity </U></strong></FONT></HTML>"));
            //int compare = new BigDecimal(newQuantity).compareTo(eAvailability.getAvailability());

            /*  if(compare == 1)
             {
             JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Entered Quantity is greater than Available Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
             return;
             } */
            if (newQuantity.equals(0)) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Quantity can't be zero"), "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            BigDecimal unitPrice = new BigDecimal(jTable1.getValueAt(i, 5).toString());
            jTable1.setValueAt(newQuantity,i, 6);

            jTable1.setValueAt(unitPrice.multiply(newQuantity), i, 7);
            barCode1.setText("");

            clear();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to change the quantity of"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }

    }
}
