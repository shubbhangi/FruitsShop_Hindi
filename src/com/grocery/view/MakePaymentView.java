/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.CustomerDetails;
import com.grocery.bean.CustomerPartialPayment;

import com.grocery.bean.Expenses;
import com.grocery.bean.VendorMaster;
import com.grocery.bean.VendorPartialPayment;
import com.grocery.query.BeginningCashQuery;
import com.grocery.query.WarehoseDetailsQuery123;
import com.grocery.query.CustomerPartialPaymentQuery;
import com.grocery.query.ExpensesQuery;
import com.grocery.query.VendorPartialPaymentQuery;
import com.grocery.query.VendorQuery;
import com.grocery.read.MessageFormat;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class MakePaymentView extends javax.swing.JInternalFrame {

    private JDesktopPane jDesktopPane;
    private boolean flag;
    private int id;
    private Date date = new Date();
    private BigDecimal beginningCash;
    private BigDecimal expenses;
    private JTextFieldDateEditor editor;

    public MakePaymentView(JDesktopPane jDesktopPane, boolean flag, int id) {
        initComponents();
        this.jDesktopPane = jDesktopPane;
        this.flag = flag;
        this.id = id;
        
        currentDate.setDate(date);
        chequeDate.setDate(date);
        jPanelPaymentMode.setVisible(false);
        
        editor = (JTextFieldDateEditor)currentDate.getDateEditor();
        editor.setEditable(false);
        
        editor = (JTextFieldDateEditor)chequeDate.getDateEditor();
        editor.setEditable(false);
        
        jTable1.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 11));
        loadComboBox();
        loadTable();
        loadBeginningCash();
        loadExpenses();
        loadCash();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        vendorAccounts = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelName = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabelName3 = new javax.swing.JLabel();
        contact = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        vendorAccounts1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabelName1 = new javax.swing.JLabel();
        balance = new javax.swing.JTextField();
        jLabelName2 = new javax.swing.JLabel();
        pending = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        vendorAccounts2 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jPanelPaymentMode = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        bank = new javax.swing.JComboBox<>();
        jLabel36 = new javax.swing.JLabel();
        cheque = new javax.swing.JTextField();
        chequeDate = new com.toedter.calendar.JDateChooser();
        jLabel34 = new javax.swing.JLabel();
        paymentMode = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        availableCash = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        paidAmount = new javax.swing.JFormattedTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        cancel = new javax.swing.JButton();
        pay = new javax.swing.JButton();
        jLabelName4 = new javax.swing.JLabel();
        currentDate = new com.toedter.calendar.JDateChooser();

        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");
        jPanel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        vendorAccounts.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        vendorAccounts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vendorAccounts.setText("Payment");

        jLabelName.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabelName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelName.setText("Vendor Name:");

        name.setEditable(false);
        name.setBackground(new java.awt.Color(255, 255, 153));
        name.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        name.setForeground(new java.awt.Color(255, 0, 0));
        name.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nameFocusGained(evt);
            }
        });
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        jLabelName3.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabelName3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelName3.setText("Contact:");

        contact.setEditable(false);
        contact.setBackground(new java.awt.Color(255, 255, 153));
        contact.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        contact.setForeground(new java.awt.Color(255, 0, 0));
        contact.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        contact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                contactFocusGained(evt);
            }
        });
        contact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Payment Date", "Payment Mode", "Number", "Bank", "Paid Amount", "Cheque Date", "Clearance Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        vendorAccounts1.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        vendorAccounts1.setText(" Payment History:");

        jLabelName1.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabelName1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelName1.setText("Total Balance:");

        balance.setEditable(false);
        balance.setBackground(new java.awt.Color(255, 255, 153));
        balance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        balance.setForeground(new java.awt.Color(255, 0, 0));
        balance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        balance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                balanceFocusGained(evt);
            }
        });
        balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceActionPerformed(evt);
            }
        });

        jLabelName2.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabelName2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelName2.setText("Clearance Pending:");

        pending.setEditable(false);
        pending.setBackground(new java.awt.Color(255, 255, 153));
        pending.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        pending.setForeground(new java.awt.Color(255, 0, 0));
        pending.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pending.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pendingFocusGained(evt);
            }
        });
        pending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendingActionPerformed(evt);
            }
        });

        vendorAccounts2.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        vendorAccounts2.setText(" Payment Details:");

        jPanelPaymentMode.setBackground(new java.awt.Color(255, 255, 255));

        jLabel35.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel35.setText("Bank Name:");

        bank.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bank.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A.P. Mahesh Co-Op Urban Bank Ltd", "Abhyudaya Co-op Bank Ltd", "Abu Dhabi Commercial Bank", "Ahmedabad Mercantile Co-operative Bank Ltd", "Allahabad Bank", "Andhra Bank", "Apna Sahakari Bank Ltd.", "Axis Bank", "Bank Of America", "Bank Of Bahrain And Kuwait", "Bank Of Baroda", "Bank Of Ceylon", "Bank Of India", "Bank Of Maharashtra", "Bank Of Nova Scotia", "Bank Of Rajasthan Ltd", "Bank Of Tokyo-Mitsubishi UFJ Ltd", "Barclays Bank PLC", "Bassein Catholic Co-Op Bank Ltd", "Bharat Co-operative Bank (Mumbai) Ltd", "Bharat Overseas Bank", "BNP Paribas", "Calyon Bank", "Canara Bank", "Catholic Syrian Bank Ltd", "Central Bank Of India", "Chinatrust Commercial Bank", "Citibank NA", "Citizencredit Co-operative Bank Ltd", "City Union Bank Ltd", "Corporation Bank", "Cosmos Co-operative Bank Ltd.", "Credit Agricole Corp N Invsmnt Bank", "DBS Bank Ltd", "Dena Bank", "Deutsche Bank AG", "Development Credit Bank Limited", "Dhanalakshmi Bank Ltd", "DICGC", "Dombivli Nagari Sahakari Bank Limited", "Federal Bank Ltd", "Firstrand Bank Limited", "Greater Bombay Co-op. Bank Ltd", "HDFC Bank Ltd", "HSBC", "ICICI Bank Ltd", "IDBI Bank Ltd", "Indian Bank", "Indian Overseas Bank", "Indusind Bank Ltd", "ING Vysya Bank Ltd", "Jammu And Kashmir Bank Ltd", "Janakalyan Sahakari Bank Ltd", "Janata Sahakari Bank Ltd (Pune)", "JP Morgan Chase Bank NA", "Kallappanna Awade Ich Janata S Bank", "Kalupur Commercial Co. Op. Bank Ltd.", "Kalyan Janata Sahakari Bank Ltd.", "Kapole Co Op Bank", "Karad Urban Co-Op Bank Ltd", "Karnataka Bank Ltd", "Karnataka State Apex  Coop. Bank Ltd.", "Karur Vysya Bank", "Kotak Mahindra Bank", "Lakshmi Vilas Bank Ltd", "Mahanagar Co-op Bank Ltd", "Maharashtra State Co Operative Bank", "Mashreq Bank PSC", "Mehsana Urban Cooperative Bank Ltd", "Mizuho Corporate Bank Ltd", "Nagpur Nagrik Sahakari Bank Ltd", "Nainital Bank Limited", "Nasik Merchants Co-Op Bank Ltd", "New India Co-operative Bank Ltd", "Nkgsb Co-op Bank Ltd", "Nutan Nagarik Sahakari Bank Ltd", "Oman International Bank Saog", "Oriental Bank Of Commerce", "Parsik Janata Sahakari Bank Ltd", "PMC Bank", "Punjab And Maharashtra Co-op Bank Ltd", "Punjab And Sind Bank", "Punjab National Bank", "Rajkot Nagarik Sahakari Bank Ltd", "Ratnakar Bank Ltd", "Reserve Bank Of India", "Saraswat Co-operative Bank Ltd", "Shamrao Vithal Co-operative Bank Limited", "Shinhan Bank", "Societe Generale", "South Indian Bank", "Standard Chartered Bank", "State Bank Of Bikaner And Jaipur", "State Bank Of Hyderabad", "State Bank Of India", "State Bank Of Indore", "State Bank Of Mauritius Ltd", "State Bank Of Mysore", "State Bank Of Patiala", "State Bank Of Travancore", "Surat Peoples Co-Op Bank Ltd", "Syndicate Bank", "Tamilnad Mercantile Bank Ltd", "Tamilnadu State Apex Cooperative Bank Limited", "Thane Janata Sahakari Bank Ltd", "The Royal Bank Of Scotland NV", "UBS AG", "UCO Bank", "Union Bank Of India", "United Bank Of India", "Vijaya Bank", "West Bengal State Cooperative Bank Ltd", "Yes Bank Ltd" }));

        jLabel36.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel36.setText("Cheque/NEFT #:");

        cheque.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        cheque.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cheque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chequeKeyTyped(evt);
            }
        });

        chequeDate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout jPanelPaymentModeLayout = new javax.swing.GroupLayout(jPanelPaymentMode);
        jPanelPaymentMode.setLayout(jPanelPaymentModeLayout);
        jPanelPaymentModeLayout.setHorizontalGroup(
            jPanelPaymentModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPaymentModeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cheque, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chequeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bank, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanelPaymentModeLayout.setVerticalGroup(
            jPanelPaymentModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPaymentModeLayout.createSequentialGroup()
                .addGroup(jPanelPaymentModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPaymentModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPaymentModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cheque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chequeDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 3, Short.MAX_VALUE))
        );

        jLabel34.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel34.setText("Payment Mode:");

        paymentMode.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        paymentMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "Cash", "Card", "Cheque", "NEFT" }));
        paymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel31.setText("Available Cash:");

        availableCash.setEditable(false);
        availableCash.setBackground(new java.awt.Color(255, 255, 153));
        availableCash.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        availableCash.setForeground(new java.awt.Color(255, 0, 0));
        availableCash.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel32.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel32.setText("Paid Amount:");

        paidAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        paidAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        paidAmount.setText("0.00");
        paidAmount.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        paidAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                paidAmountFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                paidAmountFocusLost(evt);
            }
        });
        paidAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                paidAmountKeyPressed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cancel.setMnemonic(KeyEvent.VK_C);
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        pay.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        pay.setText("Pay");
        pay.setMnemonic(KeyEvent.VK_P);
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });

        jLabelName4.setFont(new java.awt.Font("Georgia", 1, 10)); // NOI18N
        jLabelName4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelName4.setText("Payment Date:");

        currentDate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelPaymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 396, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelName1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91)
                                .addComponent(jLabelName2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pending, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(pay, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(349, 349, 349))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(278, 278, 278)
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(availableCash, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paidAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(jLabelName3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(contact)
                                .addGap(47, 47, 47)
                                .addComponent(jLabelName4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(currentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(61, 61, 61))))
            .addComponent(jSeparator5)
            .addComponent(jSeparator6)
            .addComponent(jSeparator7)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 1017, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 984, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vendorAccounts2, javax.swing.GroupLayout.PREFERRED_SIZE, 982, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vendorAccounts1, javax.swing.GroupLayout.PREFERRED_SIZE, 983, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vendorAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 981, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(vendorAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vendorAccounts1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelName2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pending, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vendorAccounts2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelName3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelName4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(currentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPaymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availableCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paidAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(pay))
                .addContainerGap(223, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1003, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameFocusGained

    }//GEN-LAST:event_nameFocusGained

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void contactFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contactFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_contactFocusGained

    private void contactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactActionPerformed

    private void balanceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_balanceFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_balanceFocusGained

    private void balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_balanceActionPerformed

    private void pendingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pendingFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_pendingFocusGained

    private void pendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pendingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pendingActionPerformed

    private void chequeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chequeKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)))
            evt.consume();
    }//GEN-LAST:event_chequeKeyTyped

    private void paymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeActionPerformed
        cheque.setText("");
        chequeDate.setDate(date);
        bank.setSelectedIndex(0);
      
        if(paymentMode.getItemCount() > 0)
        {
            if(flag)
            {
                if(paymentMode.getSelectedIndex() == 0 || paymentMode.getSelectedIndex() == 1)
                    jPanelPaymentMode.setVisible(false);
                else
                    if(paymentMode.getSelectedIndex() == 2)
                    {
                        jPanelPaymentMode.setVisible(true);
                        chequeDate.setVisible(false);
                    }
                    else
                    {
                        jPanelPaymentMode.setVisible(true);
                        chequeDate.setVisible(true);
                    }
            }
            else
            {
                chequeDate.setVisible(false);
                jLabel35.setVisible(false);
                bank.setVisible(false);
                if(paymentMode.getItemCount() > 0)
                {
                    if(paymentMode.getSelectedItem().toString().equalsIgnoreCase("cash") || paymentMode.getSelectedItem().toString().equalsIgnoreCase("cash"))
                        jPanelPaymentMode.setVisible(false);
                    else
                        if(paymentMode.getSelectedItem().toString().equalsIgnoreCase("cheque"))
                        {
                            jPanelPaymentMode.setVisible(true);
                            chequeDate.setVisible(true);
                            jLabel35.setVisible(true);
                            bank.setVisible(true);
                        }   
                        else
                            if(paymentMode.getSelectedItem().toString().equalsIgnoreCase("card"))
                            {
                                jPanelPaymentMode.setVisible(true);
                                jLabel35.setVisible(true);
                                bank.setVisible(true);
                            }
                            else
                            {
                                jPanelPaymentMode.setVisible(true);
                                jLabel35.setVisible(false);
                                bank.setVisible(false);
                            }
                }
            }
        }        
    }//GEN-LAST:event_paymentModeActionPerformed

    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        pay();
    }//GEN-LAST:event_payActionPerformed

    private void paidAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paidAmountFocusLost
        if(paidAmount.getText().trim().isEmpty())
            paidAmount.setText("0.00");
    }//GEN-LAST:event_paidAmountFocusLost

    private void paidAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paidAmountFocusGained
        paidAmount.selectAll();
    }//GEN-LAST:event_paidAmountFocusGained

    private void paidAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidAmountKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            pay();
    }//GEN-LAST:event_paidAmountKeyPressed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        cancel();
    }//GEN-LAST:event_cancelActionPerformed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            cancel();
    }//GEN-LAST:event_cancelKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField availableCash;
    private javax.swing.JTextField balance;
    private javax.swing.JComboBox<String> bank;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField cheque;
    private com.toedter.calendar.JDateChooser chequeDate;
    private javax.swing.JTextField contact;
    private com.toedter.calendar.JDateChooser currentDate;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelName1;
    private javax.swing.JLabel jLabelName2;
    private javax.swing.JLabel jLabelName3;
    private javax.swing.JLabel jLabelName4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelPaymentMode;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField name;
    private javax.swing.JFormattedTextField paidAmount;
    private javax.swing.JButton pay;
    private javax.swing.JComboBox<String> paymentMode;
    private javax.swing.JTextField pending;
    private javax.swing.JLabel vendorAccounts;
    private javax.swing.JLabel vendorAccounts1;
    private javax.swing.JLabel vendorAccounts2;
    // End of variables declaration//GEN-END:variables
    
    private void loadBeginningCash() 
    {
        BeginningCashQuery beginningCashQuery = new BeginningCashQuery();
        
        List<BigDecimal> list = beginningCashQuery.getBeginningCash();
        
        for(BigDecimal bd: list)
            beginningCash = bd;
    }

    private void loadExpenses() 
    {
        ExpensesQuery expensesQuery = new ExpensesQuery();
        
        List<BigDecimal> list = expensesQuery.getExpenses();
        
        for(BigDecimal bd: list)
            expenses = bd;
    }

    private void loadCash() 
    {
        availableCash.setText(String.valueOf(beginningCash.subtract(expenses)));
    }
    
    private void loadTable() 
    {
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable1.getModel();
        defaultTableModel.setRowCount(0);
        DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
        
        int i = 0;
        
        if(flag)
        {
            VendorMaster vendorMaster = new VendorMaster();
            vendorMaster.setId(id);
            
            VendorPartialPayment vendorPartialPayment = new VendorPartialPayment();
            vendorPartialPayment.setVendorMaster(vendorMaster);
            
            VendorPartialPaymentQuery vendorPartialPaymentQuery = new VendorPartialPaymentQuery();
            
            List<Object[]> list = vendorPartialPaymentQuery.getVendorPaymentHistory(vendorPartialPayment);
            
            for(Object[] object: list)
            {                
                VendorPartialPayment vpp = (VendorPartialPayment) object[0];
                name.setText(vpp.getVendorMaster().getName());
                defaultTableModel.addRow(new Object[]{dateFormat.format(vpp.getDate()), vpp.getPaymentMode(), vpp.getChequeCardNumber(), vpp.getBank(), vpp.getPaidAmount()});
                
                if(vpp.getChequeDate() == null)
                    defaultTableModel.setValueAt("N/A", i, 5);
                else
                    defaultTableModel.setValueAt(dateFormat.format(vpp.getChequeDate()), i, 5);
                
                if(vpp.getChequeClearanceDate() == null)
                    defaultTableModel.setValueAt("N/A", i, 6);
                else
                    defaultTableModel.setValueAt(dateFormat.format(vpp.getChequeClearanceDate()), i, 6);
                            
                if(vpp.getStatus().equals("0"))
                    defaultTableModel.setValueAt("Pending", i, 7);
                else
                    defaultTableModel.setValueAt("Cleared", i, 7);
                
                balance.setText(String.valueOf(vpp.getVendorMaster().getBalance()));
                contact.setText(vpp.getVendorMaster().getContact());
                i++;
            }
        }
        else
        {
            jLabelName.setText("Customer Name:");
           
            CustomerDetails customerDetails = new CustomerDetails();
            customerDetails.setId(id);
            
            CustomerPartialPayment customerPartialPayment = new CustomerPartialPayment();
            customerPartialPayment.setCustomerDetails(customerDetails);
            
            CustomerPartialPaymentQuery warehousePartialPaymentQuery = new CustomerPartialPaymentQuery();
            
            List<Object[]> list = warehousePartialPaymentQuery.getCustomerPaymentHistory(customerPartialPayment);
            
            for(Object[] object: list)
            {
                CustomerPartialPayment vpp = (CustomerPartialPayment)object[0];
                
                name.setText(vpp.getCustomerDetails().getName());
                defaultTableModel.addRow(new Object[]{dateFormat.format(vpp.getDate()), vpp.getPaymentMode(), vpp.getChequeOrCardNumber(), vpp.getBank(), vpp.getPaidAmount()});
                
                if(vpp.getChequeDate() == null)
                    defaultTableModel.setValueAt("N/A", i, 5);
                else
                    defaultTableModel.setValueAt(dateFormat.format(vpp.getChequeDate()), i, 5);
                
                if(vpp.getChequeClearanceDate() == null)
                    defaultTableModel.setValueAt("N/A", i, 6);
                else
                    defaultTableModel.setValueAt(dateFormat.format(vpp.getChequeClearanceDate()), i, 6);
                            
                if(vpp.getStatus().equals("0"))
                    defaultTableModel.setValueAt("Pending", i, 7);
                else
                    defaultTableModel.setValueAt("Cleared", i, 7);
                
                balance.setText(String.valueOf(vpp.getCustomerDetails().getBalance()));
                contact.setText(vpp.getCustomerDetails().getContact());
                i++;
            }
        }
        jTable1.setModel(defaultTableModel);
        
        getTotalPending();
    }

    private void getTotalPending() 
    {
        int i = 0;
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        
        float sum = 0;
        
        while(i < jTable1.getRowCount())
        {
            if(jTable1.getValueAt(i, 7).toString().equalsIgnoreCase("pending"))
                sum = sum + Float.parseFloat(jTable1.getValueAt(i, 4).toString());
            i++;
        }
        
        pending.setText(decimalFormat.format(sum));
    }

    private void loadComboBox() 
    {
        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel)paymentMode.getModel();
        defaultComboBoxModel.removeAllElements();
        
        if(flag)
        {
            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("Cash");
            defaultComboBoxModel.addElement("Card");
            defaultComboBoxModel.addElement("Cheque");
            defaultComboBoxModel.addElement("NEFT");
        }
        else
        {
            defaultComboBoxModel.addElement("Cash");
            defaultComboBoxModel.addElement("Card");
            defaultComboBoxModel.addElement("Cheque");
            defaultComboBoxModel.addElement("Paytm");
            
            jLabel31.setVisible(false);
            availableCash.setVisible(false);
        }
        
        paymentMode.setModel(defaultComboBoxModel);
    }

    private void pay() 
    {   
        String paymentMode = this.paymentMode.getSelectedItem().toString();
        String bankName = "N/A";
        String number = "N/A";
        if(paidAmount.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Amount"), "Error message", JOptionPane.ERROR_MESSAGE);
            paidAmount.requestFocus();
            return;
        }
        if(Float.parseFloat(paidAmount.getText()) == 0)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Amount can't be Zero"), "Error message", JOptionPane.ERROR_MESSAGE);
            paidAmount.requestFocus();
            return;
        }
        if(paymentMode.equalsIgnoreCase("--Select--"))
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Payment Mode"), "Error message", JOptionPane.ERROR_MESSAGE);
            this.paymentMode.requestFocus();
            return;
        }
        
        if(flag)
        {
            VendorMaster vendorMaster = new VendorMaster();
            VendorPartialPayment vendorPartialPayment = new VendorPartialPayment();
            VendorPartialPaymentQuery vendorPartialPaymentQuery = new VendorPartialPaymentQuery();
            ExpensesQuery expensesQuery = new ExpensesQuery();
            Expenses expenses = new Expenses();

            vendorMaster.setId(id);
            vendorMaster.setName(name.getText().trim());

            VendorQuery vendorQuery = new VendorQuery();
            List<VendorMaster> list = vendorQuery.getVendorDetails(vendorMaster);

            for(VendorMaster vm: list)
                vendorMaster.setBalance(vm.getBalance());

            vendorPartialPayment.setVendorMaster(vendorMaster);
            vendorPartialPayment.setDate(currentDate.getDate());
            vendorPartialPayment.setStatus("0");

            if(paymentMode.equalsIgnoreCase("cash") || paymentMode.equalsIgnoreCase("card"))
            {
                if(Float.parseFloat(paidAmount.getText()) > Float.parseFloat(availableCash.getText()))
                {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Amount can't be greater than Available Cash for Card/Cash"), "Error message", JOptionPane.ERROR_MESSAGE);
                    paidAmount.requestFocus();
                    return;
                }
                vendorPartialPayment.setStatus("1");
            }

            if(!(paymentMode.equalsIgnoreCase("cash")))
            {
                if(cheque.getText().trim().isEmpty())
                {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the number"), "Error message", JOptionPane.ERROR_MESSAGE);
                    cheque.requestFocus();
                    return;
                }

                number = cheque.getText().trim();
                bankName = bank.getSelectedItem().toString();
            }

            if(paymentMode.equalsIgnoreCase("cheque") || paymentMode.equalsIgnoreCase("neft"))
                vendorPartialPayment.setChequeDate(chequeDate.getDate());

            vendorPartialPayment.setPaymentMode(paymentMode);
            vendorPartialPayment.setPaidAmount(new BigDecimal(paidAmount.getText().trim()));
            vendorPartialPayment.setBank(bankName);
            vendorPartialPayment.setChequeCardNumber(number);

            int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of making this payment?"));

            if(confirm == JOptionPane.YES_OPTION)
            {
                vendorPartialPaymentQuery.insertIntoVendorPartialPayment(vendorPartialPayment);

                if(paymentMode.equalsIgnoreCase("cash") || paymentMode.equalsIgnoreCase("card"))
                {
                    vendorMaster.setBalance(vendorMaster.getBalance().subtract(new BigDecimal(paidAmount.getText().trim())));

                    vendorQuery.updateVendorBalance(vendorMaster);

                    expenses.setDate(currentDate.getDate());
                    expenses.setRemark("Payment Made for vendor: " + name.getText().trim());
                    expenses.setAmount(new BigDecimal(paidAmount.getText()));

                    expensesQuery.insertIntoExpenses(expenses);
                }
            }
        }
        else
        {
            CustomerDetails customerDetails = new CustomerDetails();  
            WarehoseDetailsQuery123 customerDetailsQuery = new WarehoseDetailsQuery123();
            CustomerPartialPayment customerPartialPayment = new CustomerPartialPayment();
            CustomerPartialPaymentQuery warehousePartialPaymentQuery = new CustomerPartialPaymentQuery();
            
            customerDetails.setId(id);
            
            List<CustomerDetails> list = customerDetailsQuery.getCustomerDetails(customerDetails);
            
            for(CustomerDetails cm: list)
                customerDetails.setBalance(cm.getBalance());
            
            customerPartialPayment.setDate(currentDate.getDate());
            customerPartialPayment.setCustomerDetails(customerDetails);
            customerPartialPayment.setStatus("1");
            
            if(!(paymentMode.equalsIgnoreCase("cash")))
            {
                if(cheque.getText().trim().isEmpty())
                {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the number"), "Error message", JOptionPane.ERROR_MESSAGE);
                    cheque.requestFocus();
                    return;
                }
                
                number = cheque.getText().trim();
                
                if(!(paymentMode.equalsIgnoreCase("paytm")))
                {
                    bankName = bank.getSelectedItem().toString();
                }
                
                if(paymentMode.equalsIgnoreCase("cheque"))
                {
                    customerPartialPayment.setChequeDate(chequeDate.getDate());
                    customerPartialPayment.setStatus("0");
                }
            }
            
            customerPartialPayment.setPaymentMode(paymentMode);
            customerPartialPayment.setPaidAmount(new BigDecimal(paidAmount.getText().trim()));
            customerPartialPayment.setBank(bankName);
            customerPartialPayment.setChequeOrCardNumber(number);
            
            int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of making this payment?"));
            
            if(confirm == JOptionPane.YES_OPTION)
            {
                warehousePartialPaymentQuery.insertIntoCustomerPartialPayment(customerPartialPayment);
            
                if(!(paymentMode.equalsIgnoreCase("cheque")))
                {
                    customerDetails.setBalance(customerDetails.getBalance().subtract(new BigDecimal(paidAmount.getText().trim())));

                    customerDetailsQuery.updateWarehouseBalance(customerDetails);
                }
            } 
        }
        
        JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Payment Successful"));
        dispose();
    }

    private void cancel() 
    {
        dispose();
    }
}
