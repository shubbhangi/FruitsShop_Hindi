/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.Counter;
import com.grocery.bean.ItemAvailability;
import com.grocery.bean.ItemMaster;
import com.grocery.bean.SaleDetails;
import com.grocery.bean.SaleMaster;
import com.grocery.bean.CustomerDetails;
import com.grocery.bean.CustomerPartialPayment;
//import com.grocery.bean.CustomerPartialPayment;
import com.grocery.query.CounterQuery;
import com.grocery.query.ItemAvailabilityQuery;
import com.grocery.query.SaleDetailsQuery;
import com.grocery.query.SaleMasterQuery;
import com.grocery.query.WarehoseDetailsQuery123;
import com.grocery.query.CustomerPartialPaymentQuery;
import com.grocery.read.MessageFormat;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author GanpatiBappa
 */
public class SalesBarCodeView extends javax.swing.JFrame {
    
    private Date currentDate = new Date();
    private JTextFieldDateEditor editor;
    private JDesktopPane jDesktopPane;
    private int currRow_g = 0;
    private int currRow_s = 0;
    private double sumOfGstAmount = 0.0;
    private double sumOfIGstAmount = 0.0;
    private double sumOfSellingPrice = 0.0;
    private boolean warehouseFlag;
    private boolean newWarehouseFlag;
    
    public SalesBarCodeView() {
        initComponents();
        counter.setVisible(false);
        salesTabel.removeAll();
      
        jLabel30.setVisible(false);
        billId.setVisible(false);
        
        jLabel18.setVisible(false);
        counter.setVisible(false);
        save.setVisible(false);

        this.jDesktopPane = jDesktopPane;
       
        salesTabel.getTableHeader().setFont(new Font("Arial Unicode MS", Font.BOLD, 14));
        salesTabel.getColumnModel().getColumn(0).setMinWidth(0);
        salesTabel.getColumnModel().getColumn(0).setMaxWidth(0);

//        salesTabel.getColumnModel().getColumn(1).setMinWidth(0);
//        salesTabel.getColumnModel().getColumn(1).setMaxWidth(0);

        
        
        
        editor = (JTextFieldDateEditor) saleDate.getDateEditor();
        editor.setEditable(false);

        editor.setEditable(false);
      
        saleDate.setDate(currentDate);
        
        item.requestFocus();
        
        ItemMaster itemMaster = new ItemMaster();
        loadTable(itemMaster);
        //loadCounter();
        loadWarehouswe();
        DefaultTableModel defaultTableModel = (DefaultTableModel) salesTabel.getModel();
        defaultTableModel.setRowCount(0);
        salesTabel.setModel(defaultTableModel);
        getTotal();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        panel1 = new java.awt.Panel();
        jLabel1 = new javax.swing.JLabel();
        saleDate = new com.toedter.calendar.JDateChooser();
        jLabel29 = new javax.swing.JLabel();
        counter = new javax.swing.JComboBox<String>();
        jLabel18 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        billId = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        warehouseName = new javax.swing.JComboBox<String>();
        add1 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        item = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        salesTabel = new javax.swing.JTable();
        remove = new javax.swing.JButton();
        change = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        fullPayment = new javax.swing.JButton();
        save = new javax.swing.JButton();
        cancel1 = new javax.swing.JButton();
        barcodeFlag = new javax.swing.JRadioButton();
        withouBbarcodeFlag = new javax.swing.JRadioButton();
        jLabel34 = new javax.swing.JLabel();
        paymentMode = new javax.swing.JComboBox<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        panel1.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("बिक्री  भण्डार");
        jLabel1.setToolTipText("Sale Stock");

        saleDate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel29.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText(" दिनांक :");
        jLabel29.setToolTipText("Date");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(196, 196, 196)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saleDate, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addComponent(saleDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)))
                .addContainerGap())
        );

        counter.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        counter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                counterActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("काउंटर:");
        jLabel18.setToolTipText("Counter:");

        jLabel30.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("बिल क्रमांक:");
        jLabel30.setToolTipText("Bill Id:");

        billId.setEditable(false);
        billId.setBackground(new java.awt.Color(255, 255, 153));
        billId.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        billId.setForeground(new java.awt.Color(255, 0, 0));
        billId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        billId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billIdActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel28.setText("ग्राहक का नाम:");
        jLabel28.setToolTipText("Customer Name:");

        warehouseName.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        warehouseName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "--Add Customer--" }));
        warehouseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warehouseNameActionPerformed(evt);
            }
        });

        add1.setBackground(new java.awt.Color(0, 204, 51));
        add1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        add1.setForeground(new java.awt.Color(255, 255, 255));
        add1.setText("जोड़ना");
        add1.setToolTipText("Add");
        add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add1ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("नाम से खोजें:");
        jLabel17.setToolTipText("Search By Name:");

        item.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        item.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        item.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                itemKeyTyped(evt);
            }
        });

        salesTabel.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        salesTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "क्रमांक", "वस्तु का नाम", "ब्रांड", "बारकोड", "वजन", "इकाई", "विक्रय मूल्य	", "मात्रा", " कुल", "निर्माण तिथि", "समाप्ति तिथि"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salesTabel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                salesTabelKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(salesTabel);

        remove.setBackground(new java.awt.Color(255, 255, 255));
        remove.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/remove.png"))); // NOI18N
        remove.setText(" हटाना");
        remove.setToolTipText("Remove");
        remove.setMnemonic(KeyEvent.VK_R);
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        remove.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                removeKeyPressed(evt);
            }
        });

        change.setBackground(new java.awt.Color(255, 255, 255));
        change.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        change.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/change.png"))); // NOI18N
        change.setText("मात्रा बदलें");
        change.setToolTipText("Change Quantity");
        change.setMnemonic(KeyEvent.VK_Q);
        change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActionPerformed(evt);
            }
        });
        change.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                changeKeyPressed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel31.setText("कुल\t");
        jLabel31.setToolTipText("Total:");

        total.setEditable(false);
        total.setBackground(new java.awt.Color(255, 255, 153));
        total.setFont(new java.awt.Font("Arial Unicode MS", 1, 10)); // NOI18N
        total.setForeground(new java.awt.Color(255, 0, 0));
        total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        total.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                totalFocusGained(evt);
            }
        });
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });
        total.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalKeyReleased(evt);
            }
        });

        fullPayment.setBackground(new java.awt.Color(255, 255, 255));
        fullPayment.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        fullPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/print.png"))); // NOI18N
        fullPayment.setText(" छाप");
        fullPayment.setToolTipText("Print");
        fullPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullPaymentActionPerformed(evt);
            }
        });

        save.setBackground(new java.awt.Color(255, 255, 255));
        save.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        save.setText("सहेजें");
        save.setToolTipText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        cancel1.setBackground(new java.awt.Color(255, 255, 255));
        cancel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        cancel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cancel.png"))); // NOI18N
        cancel1.setText(" रद्द करना");
        cancel1.setToolTipText("Cancel");
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        barcodeFlag.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(barcodeFlag);
        barcodeFlag.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        barcodeFlag.setText("बारकोड");
        barcodeFlag.setToolTipText("barcode");
        barcodeFlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeFlagActionPerformed(evt);
            }
        });
        barcodeFlag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barcodeFlagKeyPressed(evt);
            }
        });

        withouBbarcodeFlag.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(withouBbarcodeFlag);
        withouBbarcodeFlag.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        withouBbarcodeFlag.setText(" नहीं-बारकोड");
        withouBbarcodeFlag.setToolTipText("non-barcode");
        withouBbarcodeFlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withouBbarcodeFlagActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel34.setText("Payment Mode:");

        paymentMode.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        paymentMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Cash", "Card", "Sodexo" }));
        paymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(counter, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(billId, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(warehouseName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(add1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 193, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(barcodeFlag)
                                .addGap(31, 31, 31)
                                .addComponent(withouBbarcodeFlag)
                                .addGap(58, 58, 58)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(184, 184, 184))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(fullPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(482, 482, 482))))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel34)
                .addGap(18, 18, 18)
                .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(warehouseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(1, 1, 1))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(billId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(counter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(add1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(barcodeFlag)
                        .addComponent(withouBbarcodeFlag))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(fullPayment)
                    .addComponent(cancel1))
                .addGap(8, 8, 8))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void counterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_counterActionPerformed
        if (counter.getItemCount() > 0) {
//            ItemMaster itemMaster = new ItemMaster();
//            loadTable(itemMaster);
            getDetails();
 
        }
    }//GEN-LAST:event_counterActionPerformed

    private void billIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_billIdActionPerformed

    private void warehouseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warehouseNameActionPerformed
        /*     newWarehouswe.setText("");
        contact.setText("N/A");
        address.setText("N/A");
        gstNumber.setText("N/A");

        try
        {
            if(warehouseName.getItemCount() != 0)
            {
                if(warehouseName.getSelectedIndex() == 0)
                {
                    warehouseFlag = false;
                    jPanelNewWarehouswe.setVisible(false);
                }
                else
                if(warehouseName.getSelectedIndex() == 1)
                {
                    warehouseFlag = false;
                    jPanelNewWarehouswe.setVisible(true);
                }
                else
                {
                    warehouseFlag = true;
                    jPanelNewWarehouswe.setVisible(false);
                    loadWarehouswe();
                }
            }
        }
        catch(Exception e)
        {
        }
        */
    }//GEN-LAST:event_warehouseNameActionPerformed

    private void add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add1ActionPerformed
        CustomerView customerView = new CustomerView();
        // WarehousweView customerView = new WarehousweView();
        customerView.setVisible(true);
        //    addVendor();
    }//GEN-LAST:event_add1ActionPerformed

    private void itemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemKeyPressed
        //addItem();
    }//GEN-LAST:event_itemKeyPressed

    private void itemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemKeyReleased
        ItemMaster itemMaster = new ItemMaster();
        if (!(item.getText().trim().isEmpty())) {
            // itemMaster.setName(item.getText().trim());
            itemMaster.setBarCode(item.getText().trim());
        }
  
        loadTable(itemMaster);
    }//GEN-LAST:event_itemKeyReleased

    private void itemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || Character.isDigit(c) || c == ',' || c == '.' || c == KeyEvent.VK_SPACE || c == '-' || c == ':')) {
            evt.consume();
        }
    }//GEN-LAST:event_itemKeyTyped

    private void salesTabelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salesTabelKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            remove();
        }
    }//GEN-LAST:event_salesTabelKeyPressed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        remove();
    }//GEN-LAST:event_removeActionPerformed

    private void removeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_removeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            remove();
        }
    }//GEN-LAST:event_removeKeyPressed

    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed
        changeQuantity();
    }//GEN-LAST:event_changeActionPerformed

    private void changeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_changeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            changeQuantity();
        }
    }//GEN-LAST:event_changeKeyPressed

    private void totalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalFocusGained

       //double gstAmount = Double.valueOf(totalGstAmount.getText());
        double totalAmount = Double.valueOf(total.getText());
        double finalTOtalAmount = 0;
//        if (!(gstAmount <= 0) || !(totalAmount <= 0)) {
//            finalTOtalAmount = totalAmount + gstAmount;
//            finalAmountSale.setText(String.valueOf(finalTOtalAmount));
//        } else {
//
//            finalAmountSale.setText("0.00");
//        }
    }//GEN-LAST:event_totalFocusGained

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
       // double gstAmount = Double.valueOf(totalGstAmount.getText());
        double totalAmount = Double.valueOf(total.getText());
        double finalTOtalAmount = 0;
//        if (!(gstAmount <= 0) || !(totalAmount <= 0)) {
//            finalTOtalAmount = totalAmount + gstAmount;
//            finalAmountSale.setText(String.valueOf(finalTOtalAmount));
//        } else {
//
//            finalAmountSale.setText("0.00");
//        }
    }//GEN-LAST:event_totalActionPerformed

    private void totalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalKeyReleased
       // double gstAmount = Double.valueOf(totalGstAmount.getText());
        double totalAmount = Double.valueOf(total.getText());
        double finalTOtalAmount = 0;
//        if (!(gstAmount <= 0) || !(totalAmount <= 0)) {
//            finalTOtalAmount = totalAmount + gstAmount;
//            finalAmountSale.setText(String.valueOf(finalTOtalAmount));
//        } else {
//
//            finalAmountSale.setText("0.00");
//        }
    }//GEN-LAST:event_totalKeyReleased

    private void fullPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullPaymentActionPerformed
//        Payment payment = new Payment();
//        payment.setVisible(true);
        pay();
    }//GEN-LAST:event_fullPaymentActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

//        SalesPayment salesPayment = new SalesPayment();
//        String totalAmount = total.getText().trim();
//       // String gstAmount2 = gstAmount.getText().trim();
////        String finalAmount = finalAmountPaid.getText().trim();
//         String vendorName1 = warehouseName.getSelectedItem().toString();
////        String discountAmount = discount.getText();
//        Date saleDate1 = saleDate.getDate();
//        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy"); 
//        String mfg = dateFormat.format(saleDate1);
//       
//        String barCodeType ;
//        if(withouBbarcodeFlag.isSelected()){
//           barCodeType="WithoutBarcode"; 
//       
//        }else
//           barCodeType="WithBarcode"; 
//        
//
//         salesPayment.setValues(saleDate, totalAmount, getTableData(), vendorName1,barCodeType);
//         salesPayment.setVisible(true);
      
    }//GEN-LAST:event_saveActionPerformed

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancel1ActionPerformed

    private void barcodeFlagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeFlagActionPerformed
//        SalesBarCodeView salesBarCodeView = new SalesBarCodeView();
//        salesBarCodeView.setVisible(true);
    }//GEN-LAST:event_barcodeFlagActionPerformed

    private void barcodeFlagKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeFlagKeyPressed
//        SalesBarCodeView salesBarCodeView = new SalesBarCodeView();
//        salesBarCodeView.setVisible(true);
    }//GEN-LAST:event_barcodeFlagKeyPressed

    private void withouBbarcodeFlagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withouBbarcodeFlagActionPerformed
        SaleWithoutBarcodeView saleWithoutBarcodeView = new SaleWithoutBarcodeView();
        saleWithoutBarcodeView.setVisible(true);
    }//GEN-LAST:event_withouBbarcodeFlagActionPerformed

    private void paymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeActionPerformed
//        number.setText("");
//        bank.setSelectedIndex(0);
//        if (paymentMode.getSelectedIndex() == 0 || paymentMode.getSelectedIndex() == 1) {
//            jPanelTds.setVisible(false);
//        } else if (paymentMode.getSelectedIndex() == 2) {
//            bank.setSelectedIndex(0);
//            jPanelTds.setVisible(false);
//            chequeDate.setVisible(false);
//        } else {
//            jPanelTds.setVisible(true);
//        }
    }//GEN-LAST:event_paymentModeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesBarCodeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesBarCodeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesBarCodeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesBarCodeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesBarCodeView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add1;
    private javax.swing.JRadioButton barcodeFlag;
    private javax.swing.JTextField billId;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancel1;
    private javax.swing.JButton change;
    private javax.swing.JComboBox<String> counter;
    private javax.swing.JButton fullPayment;
    private javax.swing.JTextField item;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private java.awt.Panel panel1;
    private javax.swing.JComboBox<String> paymentMode;
    private javax.swing.JButton remove;
    private com.toedter.calendar.JDateChooser saleDate;
    private javax.swing.JTable salesTabel;
    private javax.swing.JButton save;
    private javax.swing.JTextField total;
    private javax.swing.JComboBox<String> warehouseName;
    private javax.swing.JRadioButton withouBbarcodeFlag;
    // End of variables declaration//GEN-END:variables
  
    public void loadTable(ItemMaster itemMaster) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) salesTabel.getModel();
       // defaultTableModel.setRowCount(0);

        List<Object[]> list = new ArrayList<>();

        ItemAvailability itemAvailability = new ItemAvailability();
        ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();

        itemAvailability.setItemMaster(itemMaster);
        list = itemAvailabilityQuery.getAvailability(itemAvailability);

        for (Object[] object : list) {
            ItemAvailability ia = (ItemAvailability) object[0];

           // defaultTableModel.addRow(new Object[]{ia.getItemMaster().getId(), ia.getItemMaster().getName(), ia.getItemMaster().getHsnCode(), ia.getAvailability(), ia.getItemMaster().getSellingPrice(), ia.getItemMaster().getGstPercent(), ia.getItemMaster().getFinalSellingPrice(), ia.getItemMaster().getIgstPercent()});
            //if(ia.getItemMaster().getGstType().equals("GST")){
               if(!(Double.valueOf(String.valueOf(ia.getAvailability()))<=0)) {
           // defaultTableModel.addRow(new Object[]{ia.getItemMaster().getId(), ia.getItemMaster().getName(), ia.getItemMaster().getHsnCode(), ia.getAvailability(), ia.getItemMaster().getUnitPrice(), ia.getItemMaster().getGstPercent(),ia.getItemMaster().getSellingPrice(), ia.getItemMaster().getFinalSellingPrice(),ia.getItemMaster().getGstType(),ia.getItemMaster().getEfgDate(),ia.getItemMaster().getExpDate()});
           
               defaultTableModel.addRow(new Object[]{ia.getItemMaster().getId(),ia.getItemMaster().getName(),ia.getItemMaster().getBrand(), ia.getItemMaster().getBarCode(),ia.getItemMaster().getWeight(), ia.getItemMaster().getUnit(),ia.getItemMaster().getUnitPrice(),ia.getAvailability(),ia.getItemMaster().getTotalAmount(),ia.getItemMaster().getEfgDate(),ia.getItemMaster().getExpDate()});
            // defaultTableModel.addRow(new Object[]{ia.getItemMaster().getId(),ia.getItemMaster().getName(), ia.getItemMaster().getBarCode(), ia.getItemMaster().getUnitPrice(),ia.getAvailability(), ia.getItemMaster().getGstPercent(), ia.getItemMaster().getFinalSellingPrice(),ia.getItemMaster().getGstType(),ia.getItemMaster().getEfgDate(),ia.getItemMaster().getExpDate()});
            }
            //}else{
           // defaultTableModel.addRow(new Object[]{ia.getItemMaster().getId(), ia.getItemMaster().getName(), ia.getItemMaster().getHsnCode(), ia.getAvailability(), ia.getItemMaster().getSellingPrice(), ia.getItemMaster().getIgstPercent(), ia.getItemMaster().getFinalSellingPrice(), ia.getItemMaster().getGstType()});
                
           // }
        }
        salesTabel.setModel(defaultTableModel);
    }
// private float getUnitPrice(float total)
//    {
//        float unitPrice = 0;
//        try
//        {
//           if(1 == 0)
//               throw new RuntimeException();
//             total = unitPrice*1;
//            
//        }
//        catch(Exception e)
//        {
//            this.unitPrice.setText("0.00");
//        }
//        return unitPrice;
//    }
     
    
 
   private void remove() {
        try {
            int detailsId = Integer.parseInt(salesTabel.getValueAt(salesTabel.getSelectedRow(), 0).toString());
            int itemId = Integer.parseInt(salesTabel.getValueAt(salesTabel.getSelectedRow(), 1).toString());
            float quantity = Float.parseFloat(salesTabel.getValueAt(salesTabel.getSelectedRow(), 5).toString());

            ItemMaster itemMaster = new ItemMaster();
            itemMaster.setId(itemId);

            ItemAvailability itemAvailability = new ItemAvailability();
            ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();

            itemAvailability.setItemMaster(itemMaster);

            List<ItemAvailability> endProductAvalabilityList = itemAvailabilityQuery.checkItem(itemAvailability);
            for (ItemAvailability ea : endProductAvalabilityList) {
                itemAvailability.setId(ea.getId());
                itemAvailability.setAvailability(ea.getAvailability());
            }

            itemAvailability.setAvailability(itemAvailability.getAvailability().add(new BigDecimal(quantity)));
            SaleDetails saleDetails = new SaleDetails();
            saleDetails.setId(detailsId);

            SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
            saleDetailsQuery.deleteSaleDetails(saleDetails);

            itemAvailabilityQuery.updateItemAvailability(itemAvailability);

            clear();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to remove"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
   
    private void changeQuantity() {
        try {
            DecimalFormat decimalFormat = new DecimalFormat("#0.000");
            int detailsId = Integer.parseInt(salesTabel.getValueAt(salesTabel.getSelectedRow(), 0).toString());
            int itemId = Integer.parseInt(salesTabel.getValueAt(salesTabel.getSelectedRow(), 1).toString());
            float quantity = Float.parseFloat(salesTabel.getValueAt(salesTabel.getSelectedRow(), 5).toString());
            float unitPrice = Float.parseFloat(salesTabel.getValueAt(salesTabel.getSelectedRow(), 4).toString());
            float sellingPrice = Float.parseFloat(salesTabel.getValueAt(salesTabel.getSelectedRow(), 8).toString());
            float gstPercent = Float.parseFloat(salesTabel.getValueAt(salesTabel.getSelectedRow(), 6).toString());

            String itemName = salesTabel.getValueAt(salesTabel.getSelectedRow(), 2).toString();
            
            String gstType = salesTabel.getValueAt(salesTabel.getSelectedRow(), 10).toString();
            float newQuantity = 0;

            JFrame frame = new JFrame("Input");

            ItemMaster itemMaster = new ItemMaster();
            itemMaster.setId(itemId);

            ItemAvailability eAvailability = new ItemAvailability();
            ItemAvailabilityQuery endProductAvailabilityQuery = new ItemAvailabilityQuery();

            eAvailability.setItemMaster(itemMaster);

            List<ItemAvailability> endProductAvalabilityList = endProductAvailabilityQuery.checkItem(eAvailability);
            for (ItemAvailability ea : endProductAvalabilityList) {
                eAvailability.setId(ea.getId());
                eAvailability.setAvailability(ea.getAvailability());
            }

            eAvailability.setAvailability(eAvailability.getAvailability().add(new BigDecimal(quantity)));

          //  newQuantity = Float.parseFloat(JOptionPane.showInputDialog(frame, "<HTML><FONT color=\"#000000\">Enter the quantity of: <strong><U>" + itemName + "</U></strong><br>Available Quantity = <strong><U>" + decimalFormat.format(eAvailability.getAvailability()) + "</FONT></HTML>"));
            newQuantity = Float.parseFloat(JOptionPane.showInputDialog(frame, "<HTML><FONT color=\"#000000\">Enter the quantity of: <strong><U>" + itemName + "</U></strong><br><strong><U>" + gstType + "</U></strong><br>Available Quantity = <strong><U>" + decimalFormat.format(eAvailability.getAvailability()) + "</FONT></HTML>"));
            int compare = new BigDecimal(newQuantity).compareTo(eAvailability.getAvailability());

            /*  if(compare == 1)
             {
             JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Entered Quantity is greater than Available Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
             return;
             } */
            if (newQuantity == 0) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Quantity can't be zero"), "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            endProductAvailabilityQuery.updateItemAvailability(eAvailability);
            eAvailability.setAvailability(eAvailability.getAvailability().subtract(new BigDecimal(newQuantity)));

            endProductAvailabilityQuery.updateItemAvailability(eAvailability);
            float total = (newQuantity * unitPrice) * (gstPercent) / 100;

            SaleDetails saleDetails = new SaleDetails();
            saleDetails.setId(detailsId);
            saleDetails.setQuantity(new BigDecimal(newQuantity));
            saleDetails.setTotal(new BigDecimal(total));

            SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
            saleDetailsQuery.updateSaleDetails(saleDetails);

            clear();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to change the quantity of"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
   
    private void clear() {
        ItemMaster endProduct = new ItemMaster();
        item.setText("");
        item.requestFocus();
        getTotal();
        getDetails();
        loadWarehouswe();
      
    }
    
    private void loadWarehouswe() {
        CustomerDetails warehouseDetails = new CustomerDetails();
        WarehoseDetailsQuery123 customerQuery = new WarehoseDetailsQuery123();

        if (warehouseFlag) {
            warehouseDetails.setName(warehouseName.getSelectedItem().toString());
        }
        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) warehouseName.getModel();
        List<CustomerDetails> list = customerQuery.getCustomerDetails(warehouseDetails);
        if (!(warehouseFlag)) {
            defaultComboBoxModel.removeAllElements();
            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("--Add Warehouswe--");
            defaultComboBoxModel.addElement("N/A");
            for (CustomerDetails vm : list) {
                defaultComboBoxModel.addElement(vm.getName());
            }
           } else {
            for (CustomerDetails vm : list) {
                warehouseName.setSelectedItem(vm.getName());
            }
        }
        warehouseName.setModel(defaultComboBoxModel);
    }


    private void getTotal() {
        int i = 0;
        float sum = 0;
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");

        while (i < salesTabel.getRowCount()) {
            sum = sum + Float.parseFloat(salesTabel.getValueAt(i, 9).toString());
            i++;
        }
        total.setText(decimalFormat.format(sum));
    }

      private void getDetails() {
        Counter counter = new Counter();
        CounterQuery counterQuery = new CounterQuery();

        counter.setName(this.counter.getSelectedItem().toString());
        List<Counter> list = counterQuery.getCounterDetails(counter);
        for (Counter c : list) {
            counter.setId(c.getId());
        }
        SaleMaster saleMaster = new SaleMaster();
        SaleMasterQuery saleMasterQuery = new SaleMasterQuery();

        saleMaster.setCounter(counter);
        List<SaleMaster> saleList = saleMasterQuery.getSaleDetails(saleMaster);

        for (SaleMaster sm : saleList) {
            saleMaster.setId(sm.getId());
        }
        if (saleList.isEmpty()) {
            billId.setText("");
        } else {
            billId.setText(String.valueOf(saleMaster.getId()));
        }
        getSaleDetails(saleMaster);
    }
private void getSaleDetails(SaleMaster saleMaster) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) salesTabel.getModel();
        defaultTableModel.setRowCount(0);

        SaleDetails saleDetails = new SaleDetails();
        SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
        saleDetails.setSaleMaster(saleMaster);

        List<Object[]> list = saleDetailsQuery.getSale(saleDetails);

        float gstPercentage = 0f;
        for (Object[] object : list) {
            SaleDetails sd = (SaleDetails) object[0];
            float unitPrce = Float.valueOf(sd.getUnitPrice().toString());
            float selingUnitprice = Float.valueOf(sd.getSellingPrice().toString());
            float quantity = Float.valueOf(sd.getQuantity().toString());
            float totalSellingPrice = (unitPrce * quantity);
            float totalSellingPrice1 = (selingUnitprice * quantity);
            float gstAmount = (unitPrce * quantity) * gstPercentage / 100;

            defaultTableModel.addRow(new Object[]{sd.getId(), sd.getItemMaster().getId(), sd.getItemMaster().getName(), sd.getItemMaster().getBarCode(), sd.getQuantity(), sd.getItemMaster().getSellingPrice(), totalSellingPrice, sd.getItemMaster().getEfgDate(), sd.getItemMaster().getExpDate()});
        }
        salesTabel.setModel(defaultTableModel);
        getTotal();
    }

    private float calculateGst(float total, float gstPercent) {
        float gstAmount = (total * gstPercent) / 100;
        return gstAmount;
    }
     
       private void pay() {
        try {
            newWarehouseFlag = false;
            if (salesTabel.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("No order placed"), "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String paymentMode = this.paymentMode.getSelectedItem().toString();
            String warehouseName = this.warehouseName.getSelectedItem().toString();

            SaleMaster saleMaster = new SaleMaster();
            SaleMasterQuery saleMasterQuery = new SaleMasterQuery();

            if (warehouseName.equalsIgnoreCase("--Select--")) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select a Warehouswe"), "Error message", JOptionPane.ERROR_MESSAGE);
                this.warehouseName.requestFocus();
                return;
            }

            if (paymentMode.equalsIgnoreCase("--Select--")) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select a payment Mode"), "Error message", JOptionPane.ERROR_MESSAGE);
                this.paymentMode.requestFocus();
                return;
            }

            CustomerDetails warehouseDetails = new CustomerDetails();
            WarehoseDetailsQuery123 warehouseDetailsQuery = new WarehoseDetailsQuery123();
            warehouseDetails.setName(warehouseName);

            List<CustomerDetails> list = warehouseDetailsQuery.getCustomerDetails(warehouseDetails);
            if (list.isEmpty()) // warehouseDetailsQuery.insertWarehouse(warehouseDetails);        
            {
                warehouseDetailsQuery.insertWarehouse(warehouseDetails);
            } else {
                for (CustomerDetails cm : list) {
                    warehouseDetails.setId(cm.getId());
                    warehouseDetails.setBalance(cm.getBalance().add(new BigDecimal(0.00)));
                }
                warehouseDetailsQuery.updateWarehouseBalance(warehouseDetails);
            }
            CustomerPartialPayment customerPartialPayment = new CustomerPartialPayment();
            customerPartialPayment.setPaymentMode(paymentMode);
            customerPartialPayment.setBank("N/A");
           // customerPartialPayment.setChequeOrCardNumber(this.number.getText());
            customerPartialPayment.setCustomerDetails(warehouseDetails);
           // customerPartialPayment.setDate(this.date.getDate());
            customerPartialPayment.setStatus("1");
            customerPartialPayment.setPaidAmount(new BigDecimal(total.getText().trim()));
            CustomerPartialPaymentQuery customerPartialPaymentQuery = new CustomerPartialPaymentQuery();

            if ((paymentMode.equalsIgnoreCase("Cash"))) {
            }

            if ((paymentMode.equalsIgnoreCase("Card"))) {
            }

           // customerPartialPayment.setChequeOrCardNumber(number.getText().trim());
//            if (paymentMode.equalsIgnoreCase("Sodexo")) {
//            }

            saleMaster.setGstAmount(BigDecimal.valueOf(0.00));
            saleMaster.setIgstAmount(BigDecimal.valueOf(0.00));
            saleMaster.setBillAmount(new BigDecimal(getTotalBillAmount()));
            saleMaster.setFinalBillAmount(new BigDecimal(total.getText().trim()));
            saleMaster.setDiscount(new BigDecimal(0.00));
            customerPartialPayment.setPaidAmount(new BigDecimal(total.getText().trim()));

            int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of this Sale?"));

            if (confirm == JOptionPane.YES_OPTION) {
                saleMaster.setId(Integer.parseInt(billId.getText()));
                saleMaster.setCustomerDetails(warehouseDetails);
                //saleMaster.setReference(reference.getText().trim());
                saleMaster.setStatus("1");

                saleMaster.setRemark("Non_GST");

                saleMasterQuery.updateSaleMaster(saleMaster);

                customerPartialPaymentQuery.insertIntoCustomerPartialPaymentView(customerPartialPayment);
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Sale successful"));

                 //printBill(saleMaster);
                clear();
               // clear1();
                DefaultTableModel defaultTableModel = (DefaultTableModel) salesTabel.getModel();
                defaultTableModel.setRowCount(0);
                salesTabel.setModel(defaultTableModel);

            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Invalid Entry!!!"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    private double getTotalBillAmount() {
        int index = salesTabel.getRowCount();
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        while (currRow_s < index) {
            sumOfSellingPrice = sumOfSellingPrice + Float.parseFloat(salesTabel.getValueAt(currRow_s, 6).toString());
            currRow_s++;
        }
        return sumOfSellingPrice;
    }

   
//      private void addItem() {
//        float totalSellingPrice = 0f;
//        float gstAmount = 0f;
//        float igstAmount = 0f;
//        float total = 0;
//        float soldQuantity = 0f;
//        int count = 0;
//
////        String gstTypeTable1 = stockTable.getValueAt(stockTable.getSelectedRow(), 7).toString();
////
////        if (salesTabel.getRowCount() < 1) {
////            if (gstTypeTable1.equals("Non-GST")) {
////                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select first Product GST or IGST"), "Error Message", JOptionPane.ERROR_MESSAGE);
////                return;
////            }
////        }
//        
//                   
////        try {
//            String gstType = "";
//            String itemName = salesTabel.getValueAt(salesTabel.getSelectedRow(), 1).toString();
//            String brandName = salesTabel.getValueAt(salesTabel.getSelectedRow(), 2).toString();
//            
//            
//          //  String brandName = salesTabel.getValueAt(salesTabel.getSelectedRow(), 2).toString();
//            float availability = Float.parseFloat(salesTabel.getValueAt(salesTabel.getSelectedRow(), 3).toString());
//            int itemId = Integer.parseInt(salesTabel.getValueAt(salesTabel.getSelectedRow(), 0).toString());
//            float gstPercent = Float.parseFloat(salesTabel.getValueAt(salesTabel.getSelectedRow(), 5).toString());
//            float unitPrice = Float.parseFloat(salesTabel.getValueAt(salesTabel.getSelectedRow(), 6).toString());
//            DecimalFormat decimalFormat = new DecimalFormat("#0.000");
//            JFrame frame = new JFrame("Input");
//
////            try {
////                soldQuantity = Float.parseFloat(JOptionPane.showInputDialog(frame, "<HTML><FONT color=\"#000000\">Enter the quantity of: <strong><U>" + itemName + "</U></strong><br>Available Quantity = <strong><U>" + decimalFormat.format(availability) + "</FONT></HTML>"));
////
////                if (soldQuantity > availability) {
////                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Quantity can't be greater than Available Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
////                } else if (soldQuantity == 0) {
////                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Quantity can't be zero"), "Error Message", JOptionPane.ERROR_MESSAGE);
////                } else {
//                    totalSellingPrice = soldQuantity * unitPrice;
//                    total = totalSellingPrice;
//                    ItemMaster itemMaster = new ItemMaster();
//                    itemMaster.setId(itemId);
//
//                    SaleMaster saleMaster = new SaleMaster();
//                    SaleMasterQuery saleMasterQuery = new SaleMasterQuery();
//                    StoreDetails storeDetails = new StoreDetails();
//                    CustomerDetails warehouseDetails = new CustomerDetails();
//                    Counter counter = new Counter();
//                    CounterQuery counterQuery = new CounterQuery();
//
//                    counter.setName(this.counter.getSelectedItem().toString());
//                    List<Counter> list = counterQuery.getCounterDetails(counter);
//                    System.out.println("listL::::>>" + list);
//                    if (list.size() > 0) {
//                        for (Counter c : list) {
//                            counter.setId(c.getId());
//                        }
//                    }
//
//                    if (billId.getText().isEmpty()) {
//                        Date date = this.date.getDate();
//                        storeDetails.setId(1);
//                        warehouseDetails.setId(1);
//
//                        saleMaster.setDate(date);
//                        saleMaster.setStoreDetails(storeDetails);
//                        saleMaster.setCounter(counter);
//                        saleMaster.setStatus("0");
//                        saleMaster.setCustomerDetails(warehouseDetails);
//
//                        saleMasterQuery.insertIntoSaleMaster(saleMaster);
//                    } else {
//                        saleMaster.setId(Integer.parseInt(billId.getText()));
//                    }
//
//                    SaleDetails saleDetails = new SaleDetails();
//                    SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
//
//                    saleDetails.setSaleMaster(saleMaster);
//                    saleDetails.setItemMaster(itemMaster);
//
//                    List<SaleDetails> saleDetailsList = saleDetailsQuery.checkItem(saleDetails);
//
//                    if (!(saleDetailsList.isEmpty())) {
//                        for (SaleDetails sd : saleDetailsList) {
//                            saleDetails.setId(sd.getId());
//                            saleDetails.setQuantity(sd.getQuantity().add(new BigDecimal(soldQuantity)));
//                            saleDetails.setTotal(sd.getTotal().add(new BigDecimal(total)));
//                        }
//                        saleDetailsQuery.updateSaleDetails(saleDetails);
//                    } else {
//                        saleDetails.setQuantity(new BigDecimal(soldQuantity));
//                        saleDetails.setUnitPrice(new BigDecimal(unitPrice));
//                        saleDetails.setTotal(new BigDecimal(total));
//                        saleDetails.setGstPercent(new BigDecimal(gstPercent));
//                        saleDetails.setIgstPercent(new BigDecimal(gstAmount));
//                        saleDetails.setGstType(gstType);
//                        saleDetails.setSellingPrice(new BigDecimal(totalSellingPrice));
//                        saleDetailsQuery.insertIntoSaleDetails(saleDetails);
//                    }
//
//                    ItemAvailability itemAvailability = new ItemAvailability();
//                    ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();
//
//                    itemAvailability.setItemMaster(itemMaster);
//                    itemAvailability.setAvailability(new BigDecimal(availability).subtract(new BigDecimal(soldQuantity)));
//                    List<ItemAvailability> itemAvailabilityList = itemAvailabilityQuery.checkItem(itemAvailability);
//                    for (ItemAvailability ia : itemAvailabilityList) {
//                        itemAvailability.setId(ia.getId());
//                    }
//                    itemAvailabilityQuery.updateItemAvailability(itemAvailability);
//                    clear();
//                }
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter numeric value"), "Error Message", JOptionPane.ERROR_MESSAGE);
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to add"), "Error Message", JOptionPane.ERROR_MESSAGE);
//        }
 
  
       
}
