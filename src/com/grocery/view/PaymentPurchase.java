/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.ItemAvailabilityPurchase;
import com.grocery.bean.PurchaseMaster;
import com.grocery.bean.StockDetailsPurchase;
import com.grocery.bean.StoreDetails;
import com.grocery.bean.VendorBillMaster;
import com.grocery.bean.VendorMaster;
import com.grocery.bean.VendorPartialPayment;
import com.grocery.query.ItemQuery;
import com.grocery.query.PurchaseItemAvailabilityQuery;
import com.grocery.query.PurchaseMasterQuery;
import com.grocery.query.StockDetailsQuery;
import com.grocery.query.StoreDetailsQuery;
import com.grocery.query.VendorBillMasterQuery;
import com.grocery.query.VendorPartialPaymentQuery;
import com.grocery.query.VendorQuery;
import com.grocery.read.MessageFormat;
import com.toedter.calendar.JTextFieldDateEditor;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author GanpatiBappa
 */
public class PaymentPurchase extends javax.swing.JFrame {
    TableModel jTable1;
    String vendorName;
    private boolean flag;
    private Date date = new Date();
    private JDesktopPane jDesktopPane;
    private JTextFieldDateEditor editor;
    private boolean vendorFlag;
    private boolean newVendorFlag;
    private boolean itemFlag;
    private BigDecimal beginningCash;
    private BigDecimal expenses;
    String venName;
    String gstType;
    String expDate;
    com.toedter.calendar.JDateChooser purDate;
    
    /**
     * Creates new form Payment
     */
    public PaymentPurchase() {
        initComponents();
        jPanelTds.setVisible(false);
       
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
      
       // fullPayment.setVisible(false);
        save.setVisible(false);
        gstAmount1.setVisible(false);
        jLabel5.setVisible(false);
        
        fullPayment.setVisible(false);
        save.setVisible(false);
      //  name12.setVisible(false);
        
        jLabel6.setVisible(false);
        searchVenBillNo.setVisible(false);
        //jLabel1Date.setText(purDate.toString());
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelPaymentMode1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        partialPayment1 = new javax.swing.JButton();
        fullPayment1 = new javax.swing.JButton();
        save = new javax.swing.JButton();
        fullPayment = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        paymentMode = new javax.swing.JComboBox<String>();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        totalAmount1 = new javax.swing.JTextField();
        discount1 = new javax.swing.JTextField();
        finalAmount1 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel1Date = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        vanNname = new javax.swing.JFormattedTextField();
        jLabel38 = new javax.swing.JLabel();
        jPanelPaymentMode2 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        cheque = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        bank = new javax.swing.JComboBox<String>();
        chequeDate = new com.toedter.calendar.JDateChooser();
        amount = new javax.swing.JFormattedTextField();
        jPanelTds = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        tdsNo = new javax.swing.JFormattedTextField();
        gstAmount1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        searchVenBillNo = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelPaymentMode1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "बैंक और चेक विवरण", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Unicode MS", 0, 12), new java.awt.Color(255, 0, 0))); // NOI18N

        partialPayment1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        partialPayment1.setText("आंशिक भुगतान");
        partialPayment1.setToolTipText("Partial Payment");
        partialPayment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partialPayment1ActionPerformed(evt);
            }
        });

        fullPayment1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        fullPayment1.setText("पूरा भुगतान");
        fullPayment1.setToolTipText("Full Payment");
        fullPayment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullPayment1ActionPerformed(evt);
            }
        });

        save.setBackground(new java.awt.Color(255, 255, 255));
        save.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        fullPayment.setBackground(new java.awt.Color(255, 255, 255));
        fullPayment.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        fullPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/print.png"))); // NOI18N
        fullPayment.setText("Print");
        fullPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullPaymentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(fullPayment1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(partialPayment1)
                .addGap(53, 53, 53)
                .addComponent(fullPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fullPayment1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fullPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(partialPayment1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel34.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel34.setText("भुगतान का प्रकार:");
        jLabel34.setToolTipText("Payment Mode:");

        paymentMode.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        paymentMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Cash", "Card", "Cheque" }));
        paymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "भुगतान राशि", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Unicode MS", 0, 12), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel2.setText("कुल रकम");
        jLabel2.setToolTipText("Total Amount");

        jLabel3.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel3.setText("अंतिम राशी");
        jLabel3.setToolTipText("Final Amount");

        jLabel4.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel4.setText("छूट");
        jLabel4.setToolTipText("Discount");

        totalAmount1.setBackground(new java.awt.Color(255, 255, 204));
        totalAmount1.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        totalAmount1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmount1ActionPerformed(evt);
            }
        });

        discount1.setBackground(new java.awt.Color(255, 255, 204));
        discount1.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N

        finalAmount1.setBackground(new java.awt.Color(255, 255, 204));
        finalAmount1.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(totalAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(discount1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finalAmount1, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(totalAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(finalAmount1, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                        .addComponent(discount1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(0, 153, 153));

        jLabel29.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("खरीद की तारीख:");
        jLabel29.setToolTipText("Purchase Date:");

        jLabel1Date.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("भुगतान");
        jLabel1.setToolTipText("Payment ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1Date, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel29)
                    .addComponent(jLabel1Date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "बैंक और चेक विवरण", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Unicode MS", 0, 12), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel37.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel37.setText(" रकम");
        jLabel37.setToolTipText("Amount");

        vanNname.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        vanNname.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        vanNname.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        vanNname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                vanNnameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                vanNnameFocusLost(evt);
            }
        });
        vanNname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                vanNnameKeyReleased(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel38.setText("नाम");
        jLabel38.setToolTipText("Name");

        jPanelPaymentMode2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel39.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel39.setText(" चेक:");
        jLabel39.setToolTipText("Cheque#:");

        cheque.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        cheque.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cheque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chequeKeyTyped(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel40.setText("बैंक का नाम:");
        jLabel40.setToolTipText("Bank Name:");

        bank.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        bank.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A.P. Mahesh Co-Op Urban Bank Ltd", "Abhyudaya Co-op Bank Ltd", "Abu Dhabi Commercial Bank", "Ahmedabad Mercantile Co-operative Bank Ltd", "Allahabad Bank", "Andhra Bank", "Apna Sahakari Bank Ltd.", "Axis Bank", "Bank Of America", "Bank Of Bahrain And Kuwait", "Bank Of Baroda", "Bank Of Ceylon", "Bank Of India", "Bank Of Maharashtra", "Bank Of Nova Scotia", "Bank Of Rajasthan Ltd", "Bank Of Tokyo-Mitsubishi UFJ Ltd", "Barclays Bank PLC", "Bassein Catholic Co-Op Bank Ltd", "Bharat Co-operative Bank (Mumbai) Ltd", "Bharat Overseas Bank", "BNP Paribas", "Calyon Bank", "Canara Bank", "Catholic Syrian Bank Ltd", "Central Bank Of India", "Chinatrust Commercial Bank", "Citibank NA", "Citizencredit Co-operative Bank Ltd", "City Union Bank Ltd", "Corporation Bank", "Cosmos Co-operative Bank Ltd.", "Credit Agricole Corp N Invsmnt Bank", "DBS Bank Ltd", "Dena Bank", "Deutsche Bank AG", "Development Credit Bank Limited", "Dhanalakshmi Bank Ltd", "DICGC", "Dombivli Nagari Sahakari Bank Limited", "Federal Bank Ltd", "Firstrand Bank Limited", "Greater Bombay Co-op. Bank Ltd", "HDFC Bank Ltd", "HSBC", "ICICI Bank Ltd", "IDBI Bank Ltd", "Indian Bank", "Indian Overseas Bank", "Indusind Bank Ltd", "ING Vysya Bank Ltd", "Jammu And Kashmir Bank Ltd", "Janakalyan Sahakari Bank Ltd", "Janata Sahakari Bank Ltd (Pune)", "JP Morgan Chase Bank NA", "Kallappanna Awade Ich Janata S Bank", "Kalupur Commercial Co. Op. Bank Ltd.", "Kalyan Janata Sahakari Bank Ltd.", "Kapole Co Op Bank", "Karad Urban Co-Op Bank Ltd", "Karnataka Bank Ltd", "Karnataka State Apex  Coop. Bank Ltd.", "Karur Vysya Bank", "Kotak Mahindra Bank", "Lakshmi Vilas Bank Ltd", "Mahanagar Co-op Bank Ltd", "Maharashtra State Co Operative Bank", "Mashreq Bank PSC", "Mehsana Urban Cooperative Bank Ltd", "Mizuho Corporate Bank Ltd", "Nagpur Nagrik Sahakari Bank Ltd", "Nainital Bank Limited", "Nasik Merchants Co-Op Bank Ltd", "New India Co-operative Bank Ltd", "Nkgsb Co-op Bank Ltd", "Nutan Nagarik Sahakari Bank Ltd", "Oman International Bank Saog", "Oriental Bank Of Commerce", "Parsik Janata Sahakari Bank Ltd", "PMC Bank", "Punjab And Maharashtra Co-op Bank Ltd", "Punjab And Sind Bank", "Punjab National Bank", "Rajkot Nagarik Sahakari Bank Ltd", "Ratnakar Bank Ltd", "Reserve Bank Of India", "Saraswat Co-operative Bank Ltd", "Shamrao Vithal Co-operative Bank Limited", "Shinhan Bank", "Societe Generale", "South Indian Bank", "Standard Chartered Bank", "State Bank Of Bikaner And Jaipur", "State Bank Of Hyderabad", "State Bank Of India", "State Bank Of Indore", "State Bank Of Mauritius Ltd", "State Bank Of Mysore", "State Bank Of Patiala", "State Bank Of Travancore", "Surat Peoples Co-Op Bank Ltd", "Syndicate Bank", "Tamilnad Mercantile Bank Ltd", "Tamilnadu State Apex Cooperative Bank Limited", "Thane Janata Sahakari Bank Ltd", "The Royal Bank Of Scotland NV", "UBS AG", "UCO Bank", "Union Bank Of India", "United Bank Of India", "Vijaya Bank", "West Bengal State Cooperative Bank Ltd", "Yes Bank Ltd" }));

        chequeDate.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelPaymentMode2Layout = new javax.swing.GroupLayout(jPanelPaymentMode2);
        jPanelPaymentMode2.setLayout(jPanelPaymentMode2Layout);
        jPanelPaymentMode2Layout.setHorizontalGroup(
            jPanelPaymentMode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPaymentMode2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPaymentMode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 56, Short.MAX_VALUE)
                .addGroup(jPanelPaymentMode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPaymentMode2Layout.createSequentialGroup()
                        .addComponent(cheque)
                        .addGap(10, 10, 10)
                        .addComponent(chequeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bank, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        jPanelPaymentMode2Layout.setVerticalGroup(
            jPanelPaymentMode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPaymentMode2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPaymentMode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cheque)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPaymentMode2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanelPaymentMode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel39, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chequeDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanelPaymentMode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bank))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        amount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        amount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        amount.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        amount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                amountFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                amountFocusLost(evt);
            }
        });
        amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountKeyReleased(evt);
            }
        });

        jPanelTds.setBackground(new java.awt.Color(255, 255, 255));

        jLabel41.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel41.setText("TDS Number");

        tdsNo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        tdsNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tdsNo.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        tdsNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tdsNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdsNoFocusLost(evt);
            }
        });
        tdsNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tdsNoKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanelTdsLayout = new javax.swing.GroupLayout(jPanelTds);
        jPanelTds.setLayout(jPanelTdsLayout);
        jPanelTdsLayout.setHorizontalGroup(
            jPanelTdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTdsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel41)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tdsNo, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanelTdsLayout.setVerticalGroup(
            jPanelTdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTdsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelTdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTdsLayout.createSequentialGroup()
                        .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3))
                    .addComponent(tdsNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelPaymentMode2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vanNname, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addComponent(amount))
                .addGap(39, 39, 39))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelTds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jPanelPaymentMode2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vanNname, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        gstAmount1.setBackground(new java.awt.Color(255, 255, 204));

        jLabel5.setText("GST Amount");

        jLabel6.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel6.setText("विक्रेता का नाम संपर्क नंबर बिल नं");
        jLabel6.setToolTipText("Vendor Name Contact Number Bill No");

        searchVenBillNo.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        searchVenBillNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchVenBillNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPaymentMode1Layout = new javax.swing.GroupLayout(jPanelPaymentMode1);
        jPanelPaymentMode1.setLayout(jPanelPaymentMode1Layout);
        jPanelPaymentMode1Layout.setHorizontalGroup(
            jPanelPaymentMode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelPaymentMode1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchVenBillNo, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
            .addGroup(jPanelPaymentMode1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(gstAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPaymentMode1Layout.setVerticalGroup(
            jPanelPaymentMode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPaymentMode1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelPaymentMode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(searchVenBillNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPaymentMode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gstAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPaymentMode1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPaymentMode1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void paymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeActionPerformed
//        cheque.setText("");
//        //        chequeDate.setDate(date);
//        bank.setSelectedIndex(0);
//        if(paymentMode.getSelectedIndex() == 0 || paymentMode.getSelectedIndex() == 1)
//        jPanelPaymentMode.setVisible(false);
//        else
//        if(paymentMode.getSelectedIndex() == 2)
//        {
//            jPanelPaymentMode.setVisible(true);
//            chequeDate.setVisible(false);
//        }
//        else
//        {
//            jPanelPaymentMode.setVisible(true);
//            chequeDate.setVisible(true);
//        }
    }//GEN-LAST:event_paymentModeActionPerformed

    private void fullPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullPaymentActionPerformed
        // pay();
    }//GEN-LAST:event_fullPaymentActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // save();
    }//GEN-LAST:event_saveActionPerformed

    private void totalAmount1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmount1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmount1ActionPerformed

    private void partialPayment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partialPayment1ActionPerformed
                PartialPaymentView1 partialPaymentView1 = new PartialPaymentView1();
                partialPaymentView1.setVisible(true);
//                   PartialPaymentView partialPaymentView = new PartialPaymentView(DefaultTableModel defaultTableModel, JDesktopPane jDesktopPane, VendorMaster vendorMaster, VendorPaymentDtls vendorPaymentDtls, boolean newVendorFlag, String challan, boolean newDiscount, float discount, float finalAmount, String reference);
//                   partialPaymentView.pack();
//                   JDesktopPane desk = this.getDesktopPane();
//                   this.dispose();
//                   desk.add(partialPaymentView);
//                   SetDimension.setInternalFrameLocation(desk, partialPaymentView);
//                   partialPaymentView.setVisible(true);
        //  PartialPaymentView partialPaymentView = new PartialPaymentView(DefaultTableModel defaultTableModel, JDesktopPane jDesktopPane, VendorMaster vendorMaster, VendorPaymentDtls vendorPaymentDtls, boolean newVendorFlag, String challan, boolean newDiscount, float discount, float finalAmount, String reference);
        //           PartialPaymentView partialPaymentView = new PartialPaymentView();
        //           partialPaymentView.pack();
        //           JDesktopPane desk = this.getDesktopPane();
        //           this.dispose();
        //           desk.add(partialPaymentView);
        //        //   SetDimension.setInternalFrameLocation(desk, partialPaymentView);
        //           partialPaymentView.setVisible(true);
    }//GEN-LAST:event_partialPayment1ActionPerformed

    private void fullPayment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullPayment1ActionPerformed
 
       try {
           fullPayment();
       } catch (SQLException ex) {
           Logger.getLogger(PaymentPurchase.class.getName()).log(Level.SEVERE, null, ex);
       } catch (ClassNotFoundException ex) {
           Logger.getLogger(PaymentPurchase.class.getName()).log(Level.SEVERE, null, ex);
       } catch (JRException ex) {
           Logger.getLogger(PaymentPurchase.class.getName()).log(Level.SEVERE, null, ex);
       }
        
    }//GEN-LAST:event_fullPayment1ActionPerformed

    private void vanNnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vanNnameFocusGained
        vanNname.selectAll();
    }//GEN-LAST:event_vanNnameFocusGained

    private void vanNnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vanNnameFocusLost
        if (vanNname.getText().trim().isEmpty()) {
            vanNname.setText("0.00");
        }
    }//GEN-LAST:event_vanNnameFocusLost

    private void vanNnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vanNnameKeyReleased
        /* if(!(amount.getText().trim().isEmpty()))
        getFinalAmountPaid(amount.getText());
        else
        finalAmountPaid.setText("0.00");
        */
    }//GEN-LAST:event_vanNnameKeyReleased

    private void chequeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chequeKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c))) {
            evt.consume();
        }
    }//GEN-LAST:event_chequeKeyTyped

    private void searchVenBillNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchVenBillNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchVenBillNoActionPerformed

    private void amountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_amountFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_amountFocusGained

    private void amountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_amountFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_amountFocusLost

    private void amountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_amountKeyReleased

    private void tdsNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdsNoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_tdsNoFocusGained

    private void tdsNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdsNoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_tdsNoFocusLost

    private void tdsNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tdsNoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tdsNoKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaymentPurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaymentPurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaymentPurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaymentPurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaymentPurchase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField amount;
    private javax.swing.JComboBox<String> bank;
    private javax.swing.JTextField cheque;
    private com.toedter.calendar.JDateChooser chequeDate;
    private javax.swing.JTextField discount1;
    private javax.swing.JTextField finalAmount1;
    private javax.swing.JButton fullPayment;
    private javax.swing.JButton fullPayment1;
    private javax.swing.JTextField gstAmount1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1Date;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanelPaymentMode1;
    private javax.swing.JPanel jPanelPaymentMode2;
    private javax.swing.JPanel jPanelTds;
    private javax.swing.JButton partialPayment1;
    private javax.swing.JComboBox<String> paymentMode;
    private javax.swing.JButton save;
    private javax.swing.JTextField searchVenBillNo;
    private javax.swing.JFormattedTextField tdsNo;
    private javax.swing.JTextField totalAmount1;
    private javax.swing.JFormattedTextField vanNname;
    // End of variables declaration//GEN-END:variables
    public void setValues(com.toedter.calendar.JDateChooser purDate, String totalAmount, String discountAmount, String finalAmount, TableModel tableData, String vendorName1, String gstType) {
        totalAmount1.setText((totalAmount));
       // gstAmount1.setText((gstAmount2));
        finalAmount1.setText((finalAmount));
        discount1.setText((discountAmount));
        vanNname.setText((vendorName1));
        this.jTable1 = tableData;
        venName = vendorName1;
        this.gstType = gstType;
        this.purDate = purDate;
        jLabel1Date.setText(purDate.getDate().toString());
        amount.setText(finalAmount);
    }

    
    
 /*   public void setValues(com.toedter.calendar.JDateChooser purDate, String totalAmount, String discountAmount, String gstAmount2, String finalAmount, TableModel tableData, String vendorName1, String gstType) {
   // public void setValues(String totalAmount, String discountAmount, String gstAmount2, String finalAmount, TableModel tableData, String vendorName1, String gstType ,) {
   // public void setValues(String totalAmount, String discountAmount,String gstAmount2, String finalAmount, TableModel jTable1, String vendorName1) {
        totalAmount1.setText((totalAmount));
        gstAmount1.setText((gstAmount2));
        finalAmount1.setText((finalAmount));
        discount1.setText((discountAmount));
        vanNname.setText((vendorName1));
        this.jTable1 = tableData;
        venName = vendorName1;
        this.gstType = gstType;
        this.purDate = purDate;
        jLabel1Date.setText(purDate.getDate().toString());
          
//        mfgDate = (mfgDate1);
//        expDate = (expDate);
       // name.setText(gstAmount2);
        //this.vendorName = vendorName;
//        this.gst_percentage = gst_percentage;
    }
*/
     private Date getDate() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        String sdate = sdf.format(new Date());
        return sdf.parse(sdate);
    }

    public void addStock() throws ParseException {
          
        String paymentMode = this.paymentMode.getSelectedItem().toString();
        if (paymentMode.equalsIgnoreCase("--Select--")) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select a paymentMode"), "Error message", JOptionPane.ERROR_MESSAGE);
            this.paymentMode.requestFocus();
            return;
        }
        
        DefaultTableModel tm = (DefaultTableModel) this.jTable1;
        String itemName = "";
        String brandName = "";
        String weight = "" ;
        String unitName = "";
        BigDecimal quantity ;
        BigDecimal total ;
        BigDecimal gst_percent;
       
      //  BigDecimal gst_percent = 0.0f;
        BigDecimal gstAmount ;
        BigDecimal actualTotal1 ;
        String type = "";
        BigDecimal discount;

        VendorPartialPayment vendorPartialPayment = new VendorPartialPayment();

        
        PurchaseMaster purchaseMaster = new PurchaseMaster();
        PurchaseMasterQuery purchaseMasterQuery = new PurchaseMasterQuery();

        StoreDetails storeDetails ;
        StoreDetailsQuery storeDetailsQuery = new StoreDetailsQuery();
        
        List<StoreDetails> storelist = storeDetailsQuery.getStoreDetails();
        storeDetails = storelist.get(0);
        VendorMaster vendorMaster ;
        
        
         VendorBillMasterQuery vendorBillMasterQueryNew = new VendorBillMasterQuery();
     
                    VendorQuery vendorQuery = new VendorQuery();
                    vendorMaster = vendorQuery.getVendorByName(venName);
                    VendorBillMaster vendorBillMaster = new VendorBillMaster();
          
                    vendorBillMaster.setTo(purDate.getDate());
                    vendorBillMaster.setDate(purDate.getDate());
                    // vendorBillMaster.setVendorMaster(vendorMaster);
                    
                     vendorBillMaster.setVendorMaster(vendorMaster);
                     vendorBillMaster.setBillAmount(new BigDecimal(totalAmount1.getText()));
                     vendorBillMaster.setChallan("NA");
                     vendorBillMaster.setDiscount(new BigDecimal(discount1.getText()));
                     vendorBillMaster.setFinalBillAmount(new BigDecimal(finalAmount1.getText()));
                     
                     vendorBillMaster.setRemark(gstType);
                     
                      vendorBillMaster.setReference("Direct");
                     
                     vendorBillMaster.setStoreDetails(storeDetails);
                      //vendorBillMaster.setStockDetailses(new HashSet(stocklist));
                      vendorMaster = vendorQuery.getVendorByName(venName);
                      
//                      Set<VendorBillMaster> list = vendorMaster.getVendorBillMasters();
//                      list.add(vendorBillMaster);
//                vendorMaster.setVendorBillMasters(list);
//                
//                vendorQuery.insertVendor(vendorMaster);

                   vendorBillMaster.setVendorMaster(vendorMaster);
                   vendorBillMasterQueryNew.insertIntoVendorBillMaster(vendorBillMaster);

        
        
        ItemAvailabilityPurchase itemAvailability = new ItemAvailabilityPurchase();    
        PurchaseItemAvailabilityQuery itemAvailabilityQueryNew = new PurchaseItemAvailabilityQuery();
//        
//        StockDetails stockDetails = new StockDetails();
//        StockDetailsQueryNew stockDetailsQueryNew = new StockDetailsQueryNew();
//        List<StockDetails> stocklist = new ArrayList<>();
//      
        int i = 0;

        while (i < tm.getRowCount()) {
            
//itemName, brandName,weight1,unitName, quantity, total, decimalFormat.format(gst_percent), decimalFormat.format(gstAmount),decimalFormat.format(actualTotal1), type});
         
                    itemName = jTable1.getValueAt(i, 0).toString();
                    brandName = jTable1.getValueAt(i, 1).toString();
                    weight = jTable1.getValueAt(i, 2).toString();
                    unitName = jTable1.getValueAt(i, 3).toString();
                    quantity = new BigDecimal(jTable1.getValueAt(i, 4).toString());
                    total = new BigDecimal(jTable1.getValueAt(i, 5).toString());
                    gst_percent = new BigDecimal(jTable1.getValueAt(i, 6).toString());
                    gstAmount = new BigDecimal(tm.getValueAt(i, 7).toString());
                    actualTotal1 = new BigDecimal(tm.getValueAt(i, 8).toString());
                    type = tm.getValueAt(i,9).toString();

                    purchaseMaster.setName(itemName);
                    purchaseMaster.setBrand(brandName);
                    purchaseMaster.setWeight(weight);
                   // purchaseMaster.setWeight(type);
                    purchaseMaster.setUnit(unitName);
                    purchaseMaster.setQuantity(quantity); 
                    purchaseMaster.setTotal(total);
                    purchaseMaster.setGstPercent(gst_percent);
                    purchaseMaster.setGstAmount(gstAmount);
                    purchaseMaster.setActualAmount(actualTotal1);
                    purchaseMaster.setGstType(type); 
                    
                    
                     List<PurchaseMaster> itemList = purchaseMasterQuery.checkItem(purchaseMaster);
                        if (itemList.isEmpty()) {
                            purchaseMasterQuery.insertItem(purchaseMaster);
                        } else {
                            for (PurchaseMaster pm : itemList) {
                                purchaseMaster.setId(pm.getId());
                            }
                        }
 
                    StockDetailsPurchase stockDetails = new StockDetailsPurchase();
                    stockDetails.setPurchaseMaster(purchaseMaster);
                    stockDetails.setQuantity(quantity);
                    stockDetails.setActualAmount(actualTotal1);
                    stockDetails.setGstAmount(gstAmount);
                    
                    stockDetails.setGstPercent(gst_percent);
                    stockDetails.setFinalTotal(total);
                    
                    String discountAm = this.discount1.getText().trim();
                    
                    
                    stockDetails.setDiscount(new BigDecimal(discountAm));

                    StockDetailsQuery stockDetailsQuery = new StockDetailsQuery();
                  
                    stockDetails.setVendorBillMaster(vendorBillMaster);
                    stockDetailsQuery.insertIntoStockDetails(stockDetails);
                    //stocklist.add(stockDetails);
                    
                //   stockDetailsQuery.insertIntoStockDetails(stockDetails);
                     BigDecimal thresholdPercent = new BigDecimal(0.25);

                     
                    itemAvailability.setPurchaseMaster(purchaseMaster);
                   // itemAvailability.setAvailability(quantity);
                    itemAvailability.setAvailability(new BigDecimal(weight));
                    itemAvailability.setThreshold(thresholdPercent.multiply(quantity));
                    
                    List<ItemAvailabilityPurchase> itemAvailabilityList = itemAvailabilityQueryNew.checkItem(itemAvailability);

                    if(itemAvailabilityList.isEmpty())
                        itemAvailabilityQueryNew.insertIntoItemAvailability(itemAvailability);
                    else
                    {
                        for(ItemAvailabilityPurchase ia: itemAvailabilityList)
                        {
                            itemAvailability.setId(ia.getId());
                            itemAvailability.setAvailability(ia.getAvailability().add(quantity));
                            itemAvailability.setThreshold(thresholdPercent.multiply(ia.getAvailability().add(quantity)));
                            
                            itemAvailabilityQueryNew.updateItemAvailability(itemAvailability);
                        }
                    }
                    i++;
        }     
        
        
        String chequeNumber = cheque.getText();
        String sudexo = tdsNo.getText();
        
        String bankName = bank.getSelectedItem().toString();
        String status = "";

        vendorPartialPayment.setDate(new Date(new SimpleDateFormat("dd/MM/yyyy").format(purDate.getDate())));
        vendorPartialPayment.setVendorMaster(vendorMaster);
        vendorPartialPayment.setPaidAmount(new BigDecimal(amount.getText().trim()).subtract(new BigDecimal(discount1.getText())));
        vendorPartialPayment.setPaymentMode(paymentMode);
       // vendorPartialPayment.setChequeCardNumber(cheque);
        vendorPartialPayment.setChequeCardNumber(chequeNumber);
        vendorPartialPayment.setChequeDate(chequeDate.getDate());
        vendorPartialPayment.setBank(bankName);
      //  vendorPartialPayment.setStatus("1");
        vendorPartialPayment.setStatus("Full");
        VendorPartialPaymentQuery vendorPartialPaymentQuery = new VendorPartialPaymentQuery();
        vendorPartialPaymentQuery.insertIntoVendorPartialPayment(vendorPartialPayment);
        JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Sale successful"));
        this.dispose();
   // }
        
        
        
        
        
        JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Stock added successfully"));
        
        
        clear();
        
//         DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
//                defaultTableModel.setRowCount(0);
//                jTable1.setModel(defaultTableModel);
       
        
        
        
    }
    
     private void clear() {
        paymentMode.setSelectedIndex(0);
        bank.setSelectedIndex(0);
        totalAmount1.setText("0.00");
        amount.setText("0.00");
        discount1.setText("0.00");
        finalAmount1.setText("0.00");
        amount.setText("00");
        vanNname.setText(" ");

    }
    

//                    VendorBillMasterQuery vendorBillMasterQueryNew = new VendorBillMasterQuery();
//     
//                    VendorQuery vendorQuery = new VendorQuery();
//                    vendorMaster = vendorQuery.getVendorByName(venName);
//                    VendorBillMaster vendorBillMaster = new VendorBillMaster();
//          
//                    vendorBillMaster.setTo(purDate.getDate());
//                    vendorBillMaster.setDate(purDate.getDate());
//                    // vendorBillMaster.setVendorMaster(vendorMaster);
//                    
//                     vendorBillMaster.setVendorMaster(vendorMaster);
//                     vendorBillMaster.setBillAmount(new BigDecimal(totalAmount1.getText()));
//                     vendorBillMaster.setChallan("NA");
//                     vendorBillMaster.setDiscount(new BigDecimal(discount1.getText()));
//                     vendorBillMaster.setFinalBillAmount(new BigDecimal(finalAmount1.getText()));
//                     
//                     vendorBillMaster.setRemark(gstType);
//                     
//                      vendorBillMaster.setReference("Direct");
//                     
//                     vendorBillMaster.setStoreDetails(storeDetails);
//                      //vendorBillMaster.setStockDetailses(new HashSet(stocklist));
//                      vendorMaster = vendorQuery.getVendorByName(venName);
//                      
////                      Set<VendorBillMaster> list = vendorMaster.getVendorBillMasters();
////                      list.add(vendorBillMaster);
////                vendorMaster.setVendorBillMasters(list);
////                
////                vendorQuery.insertVendor(vendorMaster);
//
//                   vendorBillMaster.setVendorMaster(vendorMaster);
//                   vendorBillMasterQueryNew.insertIntoVendorBillMaster(vendorBillMaster);
// 
//    


    

    
    
//       public void addStockRahul() throws ParseException {
//        DefaultTableModel tm = (DefaultTableModel) this.jTable1;
//        String itemName = "";
//        String hsnCode;
//        BigDecimal quantity;
//        BigDecimal total;
//        BigDecimal unitPrice;
//        BigDecimal gst_percent ;
//        BigDecimal gstAmount ;
//        BigDecimal finalTotal ;
//        
//
//        BigDecimal sellingUnit;
//       // BigDecimal sellingGstPercent ;
//     //   BigDecimal sellingGstPercent ;
//     //   BigDecimal sellingGstAmount ;
//     //   BigDecimal finalSellingPrice ;
//        String remark ;
//        String type ;
//       
//       Date mfg ;
//       Date exp;
// 
//        BigDecimal discount;
////        BigDecimal paidAmount;
//      //  BigDecimal sellingTotal;
//        
//        //PurchaseMaster purchaseMaster = new PurchaseMaster();
//        PurchaseMaster purchaseMaster = new PurchaseMaster();
//        PurchaseMasterQuery purchaseMasterQuery = new PurchaseMasterQuery();
//
//        StoreDetails storeDetails = new StoreDetails();
//        storeDetails.setId(1);
//        VendorMaster vendorMaster = new VendorMaster();
//        
//        vendorMaster.setId(1);
//        
//        ItemAvailability itemAvailability = new ItemAvailability();    
//        ItemAvailabilityQueryNew itemAvailabilityQueryNew = new ItemAvailabilityQueryNew();
//        
//        StockDetails stockDetails = new StockDetails();
//        StockDetailsQueryNew stockDetailsQueryNew = new StockDetailsQueryNew();
//      
//        int i = 0;
//
//        while (i < tm.getRowCount()) {
//            
//            
//            
//                    itemName = jTable1.getValueAt(i, 0).toString();
//                    hsnCode = jTable1.getValueAt(i, 1).toString();
//                    quantity = new BigDecimal(tm.getValueAt(i, 2).toString());
//                    total = new BigDecimal(tm.getValueAt(i, 3).toString());
//                    unitPrice = new BigDecimal(tm.getValueAt(i, 4).toString());
//                    gst_percent = new BigDecimal(tm.getValueAt(i, 5).toString());
//                    gstAmount = new BigDecimal(tm.getValueAt(i, 6).toString());
//                    finalTotal = new BigDecimal(tm.getValueAt(i, 7).toString());
//                    sellingUnit = new BigDecimal(tm.getValueAt(i, 8).toString());
////                    sellingGstPercent = new BigDecimal(tm.getValueAt(i, 9).toString());
////                    sellingGstAmount = new BigDecimal(tm.getValueAt(i, 10).toString());
////                    finalSellingPrice = new BigDecimal(tm.getValueAt(i, 11).toString());
//                    remark = tm.getValueAt(i, 9).toString();
//                    type = tm.getValueAt(i,9).toString();
//                    mfg = new Date(tm.getValueAt(i, 10).toString());
//                    exp = new Date(tm.getValueAt(i,11).toString());
//    
//                  
//            purchaseMaster.setName(itemName);
//            purchaseMaster.setBrand(hsnCode);
//            purchaseMaster.setWeight(unitPrice);
//            purchaseMaster.setUnit(gst_percent);
//            purchaseMaster.setQuantity(sellingUnit); 
//            purchaseMaster.setTotal(sellingUnit);
//            purchaseMaster.setGstType(gstType);
//            
//            purchaseMaster.setGstPercent(sellingUnit);
//            purchaseMaster.setGstAmount(sellingUnit);
//            purchaseMaster.setActualAmount(mfg);
//         
//            // purchaseMaster.setVendorId(exp);
//                    
//                    
//                    
//                    
//                    
//  
//                     List<purchaseMaster> itemList = purchaseMasterQuery.checkItem(purchaseMaster);
//                    if(itemList.isEmpty())
//                        purchaseMasterQuery.insertItem(purchaseMaster);
//                    else
//                    {
//                        for(purchaseMaster im: itemList)
//                            purchaseMaster.setId(im.getId());
//                    }
//                    
//                    stockDetails.setpurchaseMaster(purchaseMaster);
//                    stockDetails.setQuantity(quantity);
//                    stockDetails.setUnitPrice(unitPrice);
//                //    stockDetails.setDiscount(new BigDecimal(discount);
//                    if(type.equals("GST")){
//                        stockDetails.setGstPercent(gst_percent);
//                        stockDetails.setGstAmount(gstAmount);
//                        
//                        stockDetails.setIgst_percent(new BigDecimal(0.00));
//                        stockDetails.setIgstAmount((new BigDecimal(0.00)));
//                    }
//                        else if(type.equals("IGST")){
//                        stockDetails.setGstPercent((new BigDecimal(0.00)));
//                        stockDetails.setGstAmount((new BigDecimal(0.00)));
//                        
//                        stockDetails.setIgst_percent(gst_percent);
//                        stockDetails.setIgstAmount(gstAmount);
//                    }else{
//                        stockDetails.setIgst_percent(new BigDecimal(0.00));
//                        stockDetails.setIgstAmount(new BigDecimal(0.00)); 
//                        
//                        stockDetails.setGstPercent((new BigDecimal(0.00)));
//                        stockDetails.setGstAmount((new BigDecimal(0.00)));
//                    }
//                  
//                    stockDetails.setFinalTotal(finalTotal);
//
//                    stockDetailsQueryNew.insertIntoStockDetails(stockDetails);
//                    
//                     BigDecimal thresholdPercent = new BigDecimal(0.25);
//
//                     
//                    itemAvailability.setpurchaseMaster(purchaseMaster);
//                    itemAvailability.setAvailability(quantity);
//                    itemAvailability.setThreshold(thresholdPercent.multiply(quantity));
//                    
//                    List<ItemAvailability> itemAvailabilityList = itemAvailabilityQueryNew.checkItem(itemAvailability);
//                    
//                    if(itemAvailabilityList.isEmpty())
//                        itemAvailabilityQueryNew.insertIntoItemAvailability(itemAvailability);
//                    else
//                    {
//                        for(ItemAvailability ia: itemAvailabilityList)
//                        {
//                            itemAvailability.setId(ia.getId());
//                            itemAvailability.setAvailability(ia.getAvailability().add(quantity));
//                            itemAvailability.setThreshold(thresholdPercent.multiply(ia.getAvailability().add(quantity)));
//                            
//                            itemAvailabilityQueryNew.updateItemAvailability(itemAvailability);
//                        }
//                    }
//                    i++;
//                    
//                    
//          VendorBillMaster vendorBillMaster = new VendorBillMaster();
//          VendorBillMasterQuery vendorBillMasterQueryNew = new VendorBillMasterQuery();
//     
//                    vendorBillMaster.setTo(purDate.getDate());
//                     vendorBillMaster.setStoreDetails(storeDetails);
//                    // vendorBillMaster.setVendorMaster(vendorMaster);
//                   
//                     vendorBillMaster.setVendorMaster(vendorMaster);
//                     vendorBillMaster.setBillAmount(total);
//                     vendorBillMaster.setChallan("NA");
//                     vendorBillMaster.setDiscount(new BigDecimal(discount1.getText()));
//                     vendorBillMaster.setFinalBillAmount(finalTotal);
//                     
//                     vendorBillMaster.setRemark(remark);
//                     
//                      vendorBillMaster.setReference("Direct");
//                     
//                      VendorQuery vendorQuery = new VendorQuery();
//                      vendorMaster = vendorQuery.getVendorByName(venName);
//                      Set<VendorBillMaster> list;
//                      list = vendorMaster.getVendorBillMasters();
//                      if(vendorMaster.getVendorBillMasters()!=null || vendorMaster.getVendorBillMasters().isEmpty() ){
//                          list  = new HashSet<>();
//                          list.add(vendorBillMaster);
//                         
//                      }
//                      else{
//                          list = vendorMaster.getVendorBillMasters();
//                      
//                      }
//                    vendorMaster.setVendorBillMasters(list);
//                vendorQuery.insertVendor(vendorMaster);
////                     vendorBillMasterQueryNew.insertIntoVendorBillMaster(vendorBillMaster);
                    
//  /*      
//              //   VendorBillMaster vendorBillMaster = new VendorBillMaster();
//                VendorBillMasterQuery vendorBillMasterQuery = new VendorBillMasterQuery();
//              //  StoreDetails storeDetails = new StoreDetails();
//                
//                storeDetails.setId(1);
//                
//  //              Date purchaseDate = (this.jLabel1Date.getDate());
//  //              vendorBillMaster.setDate(jLabel1Date);
//                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
//             //   vendorBillMaster.setDate(jLabel1Date);
//              //  vendorBillMaster.setDate(purchaseDate);
//                vendorBillMaster.setStoreDetails(storeDetails);
//                vendorBillMaster.setVendorMaster(vendorMaster);  
//                vendorBillMaster.setBillAmount(new BigDecimal(amount.getText().trim()));
//                vendorBillMaster.setDiscount(new BigDecimal(discount1.getText()));
//                vendorBillMaster.setFinalBillAmount(new BigDecimal(amount.getText()).subtract(new BigDecimal(discount1.getText())));
//                vendorBillMasterQuery.insertIntoVendorBillMaster(vendorBillMaster);
//*/
//    }                
//
//    
//
//}
//  
//                      
/*       
//                    purchaseMaster purchaseMaster = new purchaseMaster();
//                    purchaseMaster.setName(itemName);
//                    purchaseMaster.setHsnCode(hsnCode);
//                    purchaseMaster.setUnitPrice(BigDecimal.valueOf(unitPrice));
//                  //  purchaseMaster.setUnitPrice(discount);
//                   
                    
                    // purchaseMaster.setpurchaseMaster(item);
            StockDetails stockDetails =new StockDetails();
            stockDetails.setUnitPrice(BigDecimal.valueOf(Double.valueOf(unitPrice)));
            stockDetails.setFinalTotal(finalTotal);

            purchaseMaster item = checkItemAndInsert(itemName,purchaseMaster);        
 
//            addItemAvailability(item, paidAmount);

            VendorQuery vendorQuery = new VendorQuery();

            String date = getDate();
            VendorMaster vendorMaster = vendorQuery.getVendorByName(vendorName);
            String totalamount = totalAmount1.getText().trim();

           
          //  PurchaseItem stockDetails = new PurchaseItem();

            stockDetails.setpurchaseMaster(item);
            stockDetails.setQuantity(BigDecimal.valueOf(quantity));
           // stockDetails.setDiscount(discount);
            //stockDetails.setUnits(unitsIn);
//            stockDetails.setFinalTotal(paidAmount);

            stockDetails.setUnitPrice(BigDecimal.valueOf(Double.valueOf(unitPrice)));

            VendorMaster vendorMaster2 = vendorQuery.getVendorBiVendorMasterllDetailsByVendorIdAndDateAndBillAmount(vendorMaster.getId(), date, totalamount);
           
//           List<VendorBillMaster> billList = new ArrayList<VendorBillMaster>(vendorMaster2.getVendorBillMasteres());
//            purchaseItem.setVendorBillMaster(getBillDetails(billList, totalamount1, date));

            
            List<VendorBillMaster> billList = new ArrayList<VendorBillMaster>(vendorMaster2.getVendorBillMasters());
            stockDetails.setVendorBillMaster(getBillDetails(billList, totalamount, date));

            StockDetailsQuery stockDetailsQuery = new StockDetailsQuery();
            stockDetailsQuery.insertIntoStockDetails(stockDetails);
            i++;
        }
    }
*/
    
       private void insertVendorPaymentDetails() throws ParseException {

        boolean flag = false;
        String bankName = bank.getSelectedItem().toString();

        double finalamount = Double.valueOf(finalAmount1.getText().trim());

        String chequeNo;
        Date chequedate;
        Date purchasedate;
        String chequeAmount;
        String chequeName;

        VendorQuery vendorQuery = new VendorQuery();
      //  VendorMaster vendorMaster = vendorQuery.getVendorByName(this.vendorName);
        VendorMaster vendorMaster = vendorQuery.getVendorByName(venName);

        VendorPartialPayment vendorPartialPayment = new VendorPartialPayment();
       // VendorPaymentDtls vendorPaymentDtls = new VendorPaymentDtls();

         String paymentMode = this.paymentMode.getSelectedItem().toString();
         String chequeNumber = this.cheque.getText().toString();
         
         if(paymentMode.equalsIgnoreCase("--select--"))
            {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the payment mode"), "Error message", JOptionPane.ERROR_MESSAGE);
                this.paymentMode.requestFocus();
                return;
            }
            if(paymentMode.equalsIgnoreCase("card"))
            {
                if(cheque.getText().trim().isEmpty())
                { 
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Card number"), "Error message", JOptionPane.ERROR_MESSAGE);
                    cheque.requestFocus();
                    return;
                }
                chequeNumber = cheque.getText().trim();
            }
            if(paymentMode.equalsIgnoreCase("cheque") || paymentMode.equalsIgnoreCase("neft"))
            {
                if(cheque.getText().trim().isEmpty())
                { 
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Cheque/NEFT number"), "Error message", JOptionPane.ERROR_MESSAGE);
                    cheque.requestFocus();
                    return;
                }
       // if (jRadioButton1.isSelected() || jRadioButton3.isSelected()) {
            chequeNo = cheque.getText().trim();
            chequedate = chequeDate.getDate();
       
            chequeAmount = amount.getText().trim();
            //chequeName = name12.getSelectedItem().toString();
            chequeName = vanNname.getText().toString();
            vendorPartialPayment.setBank(bankName);
            vendorPartialPayment.setChequeCardNumber(chequeNo);
            vendorPartialPayment.setChequeDate(chequedate);

            vendorPartialPayment.setVendorMaster(vendorQuery.getVendorByName(chequeName));
            vendorPartialPayment.setStatus("0");
            vendorPartialPayment.setPaidAmount(BigDecimal.valueOf(finalamount));
//            if (jRadioButton1.isSelected()) {
//                vendorPartialPayment.setPaymentMode("Cheque");
//            } else {
//                vendorPartialPayment.setPaymentMode("NEFT");
//            }
            vendorPartialPayment.setPaymentType("Full");
            vendorPartialPayment.setDate(new Date());
            vendorQuery.savePaymentDetails(vendorPartialPayment);
            vendorQuery.insertVendor(vendorPartialPayment);
        }

    }    
/*
  
    private void addItemAvailability(purchaseMaster item, String units, BigDecimal paidAmount) {

        ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();
        ItemAvailability itemAvailability = new ItemAvailability();
        itemAvailability.setpurchaseMaster(item);
        itemAvailability.setAvailability(paidAmount);
        if (!isExist(item)) {

            itemAvailabilityQuery.insertIntoItemAvailability(itemAvailability);

        } else {
            List<ItemAvailability> itemAvailabilityList = (List<ItemAvailability>)itemAvailabilityQuery.checkItem(itemAvailability);
            Object obj = itemAvailabilityList.get(0);
            purchaseMaster purchaseMaster = (purchaseMaster)obj;
            Set<ItemAvailability> itemAvailabilityList1 = purchaseMaster.getItemAvailabilities();
            itemAvailability = itemAvailabilityList1.iterator().next();
            String olditem = String.valueOf(itemAvailability.getAvailability());
            double oitem = Double.valueOf(olditem);
            double newitem = Double.valueOf(units);
            double totalItem = oitem + newitem;
            itemAvailability.setAvailability(BigDecimal.valueOf(totalItem));
            itemAvailabilityQuery.updateItemAvailability(itemAvailability);
        }

    }

 
*/
       private Date getDate1() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        
        String sdate = sdf.format(new Date());
        return sdf.parse(sdate);
    }
    private void insertBilldetails() throws ParseException {

        double totalamount = Double.valueOf(totalAmount1.getText().trim());
        double finalamount = Double.valueOf(finalAmount1.getText().trim());
        double discount = Double.valueOf(discount1.getText().trim());
        double gstamount = Double.valueOf(gstAmount1.getText().trim());

        String remark;
        Date to;
        SimpleDateFormat purchaseDate1  = new SimpleDateFormat("dd-MM-yyyy");
        
         VendorBillMaster vendorBillMaster = new VendorBillMaster();
         VendorBillMasterQuery vendorBillMasterQueryNew = new VendorBillMasterQuery();
       
        
        VendorQuery vendorQuery = new VendorQuery();
        VendorMaster vendorMaster = vendorQuery.getVendorByName(venName);
        StoreDetails storeDetails = new StoreDetails();
            
                    
                    vendorBillMaster.setTo(purDate.getDate());
     
                     vendorBillMaster.setStoreDetails(storeDetails);
                     vendorBillMaster.setVendorMaster(vendorMaster);
                     vendorBillMaster.setChallan("NA");
                     vendorBillMaster.setBillAmount(new BigDecimal(this.totalAmount1.getText()));  
                     vendorBillMaster.setDiscount(new BigDecimal(this.discount1.getText()));
                     vendorBillMaster.setFinalBillAmount(new BigDecimal(this.finalAmount1.getText()));
                     
                     vendorBillMaster.setRemark("GST");
                     
                     vendorBillMaster.setReference("Direct");
                     vendorBillMaster.setVendorMaster(vendorMaster);
                      String paymentMode = this.paymentMode.getSelectedItem().toString();

                      vendorBillMasterQueryNew.insertIntoVendorBillMaster(vendorBillMaster);
        
        
        
   /*     VendorBillMaster vendorBillMaster = new VendorBillMaster();
        StoreDetails storeDetails = new StoreDetails();
        storeDetails.setId(1); 
        
        vendorBillMaster.setBillAmount(BigDecimal.valueOf(totalamount));
        vendorBillMaster.setFinalBillAmount(BigDecimal.valueOf(finalamount));
        vendorBillMaster.setDiscount(BigDecimal.valueOf(discount));
   
       // vendorBillMaster.setB(BigDecimal.valueOf(gstamount));
        vendorBillMaster.setDate(new Date());
        vendorBillMaster.setStoreDetails(storeDetails);

        if(vendorMaster.getVendorBillMasters()!=null){
            
        vendorMaster.getVendorBillMasters().add(vendorBillMaster);
        }else{
            Set list = new HashSet();
            list.add(vendorBillMaster);
            vendorMaster.setVendorBillMasters(list);
        }
        //vendorQuery.insertVendorMaster(vendorMaster);
        vendorQuery.insertVendorMaster(vendorBillMaster);
        // vendorBillMasterQuery.insertIntoVendorBillMaster(vendorBillMaster);
        */
         /*       
                VendorBillMaster vendorBillMaster = new VendorBillMaster();
                VendorBillMasterQuery vendorBillMasterQuery = new VendorBillMasterQuery();
                StoreDetails storeDetails = new StoreDetails();
                
                storeDetails.setId(1);
                
//                vendorBillMaster.setDate(purchaseDate);
//                vendorBillMaster.setDate(purchaseDate);
//                
                
                        // vendorBillMaster.setDate(jLabel1Date);
                vendorBillMaster.setStoreDetails(storeDetails);
                vendorBillMaster.setVendorMaster(vendorMaster);
                        //  vendorBillMaster.setChallan(challan.getText().trim());
                vendorBillMaster.setBillAmount(new BigDecimal(amount.getText().trim()));
                vendorBillMaster.setDiscount(new BigDecimal(discount1.getText()));
                vendorBillMaster.setFinalBillAmount(new BigDecimal(finalAmount1.getText()));
                vendorBillMaster.setRemark("GST");
                         //  vendorBillMaster.setDiscount(new BigDecimal(discount.getText()));
                         // vendorBillMaster.setFinalBillAmount(new BigDecimal(amount.getText()).subtract(new BigDecimal(discount.getText())));
                
//                if(gstP.isSelected()){
//                     vendorBillMaster.setRemark("GST");
//                     vendorBillMaster.setFinalBillAmount(new BigDecimal(Double.valueOf(amount.getText())+getTotalGSTAmount()));
//                }else if(igstP.isSelected()){
//                    vendorBillMaster.setRemark("IGST");
//                    vendorBillMaster.setFinalBillAmount(new BigDecimal(Double.valueOf(amount.getText())+getTotalGSTAmount()));
//                }else{
//                    vendorBillMaster.setRemark("NON-GST");      
//                     vendorBillMaster.setFinalBillAmount(new BigDecimal(Double.valueOf(amount.getText())));
//                }
                
                //vendorBillMaster.setReference(reference.getText().trim());
                
                vendorBillMasterQuery.insertIntoVendorBillMaster(vendorBillMaster);
                */
    }

  private void fullPayment()throws SQLException, ClassNotFoundException, JRException {
       try {
     
           addStock();
           //insertBilldetails();
          // insertVendorPaymentDetails();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Stock Details failed to save"), "Error Mesage", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }
  
//    private PurchaseMaster checkItemAndInsert(String itemName, PurchaseMaster purchaseMaster) {
//     
//        PurchaseMaster item;
//        List<PurchaseMaster> itemList = ItemQuery.getItemByNameAndBrand(itemName);
//        ItemQuery itemQuery = new ItemQuery();
//        if (itemList.isEmpty()) {
//
//            itemQuery.insertItem(PurchaseMaster);
//            itemList = ItemQuery.getItemByNameAndBrand(itemName);
//            item = itemList.get(0);
//        } else {
//
//            item = itemList.get(0);
//        }
//
//        return item;
//    }
 private PurchaseMaster checkItemAndInsert(String itemName, PurchaseMaster purchaseMaster) {
        PurchaseMaster item;
        PurchaseMasterQuery purchaseMasterQuery = new PurchaseMasterQuery();
        List<PurchaseMaster> itemList = purchaseMasterQuery.getItemByNameAndBrand(itemName);
        ItemQuery itemQuery = new ItemQuery();

        if (itemList.isEmpty()) {
            purchaseMasterQuery.insertItem(purchaseMaster);
            itemList = purchaseMasterQuery.getItemByNameAndBrand(itemName);
            item = itemList.get(0);
        } else {
            item = itemList.get(0);
        }
        return item;
    }
 

 /*   private void addItemAvailability(PurchaseMaster item, BigDecimal paidAmount) {

        ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();
        ItemAvailability itemAvailability = new ItemAvailability();
        itemAvailability.setItemMaster(item);
        itemAvailability.setAvailability(paidAmount);
        if (!isExist(item)) {

            itemAvailabilityQuery.insertIntoItemAvailability(itemAvailability);

        } else {
            List<ItemAvailability> itemAvailabilityList = (List<ItemAvailability>)itemAvailabilityQuery.checkItem(itemAvailability);
            Object obj = itemAvailabilityList.get(0);
            purchaseMaster itemDetails = (purchaseMaster)obj;
            Set<ItemAvailability> itemAvailabilityList1 = itemDetails.getItemAvailabilities();
            itemAvailability = itemAvailabilityList1.iterator().next();
            String olditem = String.valueOf(itemAvailability.getAvailability());
            double oitem = Double.valueOf(olditem);
           
        //    double newitem = Double.valueOf(units);
        //    double totalItem = oitem + newitem;
         //   itemAvailability.setAvailability(BigDecimal.valueOf(totalItem));
            itemAvailability.setAvailability(BigDecimal.valueOf(oitem));
            itemAvailabilityQuery.updateItemAvailability(itemAvailability);
        }

}

    private boolean isExist(PurchaseMaster item) {
        boolean exist = true;

        ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();
        List<ItemAvailability> list = itemAvailabilityQuery.checkItem(item);

        if (list.isEmpty()) {
            exist = false;
        }

        return exist;
    }

 */  
/*
    private VendorBillMaster getBillDetails(List<VendorBillMaster> billList, String totalamount, String date) {
        VendorBillMaster vendorBillMaster = new VendorBillMaster();

        for (VendorBillMaster vendorBill : billList) {
            if (totalamount.equals(vendorBill.getBillAmount().toString()) && date.equals(vendorBill.getDate().toString())) {

                return vendorBill;
            }

        }

        return null;
    }  */
}