/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.Expenses;
import com.grocery.bean.ItemAvailability;
import com.grocery.bean.ItemAvailabilityPurchase;
import com.grocery.bean.ItemMaster;
import com.grocery.bean.PurchaseMaster;
import com.grocery.bean.StockDetailsPurchase;
import com.grocery.query.ExpensesQuery;
import com.grocery.query.ItemAvailabilityPurchaseQuery;
import com.grocery.query.ItemAvailabilityQuery;
import com.grocery.query.ItemQuery;
import com.grocery.query.PurchaseMasterQuery;
import com.grocery.query.StockDetailsQuery;
import com.grocery.read.MessageFormat;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class AddNewItemsPage extends javax.swing.JFrame {
        private boolean itemFlag;
        private boolean purItemFlag;
        private boolean brandFlag;
        private Date date = new Date();
    /**
     * Creates new form AddNewItemsPage
     */
    public AddNewItemsPage() {
        initComponents();
        
        purchaseDate.setDate(date);
        jPanelDiscount.setVisible(false);
        loadItem();
        loadItemBrand();
        loadPurchaseItem();
        
        jLabel25.setVisible(false);
        amount.setVisible(false);
        jPanel3.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        jPanelNewBaracode = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        total = new javax.swing.JFormattedTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        weight1 = new javax.swing.JFormattedTextField();
        jLabel28 = new javax.swing.JLabel();
        quantity = new javax.swing.JFormattedTextField();
        jLabel44 = new javax.swing.JLabel();
        expDateText = new com.toedter.calendar.JDateChooser();
        jLabel32 = new javax.swing.JLabel();
        unit1 = new javax.swing.JComboBox<String>();
        jLabel41 = new javax.swing.JLabel();
        unitPrice1 = new javax.swing.JTextField();
        purchaseItem = new javax.swing.JComboBox<String>();
        jLabel24 = new javax.swing.JLabel();
        item = new javax.swing.JComboBox<String>();
        jLabel26 = new javax.swing.JLabel();
        brand = new javax.swing.JComboBox<String>();
        jLabel31 = new javax.swing.JLabel();
        barCode1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanelBrand = new javax.swing.JPanel();
        newBrand = new javax.swing.JTextField();
        jPanelItem = new javax.swing.JPanel();
        newItem = new javax.swing.JTextField();
        jPanelPurItem = new javax.swing.JPanel();
        newPurchaseItem = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        mfgDateText = new com.toedter.calendar.JDateChooser();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        purchaseDate = new com.toedter.calendar.JDateChooser();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cancel = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        finalAmountPaid = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        jCheckBoxDiscount = new javax.swing.JCheckBox();
        jPanelDiscount = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        discount = new javax.swing.JFormattedTextField();
        jPanelSearch = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        barCodeSearch = new javax.swing.JTextField();
        barcodeFlag = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        add.setBackground(new java.awt.Color(255, 255, 255));
        add.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        add.setText("जोड़ना");
        add.setToolTipText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addKeyPressed(evt);
            }
        });

        remove.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_icons/remove_cart.png"))); // NOI18N
        remove.setText("हटाना");
        remove.setToolTipText("Remove");
        remove.setMnemonic(KeyEvent.VK_R);
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        jPanelNewBaracode.setBackground(new java.awt.Color(255, 255, 255));
        jPanelNewBaracode.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "आइटम विवरण:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Unicode MS", 0, 12), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel30.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("कुल रकम");
        jLabel30.setToolTipText("Total Amount");

        total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        total.setText("0.00");
        total.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        total.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                totalFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                totalFocusLost(evt);
            }
        });
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });
        total.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalKeyReleased(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel23.setText("खरेदी वस्तु का नाम:");
        jLabel23.setToolTipText("Item Name:");

        jLabel27.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel27.setText("वजन ");
        jLabel27.setToolTipText("weight");

        weight1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        weight1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        weight1.setText("00");
        weight1.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        weight1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                weight1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                weight1FocusLost(evt);
            }
        });
        weight1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                weight1KeyReleased(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel28.setText(" मात्रा");
        jLabel28.setToolTipText("quantity");

        quantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        quantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantity.setText("00");
        quantity.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        quantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                quantityFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantityFocusLost(evt);
            }
        });
        quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantityKeyReleased(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel44.setText("समाप्ति तिथि");
        jLabel44.setToolTipText("expiry date");

        expDateText.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N

        jLabel32.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel32.setText("इकाई");
        jLabel32.setToolTipText("Unit");

        unit1.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        unit1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select Units--", "Kg", "gm", "unit" }));
        unit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unit1ActionPerformed(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel41.setText("यूनिट मूल्य:");
        jLabel41.setToolTipText("Unit Price:");

        unitPrice1.setText("0.00");
        unitPrice1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                unitPrice1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                unitPrice1FocusLost(evt);
            }
        });
        unitPrice1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unitPrice1KeyReleased(evt);
            }
        });

        purchaseItem.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        purchaseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseItemActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel24.setText("वस्तु का नाम:");
        jLabel24.setToolTipText("Item Name:");

        item.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel26.setText("ब्रांड :");
        jLabel26.setToolTipText("Brand");

        brand.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        brand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel31.setText("बारकोड");
        jLabel31.setToolTipText("weight");

        barCode1.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        barCode1.setText("00");
        barCode1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barCode1ActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("*");
        jLabel8.setPreferredSize(new java.awt.Dimension(7, 15));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("*");
        jLabel3.setPreferredSize(new java.awt.Dimension(7, 15));

        jPanelBrand.setBackground(new java.awt.Color(255, 204, 255));

        newBrand.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        newBrand.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newBrand.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newBrandFocusGained(evt);
            }
        });
        newBrand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                newBrandKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelBrandLayout = new javax.swing.GroupLayout(jPanelBrand);
        jPanelBrand.setLayout(jPanelBrandLayout);
        jPanelBrandLayout.setHorizontalGroup(
            jPanelBrandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBrandLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(newBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelBrandLayout.setVerticalGroup(
            jPanelBrandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBrandLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelItem.setBackground(new java.awt.Color(255, 204, 255));

        newItem.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        newItem.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newItemFocusGained(evt);
            }
        });
        newItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                newItemKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelItemLayout = new javax.swing.GroupLayout(jPanelItem);
        jPanelItem.setLayout(jPanelItemLayout);
        jPanelItemLayout.setHorizontalGroup(
            jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItemLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(newItem, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelItemLayout.setVerticalGroup(
            jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        newPurchaseItem.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        newPurchaseItem.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newPurchaseItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newPurchaseItemFocusGained(evt);
            }
        });
        newPurchaseItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                newPurchaseItemKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelPurItemLayout = new javax.swing.GroupLayout(jPanelPurItem);
        jPanelPurItem.setLayout(jPanelPurItemLayout);
        jPanelPurItemLayout.setHorizontalGroup(
            jPanelPurItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPurItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newPurchaseItem, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanelPurItemLayout.setVerticalGroup(
            jPanelPurItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPurItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newPurchaseItem, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel43.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel43.setText("निर्माण तिथि");
        jLabel43.setToolTipText("manufacturing Date");

        mfgDateText.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N

        javax.swing.GroupLayout jPanelNewBaracodeLayout = new javax.swing.GroupLayout(jPanelNewBaracode);
        jPanelNewBaracode.setLayout(jPanelNewBaracodeLayout);
        jPanelNewBaracodeLayout.setHorizontalGroup(
            jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNewBaracodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNewBaracodeLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(purchaseItem, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelNewBaracodeLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelPurItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel26)
                                .addGap(2, 2, 2)
                                .addComponent(brand, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNewBaracodeLayout.createSequentialGroup()
                                .addGap(480, 480, 480)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mfgDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel44)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(jPanelNewBaracodeLayout.createSequentialGroup()
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(barCode1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addGap(10, 10, 10)
                        .addComponent(weight1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unit1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28)
                        .addGap(18, 18, 18)
                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unitPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelNewBaracodeLayout.setVerticalGroup(
            jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNewBaracodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelPurItem, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(purchaseItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(brand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mfgDateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel44, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNewBaracodeLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(expDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNewBaracodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(barCode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(weight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(unit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(unitPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("काउंटर");
        jLabel1.setToolTipText("counter");

        jButton3.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jButton3.setText("वापस");
        jButton3.setToolTipText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("खरीद की तारीख:");
        jLabel29.setToolTipText("Purchase Date:");

        purchaseDate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 669, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(224, 224, 224)
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(purchaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(purchaseDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTable1.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "खरेदी वस्तू नाम", "वस्तु का नाम", "ब्रांड ", "बारकोड", "वजन", "इकाई", "यूनिट मूल्य", "मात्रा", "कुल", "निर्माण तिथि", "समाप्ति तिथि"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        cancel.setBackground(new java.awt.Color(255, 255, 255));
        cancel.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_icons/1439034464_DeleteRed.png"))); // NOI18N
        cancel.setText("रद्द करना");
        cancel.setToolTipText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        save.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        save.setText(" इकट्ठा करना");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel38.setText("अंतिम राशि का भुगतान:");
        jLabel38.setToolTipText("Final Amount Paid:");

        finalAmountPaid.setBackground(new java.awt.Color(255, 255, 153));
        finalAmountPaid.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        finalAmountPaid.setForeground(new java.awt.Color(255, 0, 0));
        finalAmountPaid.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        finalAmountPaid.setText("0.00");
        finalAmountPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalAmountPaidActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel25.setText("कुल");
        jLabel25.setToolTipText("Total");

        amount.setBackground(new java.awt.Color(255, 255, 153));
        amount.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        amount.setForeground(new java.awt.Color(255, 0, 0));
        amount.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jCheckBoxDiscount.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jCheckBoxDiscount.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBoxDiscount.setText(" छूट");
        jCheckBoxDiscount.setToolTipText("Discount");
        jCheckBoxDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDiscountActionPerformed(evt);
            }
        });

        jPanelDiscount.setBackground(new java.awt.Color(255, 204, 255));

        jLabel37.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel37.setText(" छूट राशि:");
        jLabel37.setToolTipText("Discount Amount:");

        discount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        discount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        discount.setText("0.00");
        discount.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        discount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                discountFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                discountFocusLost(evt);
            }
        });
        discount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discountKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanelDiscountLayout = new javax.swing.GroupLayout(jPanelDiscount);
        jPanelDiscount.setLayout(jPanelDiscountLayout);
        jPanelDiscountLayout.setHorizontalGroup(
            jPanelDiscountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDiscountLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanelDiscountLayout.setVerticalGroup(
            jPanelDiscountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDiscountLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelDiscountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxDiscount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(finalAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(finalAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxDiscount))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel19.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel19.setText("नाम से खोजें:");
        jLabel19.setToolTipText("Search By Name:");

        barCodeSearch.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        barCodeSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        barCodeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barCodeSearchActionPerformed(evt);
            }
        });
        barCodeSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barCodeSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                barCodeSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                barCodeSearchKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelSearchLayout = new javax.swing.GroupLayout(jPanelSearch);
        jPanelSearch.setLayout(jPanelSearchLayout);
        jPanelSearchLayout.setHorizontalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(barCodeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelSearchLayout.setVerticalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barCodeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        barcodeFlag.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        barcodeFlag.setText("बारकोड");
        barcodeFlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeFlagActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(256, 256, 256))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(remove)
                        .addGap(18, 18, 18)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancel)
                        .addGap(514, 514, 514))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1346, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelNewBaracode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(barcodeFlag)
                        .addGap(205, 205, 205)
                        .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(618, 618, 618)
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(barcodeFlag)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jPanelNewBaracode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancel)
                    .addComponent(remove))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
             save();
        
        //        Payment payment = new Payment();
        //        String totalAmount = amount.getText().trim();
        //        String gstAmount2 = gstAmount.getText().trim();
        //        String finalAmount = finalAmountPaid.getText().trim();
        //        String vendorName = getVendorName();
        //        String discountAmount = discount.getText();
        //        String mfgDate = mfgDate1.getDateFormatString();
        //        String expDate = expDate1.getDateFormatString();
        //        String gstPercentage = getGstPercentage();
        // payment.setValues(totalAmount, gstAmount2, finalAmount, getTableData(), vendorName,gstPercentage);
        //        payment.setValues(totalAmount,discountAmount, gstAmount2, finalAmount, getTableData(), vendorName);
        //        payment.setVisible(true);
        
        
    }//GEN-LAST:event_saveActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void finalAmountPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalAmountPaidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finalAmountPaidActionPerformed

    private void discountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountKeyReleased
//                if(!(discount.getText().trim().isEmpty()))
//                getFinalAmountPaid(discount.getText());
//                else
//                finalAmountPaid.setText("0.00");
    }//GEN-LAST:event_discountKeyReleased

    private void discountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_discountFocusLost
        if(discount.getText().trim().isEmpty())
        discount.setText("0.00");
    }//GEN-LAST:event_discountFocusLost

    private void discountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_discountFocusGained
        discount.selectAll();
    }//GEN-LAST:event_discountFocusGained

    private void jCheckBoxDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDiscountActionPerformed
        discount.setText("0.00");
        finalAmountPaid.setText("0.00");
        if(jCheckBoxDiscount.isSelected())
        {
            jPanelDiscount.setVisible(true);
        }
        else
        {
            jPanelDiscount.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxDiscountActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //        HomePage1 obj = new HomePage1();
        //        obj.show();

        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
         remove();
    }//GEN-LAST:event_removeActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        //        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        //        remove();
    }//GEN-LAST:event_jTable1KeyPressed

    private void addKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addKeyPressed
                if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        
                try{
                    addToTable();
            
                    }catch(Exception e) {
                        e.printStackTrace();
                    }
    }//GEN-LAST:event_addKeyPressed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
             
     try {
         addToTable();
     } catch (Exception ex) {
         Logger.getLogger(AddNewItemsPage.class.getName()).log(Level.SEVERE, null, ex);
     }
    
              
    }//GEN-LAST:event_addActionPerformed

    private void newPurchaseItemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newPurchaseItemKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_newPurchaseItemKeyTyped

    private void newPurchaseItemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newPurchaseItemFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_newPurchaseItemFocusGained

    private void newItemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newItemKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isAlphabetic(c) ||  (c == KeyEvent.VK_BACK_SPACE)||  c == KeyEvent.VK_DELETE || Character.isDigit(c) || c == ',' || c == '.' || c == KeyEvent.VK_SPACE || c == '-' || c == ':'))
        evt.consume();
    }//GEN-LAST:event_newItemKeyTyped

    private void newItemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newItemFocusGained
        newItem.selectAll();
    }//GEN-LAST:event_newItemFocusGained

    private void newBrandKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newBrandKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_newBrandKeyTyped

    private void newBrandFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newBrandFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_newBrandFocusGained

    private void barCode1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barCode1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barCode1ActionPerformed

    private void brandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandActionPerformed
        newBrand.setText("");
        if(brand.getSelectedIndex() == 1)
        jPanelBrand.setVisible(true);
        else
        jPanelBrand.setVisible(false);

        newBrand.setText("");
        try
        {
            if(brand.getItemCount() != 0)
            {
                if(brand.getSelectedIndex() == 0)
                {
                    brandFlag = false;
                    // jPanelNewVendor.setVisible(false);
                }
                else
                if(brand.getSelectedIndex() == 1)
                {
                    brandFlag = false;
                    jPanelBrand.setVisible(true);
                }
                else
                {
                    brandFlag = true;
                    jPanelBrand.setVisible(false);
                    //loadBrand();
                }
            }
        }
        catch(Exception e)
        {
        }
    }//GEN-LAST:event_brandActionPerformed

    private void itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemActionPerformed
        newItem.setText("");
        if(item.getSelectedIndex() == 1)
        jPanelItem.setVisible(true);
        else
        jPanelItem.setVisible(false);

        newItem.setText("");

        try
        {
            if(item.getItemCount() != 0)
            {
                if(item.getSelectedIndex() == 0)
                {
                    itemFlag = false;
                    // jPanelNewVendor.setVisible(false);
                }
                else
                if(item.getSelectedIndex() == 1)
                {
                    itemFlag = false;
                    jPanelItem.setVisible(true);
                }
                else
                {
                    itemFlag = true;
                    jPanelItem.setVisible(false);
                    loadItem();
                }
            }
        }
        catch(Exception e)
        {
        }
    }//GEN-LAST:event_itemActionPerformed

    private void purchaseItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseItemActionPerformed
        // TODO add your handling code here:
       // loadItemBrand();
        
        newItem.setText("");
        if(item.getSelectedIndex() == 1)
        jPanelPurItem.setVisible(true);
        else
        jPanelPurItem.setVisible(false);

        newItem.setText("");

        try
        {
            if(purchaseItem.getItemCount() != 0)
            {
                if(purchaseItem.getSelectedIndex() == 0)
                {
                    purItemFlag = false;
                    // jPanelNewVendor.setVisible(false);
                }
                else
                if(purchaseItem.getSelectedIndex() == 1)
                {
                    purItemFlag = false;
                    jPanelPurItem.setVisible(true);
                }
                else
                {
                    purItemFlag = true;
                    jPanelPurItem.setVisible(false);
                      loadItemBrand();
                }
            }
        }
        catch(Exception e)
        {
        }
        
        
        
        
    }//GEN-LAST:event_purchaseItemActionPerformed

    private void unitPrice1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitPrice1KeyReleased
        if(!(quantity.getText().trim().isEmpty()))
        {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            float quantity = Float.parseFloat(this.quantity.getText());
            float unitPrice1 = Float.parseFloat(this.unitPrice1.getText());

            float total = getUnitPrice(unitPrice1, quantity);
            this.total.setText(decimalFormat.format(total));
        }
        else
        total.setText("0.00");

    }//GEN-LAST:event_unitPrice1KeyReleased

    private void unitPrice1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitPrice1FocusLost
        if(unitPrice1.getText().trim().isEmpty())
        {
            unitPrice1.setText("0.00");
            total.setText("0.00");
        }
        if(Float.parseFloat(unitPrice1.getText()) == 0)
        total.setText("0.00");
    }//GEN-LAST:event_unitPrice1FocusLost

    private void unitPrice1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitPrice1FocusGained
        unitPrice1.selectAll();
    }//GEN-LAST:event_unitPrice1FocusGained

    private void unit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unit1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unit1ActionPerformed

    private void quantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityKeyReleased
        if(!(quantity.getText().trim().isEmpty()))
        {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            float quantity = Float.parseFloat(this.quantity.getText());
            float total = Float.parseFloat(this.total.getText());
            //   this.unitPrice1.setText(decimalFormat.format(unitPrice1));
        }
        else
        unitPrice1.setText("0.00");
    }//GEN-LAST:event_quantityKeyReleased

    private void quantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFocusLost
        if(quantity.getText().trim().isEmpty())
        quantity.setText("0.00");
    }//GEN-LAST:event_quantityFocusLost

    private void quantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFocusGained
        quantity.selectAll();
    }//GEN-LAST:event_quantityFocusGained

    private void weight1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weight1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_weight1KeyReleased

    private void weight1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weight1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_weight1FocusLost

    private void weight1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weight1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_weight1FocusGained

    private void totalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalKeyReleased
        if(!(total.getText().trim().isEmpty()))
        {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            float quantity = Float.parseFloat(this.quantity.getText());
            float total = Float.parseFloat(this.total.getText());

            //  float unitPrice = getUnitPrice(total, quantity);
            this.unitPrice1.setText(decimalFormat.format(unitPrice1));
        }
        else
        unitPrice1.setText("0.00");
    }//GEN-LAST:event_totalKeyReleased

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalActionPerformed

    private void totalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalFocusLost
        if(total.getText().trim().isEmpty())
        {
            total.setText("0.00");
            unitPrice1.setText("0.00");
        }
        if(Float.parseFloat(total.getText()) == 0)
        unitPrice1.setText("0.00");
    }//GEN-LAST:event_totalFocusLost

    private void totalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalFocusGained
        total.selectAll();
    }//GEN-LAST:event_totalFocusGained

    private void barCodeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barCodeSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barCodeSearchActionPerformed

    private void barCodeSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barCodeSearchKeyPressed

    }//GEN-LAST:event_barCodeSearchKeyPressed

    private void barCodeSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barCodeSearchKeyReleased
    ItemMaster itemMaster = new ItemMaster();
    String barCode = this.barCode1.getText().trim();
        if (!(barCode1.getText().trim().isEmpty())) {
            // itemMaster.setName(item.getText().trim());
            itemMaster.setBarCode(barCode1.getText().trim());
            //getTotalBarCode();
            if (jTable1.getRowCount() > 0) {
                boolean notfound = true;
                for (int i = 0; i < jTable1.getRowCount(); i++) {

                    String barcode = jTable1.getValueAt(i, 3).toString();

                    BigDecimal unitPrice = new BigDecimal(jTable1.getValueAt(i, 6).toString());
                    BigDecimal quantity = new BigDecimal(jTable1.getValueAt(i, 7).toString());
                    BigDecimal total = new BigDecimal(jTable1.getValueAt(i, 8).toString());
                    if (itemMaster.getBarCode().equalsIgnoreCase(barcode)) {
                        jTable1.setValueAt((Integer.parseInt(jTable1.getValueAt(i, 7).toString().trim()) + 1), i, 7);
                        jTable1.setValueAt((new BigDecimal(jTable1.getValueAt(i, 8).toString().trim()).add(new BigDecimal(jTable1.getValueAt(i, 6).toString()))), i, 8);
                        barCode1.setText("");
                        notfound = false;
                    }
                }
                if(notfound) {
                      loadBarcodeItem(itemMaster);  
                    }
            } else {
                loadBarcodeItem(itemMaster);
            }
            getTotal1();
        }
    }//GEN-LAST:event_barCodeSearchKeyReleased

    private void barCodeSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barCodeSearchKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || Character.isDigit(c) || c == ',' || c == '.' || c == KeyEvent.VK_SPACE || c == '-' || c == ':')) {
            evt.consume();
        }
    }//GEN-LAST:event_barCodeSearchKeyTyped

    private void barcodeFlagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeFlagActionPerformed
       if (barcodeFlag.isSelected()) {
            jPanelNewBaracode.setVisible(false);
            add.setVisible(false);
            jPanelSearch.setVisible(true);

        } else {
            add.setVisible(true);
            jPanelNewBaracode.setVisible(true);
            jPanelSearch.setVisible(false);
       }
    }//GEN-LAST:event_barcodeFlagActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddNewItemsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddNewItemsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddNewItemsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddNewItemsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddNewItemsPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField amount;
    private javax.swing.JTextField barCode1;
    private javax.swing.JTextField barCodeSearch;
    private javax.swing.JRadioButton barcodeFlag;
    private javax.swing.JComboBox<String> brand;
    private javax.swing.JButton cancel;
    private javax.swing.JFormattedTextField discount;
    private com.toedter.calendar.JDateChooser expDateText;
    private javax.swing.JTextField finalAmountPaid;
    private javax.swing.JComboBox<String> item;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBoxDiscount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanelBrand;
    private javax.swing.JPanel jPanelDiscount;
    private javax.swing.JPanel jPanelItem;
    private javax.swing.JPanel jPanelNewBaracode;
    private javax.swing.JPanel jPanelPurItem;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JDateChooser mfgDateText;
    private javax.swing.JTextField newBrand;
    private javax.swing.JTextField newItem;
    private javax.swing.JTextField newPurchaseItem;
    private com.toedter.calendar.JDateChooser purchaseDate;
    private javax.swing.JComboBox<String> purchaseItem;
    private javax.swing.JFormattedTextField quantity;
    private javax.swing.JButton remove;
    private javax.swing.JButton save;
    private javax.swing.JFormattedTextField total;
    private javax.swing.JComboBox<String> unit1;
    private javax.swing.JTextField unitPrice1;
    private javax.swing.JFormattedTextField weight1;
    // End of variables declaration//GEN-END:variables

     public void loadBarcodeItem(ItemMaster itemMaster) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        // defaultTableModel.setRowCount(0);
        List<ItemMaster> list = new ArrayList<>();
        int quantity = 1;

        ItemQuery itemQuery = new ItemQuery();
        list = itemQuery.getItemByBarCode(itemMaster);
        if (!list.isEmpty()) {
            ItemMaster ia = (ItemMaster) list.get(0);

            defaultTableModel.addRow(new Object[]{ia.getName(),ia.getName(), ia.getBrand(), ia.getBarCode(), ia.getWeight(), ia.getUnit(), ia.getUnitPrice(), quantity, ia.getUnitPrice().multiply(new BigDecimal(quantity)), ia.getEfgDate(), ia.getExpDate()});
            // defaultTableModel.addRow(new Object[]{ia.getItemMaster().getName(),ia.getItemMaster().getBrand(), ia.getItemMaster().getBarCode(),ia.getItemMaster().getWeight(), ia.getItemMaster().getUnit(),ia.getItemMaster().getUnitPrice(),ia.getAvailability(),ia.getItemMaster().getTotalAmount(),ia.getItemMaster().getEfgDate(),ia.getItemMaster().getExpDate()});
        }
        jTable1.setModel(defaultTableModel);
        barCode1.setText("");
    }

      private void getTotal1() {
        int i = 0;
        float sum = 0;
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");

        while (i < jTable1.getRowCount()) {
            sum = sum + Float.parseFloat(jTable1.getValueAt(i, 7).toString());
            i++;
        }
       // total.setText(decimalFormat.format(sum));
        amount.setText(decimalFormat.format(sum));
    }

     
     
    private float getUnitPrice(float unitPrice1, float quantity) {
    float total = 0;
        try
        {
           if(quantity == 0)
           throw new RuntimeException();
           total = unitPrice1 * quantity;
            
        }
        catch(Exception e)
        {
            this.total.setText("0.00");
        }
        return total; 
    }
    
     private void loadItem() {
        ItemMaster itemMaster = new ItemMaster();
        ItemQuery itemQuery = new ItemQuery();

        if (itemFlag) {
            itemMaster.setName(item.getSelectedItem().toString());
        }

        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) item.getModel();

        List<ItemMaster> list = itemQuery.getItemDetails1(itemMaster);
        if (!(itemFlag)) {

            defaultComboBoxModel.removeAllElements();

            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("Add New");

            for (ItemMaster im : list) {
                defaultComboBoxModel.addElement(im.getName());
            }
        } else {
            for (ItemMaster im : list) {
                item.setSelectedItem(im.getName());
            }
        }
        item.setModel(defaultComboBoxModel);
    }
    
     private void loadPurchaseItem() {
        PurchaseMaster purchaseMaster = new PurchaseMaster();
        PurchaseMasterQuery itemQuery = new PurchaseMasterQuery();

        if (itemFlag) {
            purchaseMaster.setName(purchaseItem.getSelectedItem().toString());
        }

        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) purchaseItem.getModel();

        List<PurchaseMaster> list = itemQuery.getItemDetails1(purchaseMaster);
        if (!(itemFlag)) {

            defaultComboBoxModel.removeAllElements();

            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("Add New");

            for (PurchaseMaster im : list) {
                defaultComboBoxModel.addElement(im.getName());
            }
        } else {
            for (PurchaseMaster im : list) {
                purchaseItem.setSelectedItem(im.getName());
            }
        }
        purchaseItem.setModel(defaultComboBoxModel);
    }
    
     
     private void loadBrand() {
        ItemMaster itemMaster = new ItemMaster();
        ItemQuery itemQuery = new ItemQuery();

        if (brandFlag) {
            itemMaster.setName(brand.getSelectedItem().toString());
        }

        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) brand.getModel();

        List<ItemMaster> list = itemQuery.getBrandDetails1(itemMaster);
        if (!(brandFlag)) {

            defaultComboBoxModel.removeAllElements();

            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("Add New");

            for (ItemMaster im : list) {
                defaultComboBoxModel.addElement(im.getBrand());
            }
        } else {
            for (ItemMaster im : list) {
                brand.setSelectedItem(im.getBrand());
            }
        }
        brand.setModel(defaultComboBoxModel);
    }

     private void loadItemBrand() {
        PurchaseMaster purchaseMaster = new PurchaseMaster();
        //ItemMaster itemMaster = new ItemMaster();
        PurchaseMasterQuery itemQuery = new PurchaseMasterQuery();

        if (purchaseItem.getSelectedItem()=="--Select--" || purchaseItem.getSelectedItem()=="Add New" || purchaseItem.getSelectedItem()==null) {
            purchaseMaster.setName(null);
            //itemMaster.setName(brand.getSelectedItem().toString());
        }else
            purchaseMaster.setName(purchaseItem.getSelectedItem().toString());

        DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) brand.getModel();

        List<PurchaseMaster> list = itemQuery.getBrandDetails1(purchaseMaster);
        if (purchaseItem.getSelectedItem()!="--Select--") {

            defaultComboBoxModel.removeAllElements();

            defaultComboBoxModel.addElement("--Select--");
            defaultComboBoxModel.addElement("Add New");

            for (PurchaseMaster im : list) {
                defaultComboBoxModel.addElement(im.getBrand());
            }
        } else {
            for (PurchaseMaster im : list) {
                brand.setSelectedItem(im.getBrand());
            }
        }
        brand.setModel(defaultComboBoxModel);
    }

    private void addToTable() throws Exception {
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        DecimalFormat intFormat = new DecimalFormat("#0");
        String PurchaseitemName = purchaseItem.getSelectedItem().toString();
        String itemName = item.getSelectedItem().toString();
        String brandName = brand.getSelectedItem().toString();
        String barCode = this.barCode1.getText().trim();
        String unitName = unit1.getSelectedItem().toString();
        /**
         * *********************manifacturing and Expairy Date Add to jTAble in
         * save *******************
         */
        Date mfgDate = mfgDateText.getDate();
        Date expDate = expDateText.getDate();
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        String mfg = dateFormat.format(mfgDate);
        String exp = dateFormat.format(expDate);

        if (itemName.equalsIgnoreCase("--select--")) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
            item.requestFocus();
            return;
        }
        if (PurchaseitemName.equalsIgnoreCase("--select--")) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Purchase Item name"), "Error Message", JOptionPane.ERROR_MESSAGE);
            purchaseItem.requestFocus();
            return;
        }
//        if (itemName.equalsIgnoreCase("add new")) {
//            if (newItem.getText().trim().isEmpty()) {
//                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
//                newItem.requestFocus();
//                return;
//            } else {
//                
//                ItemQuery itemQuery = new ItemQuery();
//                ItemMaster itemMaster = new ItemMaster();
//                itemMaster.setBarCode(barCode1.getText().trim());
//                List<ItemMaster> itemList = itemQuery.checkItem(itemMaster);
//                    if (itemList.isEmpty()) {
//                        itemQuery.insertItem(itemMaster);
//                    } else {
////                        
//                            return;
//                        } 
//                
//                itemName = newItem.getText().trim();
//            }
     /*   if (brandName.equalsIgnoreCase("--select--")) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Brand"), "Error Message", JOptionPane.ERROR_MESSAGE);
            brand.requestFocus();
            return;
        }
        if (brandName.equalsIgnoreCase("add new")) {
            if (newBrand.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the brand name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
                newBrand.requestFocus();
                return;
            } else {
                brandName = newBrand.getText().trim();
            }
        }
        if (weight1.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the weight"), "Error Message", JOptionPane.ERROR_MESSAGE);
            weight1.requestFocus();
            return;
        }
        
         if (unitName.equalsIgnoreCase("--select--")) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Unit"), "Error Message", JOptionPane.ERROR_MESSAGE);
            unit1.requestFocus();
            return;
        }
         
        unitName = this.unit1.getSelectedItem().toString();
        
        if (quantity.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
            quantity.requestFocus();
            return;
        }
        if (unitPrice1.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
            unitPrice1.requestFocus();
            return;
        }
*/
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
//        String name = this.newItem.getText().trim();
//        String brand = this.newBrand.getText().trim();
        float quantity = Float.parseFloat(this.quantity.getText().trim());
        float weight = Float.parseFloat(this.weight1.getText().trim());
        float unitPrice = Float.parseFloat(this.unitPrice1.getText().trim());
        float unitPrice1 = Float.parseFloat(this.unitPrice1.getText());
        float total = getUnitPrice(unitPrice1, quantity);
       
        
        if (itemName.equalsIgnoreCase("--select--")) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
            item.requestFocus();
            return;
        }
        if (itemName.equalsIgnoreCase("add new")) {
            
            if (newItem.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
                newItem.requestFocus();
                return;
            } else {
                
                ItemQuery itemQuery = new ItemQuery();
                ItemMaster itemMaster = new ItemMaster();
                itemMaster.setBarCode(barCode1.getText().trim());
                List<ItemMaster> itemList = itemQuery.checkBarcode(itemMaster);
                    if (!itemList.isEmpty()) {
                       // itemQuery.insertItem(itemMaster);
                       JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the unique barCode Id of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
                      barCode1.requestFocus();
                        return;
                    } 
                
                itemName = newItem.getText().trim();
            }
            }
            if (brandName.equalsIgnoreCase("add new")) {
                if (newBrand.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
                    newBrand.requestFocus();
                    return;
                } else {

                    ItemQuery itemQuery = new ItemQuery();
                    ItemMaster itemMaster = new ItemMaster();
                    itemMaster.setBarCode(barCode1.getText().trim());
                    itemMaster.setBarCode(newBrand.getText().trim());
                    List<ItemMaster> itemList = itemQuery.checkBrand(itemMaster);
                        if (!itemList.isEmpty()) {
                           // itemQuery.insertItem(itemMaster);
                           JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the unique Brand Id of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
                          newBrand.requestFocus();
                            return;
                        } 

                    brandName = newBrand.getText().trim();
                }
            }
            if (PurchaseitemName.equalsIgnoreCase("add new")) {
                if (newPurchaseItem.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Purchase name of the Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
                    newPurchaseItem.requestFocus();
                    return;
                } else {

                    PurchaseMasterQuery itemQuery = new PurchaseMasterQuery();
                    PurchaseMaster itemMaster = new PurchaseMaster();
                    itemMaster.setName(PurchaseitemName);
                    itemMaster.setBrand(brandName);
                    List<PurchaseMaster> itemList = itemQuery.checkItem(itemMaster);
                        if (!itemList.isEmpty()) {
                           // itemQuery.insertItem(itemMaster);
                           JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the unique name of Purchase Item"), "Error Message", JOptionPane.ERROR_MESSAGE);
                          purchaseItem.requestFocus();
                            return;
                        } 

                    PurchaseitemName = newPurchaseItem.getText().trim();
                }
            }
            
//            if (brandName.equalsIgnoreCase("--select--")) {
//            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select an Brand"), "Error Message", JOptionPane.ERROR_MESSAGE);
//            brand.requestFocus();
//            return;
//        }
            
   
        defaultTableModel.addRow(new Object[]{PurchaseitemName,itemName, brandName,barCode,weight,unitName, unitPrice, quantity ,total, mfg, exp});   
        jTable1.setModel(defaultTableModel);
        //getTotal();
        clear();
        item.requestFocus();  
    }
           
 
    
    
    private void clear() {
        item.setSelectedIndex(0);
        brand.setSelectedIndex(0);
        barCode1.setText("00");
        weight1.setText("00");
        unit1.setSelectedIndex(0);
        quantity.setText("00");
        unitPrice1.setText("0.00");
        total.setText("0.00");
        mfgDateText.setDate(null);
        expDateText.setDate(null);
      
        discount.setText("0.00");
       
      
    }
    
   private void save() {
      try {
            boolean flag = false;   
            Expenses expenses = new Expenses();
            ExpensesQuery expensesQuery = new ExpensesQuery();

            if (jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Nothing to save"), "Error message", JOptionPane.ERROR_MESSAGE);
                return;
            }
          

            if (jCheckBoxDiscount.isSelected()) {
                if (discount.getText().trim().isEmpty() || Float.parseFloat(discount.getText()) == 0) {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter the Discount Amount"), "Error message", JOptionPane.ERROR_MESSAGE);
                    discount.requestFocus();
                    return;
                }

                if (Float.parseFloat(discount.getText()) > Float.parseFloat(amount.getText())) {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Discount can't be greater than Bill Amount"), "Error message", JOptionPane.ERROR_MESSAGE);
                    discount.requestFocus();
                    return;
                }
            }
           
            int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of making this Purchase?"));

            if (confirm == JOptionPane.YES_OPTION) {
                BigDecimal balance;
                String status = "";

               
                ItemMaster itemMaster = new ItemMaster();
                ItemAvailability itemAvailability = new ItemAvailability();
                StockDetailsPurchase stockDetails = new StockDetailsPurchase();

                ItemQuery itemQuery = new ItemQuery();
                StockDetailsQuery stockDetailsQuery = new StockDetailsQuery();
                ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();

                
                String purchaseItemName = "";
                String itemName = "";
                String brandName = "";
                String barCode = "";
                BigDecimal weight;
                String unitName = "";
                BigDecimal quantity;
                BigDecimal unitPrice;
                BigDecimal total;
                Date mfg;
                Date exp;

                int i = 0;
                int count = 0;

                while (i < jTable1.getRowCount()) {
                    purchaseItemName = jTable1.getValueAt(i, 0).toString();
                    itemName = jTable1.getValueAt(i, 1).toString();
                    brandName = jTable1.getValueAt(i, 2).toString();
                    barCode = jTable1.getValueAt(i, 3).toString();
                    weight = new BigDecimal(jTable1.getValueAt(i, 4).toString());
                    unitName = jTable1.getValueAt(i, 5).toString();
                    unitPrice = new BigDecimal(jTable1.getValueAt(i, 6).toString());
                    quantity = new BigDecimal(jTable1.getValueAt(i, 7).toString());
                    total = new BigDecimal(jTable1.getValueAt(i, 8).toString());
                    mfg = new Date(jTable1.getValueAt(i, 9).toString());
                    exp = new Date(jTable1.getValueAt(i, 10).toString());

                    itemMaster.setName(itemName);
                    itemMaster.setBrand(brandName);
                    itemMaster.setBarCode(barCode);
                    itemMaster.setWeight(weight);
                    itemMaster.setUnit(unitName);
                    itemMaster.setUnitPrice(unitPrice);
                    itemMaster.setQuantity(quantity);
                    itemMaster.setTotalAmount(total);
                    itemMaster.setEfgDate(mfg);
                    itemMaster.setExpDate(exp);
                    
                    List<ItemMaster> itemList = itemQuery.checkBarcode(itemMaster);
                    if (itemList.isEmpty()) {
                        itemQuery.insertItem(itemMaster);
                    } else {
                        for (ItemMaster im : itemList) {
                            itemMaster.setId(im.getId());
                        }
                        
                    }
            
                    BigDecimal thresholdPercent = new BigDecimal(0.25);
                    itemAvailability.setItemMaster(itemMaster);
                    itemAvailability.setAvailability(quantity);
                    itemAvailability.setThreshold(thresholdPercent.multiply(quantity));

                    List<ItemAvailability> itemAvailabilityList = itemAvailabilityQuery.checkItem(itemAvailability);

                    if (itemAvailabilityList.isEmpty()) {
                        
                        itemAvailabilityQuery.insertIntoItemAvailability(itemAvailability);

                        
                    } else {
                        for (ItemAvailability ia : itemAvailabilityList) {
                            itemAvailability.setId(ia.getId());
                            itemAvailability.setAvailability(ia.getAvailability().add(quantity));
                            itemAvailability.setThreshold(thresholdPercent.multiply(ia.getAvailability().add(quantity)));

                            itemAvailabilityQuery.updateItemAvailability(itemAvailability);
                        }
                    }
                    
                    ItemAvailabilityPurchase itemAvailabilityPurchase = new ItemAvailabilityPurchase();
                    ItemAvailabilityPurchaseQuery itemAvailabilityPurchaseQuery = new ItemAvailabilityPurchaseQuery();

                    PurchaseMaster purchaseMaster = new PurchaseMaster();
                    purchaseMaster.setName(purchaseItemName);
                    purchaseMaster.setBrand(brandName);
                    itemAvailabilityPurchase.setPurchaseMaster(purchaseMaster);
                    List<Object[]> list1 = itemAvailabilityPurchaseQuery.getWeightAvailability(itemAvailabilityPurchase);
                    Object[] item1=list1.get(0);
                    ItemAvailabilityPurchase itmavl = (ItemAvailabilityPurchase)item1[0];

                 
                    itmavl.setAvailability(itmavl.getAvailability().subtract(quantity.multiply(weight)));
                    itemAvailabilityPurchaseQuery.updateItemAvailability(itmavl);

                    
                    i++;
                }

                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Stock added successfully"));

                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
                defaultTableModel.setRowCount(0);
                jTable1.setModel(defaultTableModel);
//                getTotal();
//                clear();
 
                loadItem();
                loadItemBrand();
//                loadBeginningCash();
//                loadExpenses();
//                loadCash();
               
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Stock Details failed to save"), "Error Mesage", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    private void remove() {
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
            defaultTableModel.removeRow(jTable1.getSelectedRow());
            jTable1.setModel(defaultTableModel);
            //getTotal();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the row you want to remove"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
  
}