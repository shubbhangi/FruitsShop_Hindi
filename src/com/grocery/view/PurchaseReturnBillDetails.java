/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.ItemAvailability;
import com.grocery.bean.ItemMaster;
import com.grocery.bean.PurchaseReturn;
import com.grocery.bean.PurchaseReturnDetails;
import com.grocery.bean.SaleDetails;
import com.grocery.bean.SaleMaster;
import com.grocery.bean.StockDetails;
import com.grocery.bean.VendorBillMaster;
import com.grocery.bean.VendorMaster;
import com.grocery.query.ItemAvailabilityQuery;
import com.grocery.query.PurchaseReturnDetailsQuery;
import com.grocery.query.PurchaseReturnQuery;
import com.grocery.query.SaleDetailsQuery;
import com.grocery.query.StockDetailsQuery;
import com.grocery.query.VendorBillMasterQuery;
import com.grocery.query.VendorQuery;
import com.grocery.read.MessageFormat;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class PurchaseReturnBillDetails extends javax.swing.JInternalFrame {

    private boolean flag;
    private int billId;
    private Date date = new Date();
    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    
    public PurchaseReturnBillDetails(int id, boolean flag) {
        initComponents();
        this.flag = flag;
        this.billId = id;
        returnDate.setDate(date);
        if(!flag)
            jLabelPurchased.setText("Sold Items");
        
        jTable1.getTableHeader().setFont(new Font("Arial Unicode MS", Font.BOLD, 11));
        jTable2.getTableHeader().setFont(new Font("Arial Unicode MS", Font.BOLD, 11));
        
        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        
        jTable1.getColumnModel().getColumn(1).setMinWidth(0);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(0);
        
        jTable2.getColumnModel().getColumn(0).setMinWidth(0);
        jTable2.getColumnModel().getColumn(0).setMaxWidth(0);
        
        jTable2.getColumnModel().getColumn(1).setMinWidth(0);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(0);
        
        jTable2.getColumnModel().getColumn(8).setMinWidth(0);
        jTable2.getColumnModel().getColumn(8).setMaxWidth(0);  
        
//        jTable2.getColumnModel().getColumn(9).setMinWidth(0);
//        jTable2.getColumnModel().getColumn(9).setMaxWidth(0); 
//        
//        jTable2.getColumnModel().getColumn(10).setMinWidth(0);
//        jTable2.getColumnModel().getColumn(10).setMaxWidth(0);   
        
        loadTable();
        getTotal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabelPurchased = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        add = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        remove = new javax.swing.JButton();
        save = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        remark = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        returnDate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabelPurchased.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabelPurchased.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelPurchased.setText("खरीदे गए आइटम:");
        jLabelPurchased.setToolTipText("Purchased Items:");

        jTable1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "विवरण नंबर", "सामान नंबरी", "वस्तु का नाम", "यूनिट मूल्य", "मात्रा", "जीएसटी %", "जीएसटी राशि", "अंतिम कुल", "उपलब्ध मात्रा", "निर्माण तिथि", "समाप्ति तिथि"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel17.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("सामान वापस करे:");
        jLabel17.setToolTipText("Return Items:");

        jTable2.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "विवरण नंबर", "सामान नंबर", "वस्तु का नाम", "यूनिट मूल्य", "मात्रा", "जीएसटी %", "जीएसटी राशि", "अंतिम राशी", "Index", "निर्माण तिथि", "समाप्ति तिथि"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jLabel2.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel2.setText("कुल:");
        jLabel2.setToolTipText("Total:");

        total.setEditable(false);
        total.setBackground(new java.awt.Color(255, 255, 153));
        total.setFont(new java.awt.Font("Arial Unicode MS", 1, 10)); // NOI18N
        total.setForeground(new java.awt.Color(255, 0, 0));
        total.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        add.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        add.setText("वापसी");
        add.setToolTipText("Return");
        add.setMnemonic(KeyEvent.VK_R);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        remove.setMnemonic(KeyEvent.VK_A);
        remove.setText(" वस्तु को रद्द करो");
        remove.setToolTipText("Cancel Item");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        save.setFont(new java.awt.Font("Arial Unicode MS", 1, 11)); // NOI18N
        save.setMnemonic(KeyEvent.VK_S);
        save.setText("सहेजें");
        save.setToolTipText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        cancel.setMnemonic(KeyEvent.VK_C);
        cancel.setText("रद्द करना");
        cancel.setToolTipText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel4.setText("टिप्पणी:");
        jLabel4.setToolTipText("Remark:");

        remark.setEditable(false);
        remark.setBackground(new java.awt.Color(255, 255, 153));
        remark.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        remark.setForeground(new java.awt.Color(255, 0, 0));
        remark.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        jLabel3.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("वापसी की तिथि:");
        jLabel3.setToolTipText("Return Date:");

        returnDate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("बिल का विवरण");
        jLabel1.setToolTipText("Bill Details");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(returnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(returnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(396, 396, 396)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(465, 465, 465)
                                .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(211, 211, 211))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)))
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelPurchased, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator7)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1072, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(431, 431, 431)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(remark, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))
                    .addComponent(jScrollPane2))
                .addGap(0, 22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelPurchased, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(remark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1161, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        cancel();
    }//GEN-LAST:event_cancelActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        add();
    }//GEN-LAST:event_addActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            add();
    }//GEN-LAST:event_jTable1KeyPressed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        remove();
    }//GEN-LAST:event_removeActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        save();
    }//GEN-LAST:event_saveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton cancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelPurchased;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField remark;
    private javax.swing.JButton remove;
    private com.toedter.calendar.JDateChooser returnDate;
    private javax.swing.JButton save;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

    private void cancel() 
    {
        int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of Closing this form?"));
        if(confirm == JOptionPane.YES_OPTION)
            dispose();
    }

    private void loadTable() 
    {
        
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable1.getModel();
        defaultTableModel.setRowCount(0);
        if(flag)
        {
            VendorBillMaster vendorBillMaster = new VendorBillMaster();
            vendorBillMaster.setId(billId);
            
            StockDetails stockDetails = new StockDetails();
            stockDetails.setVendorBillMaster(vendorBillMaster);
            
            StockDetailsQuery stockDetailsQuery = new StockDetailsQuery();
            
            List<Object[]> list = stockDetailsQuery.getPurchase(stockDetails);
            
            for(Object[] object: list)
            {
                StockDetails sd = (StockDetails)object[0];
                ItemAvailability ia = (ItemAvailability)object[4];  
                defaultTableModel.addRow(new Object[]{sd.getId(), sd.getItemMaster().getId(), sd.getItemMaster().getName(), sd.getUnitPrice(), sd.getQuantity(), sd.getGstPercent(), sd.getGstAmount(), sd.getFinalTotal(), ia.getAvailability(),ia.getItemMaster().getEfgDate(),ia.getItemMaster().getExpDate()});
                remark.setText(sd.getVendorBillMaster().getRemark());
            }
            
            jTable1.setModel(defaultTableModel);
        }
    }

    private void getTotal() 
    {
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        
        float sum = 0;
        int i = 0;
        
        while(i < jTable2.getRowCount())
        {
            sum = sum + Float.parseFloat(jTable2.getValueAt(i, 7).toString());
            i++;
        }
        
        total.setText(decimalFormat.format(sum));
    }

    private void add() 
    {
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable2.getModel();
        DefaultTableModel defaultTableModel1 = (DefaultTableModel)jTable1.getModel();
        try
        {
            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            DecimalFormat decimalFormat1 = new DecimalFormat("#0.00");
            
            int index = jTable1.getSelectedRow();
            int detailsId = Integer.parseInt(jTable1.getValueAt(index, 0).toString());
            int itemId = Integer.parseInt(jTable1.getValueAt(index, 1).toString());
            String itemName = jTable1.getValueAt(index, 2).toString();
            float unitPrice = Float.parseFloat(jTable1.getValueAt(index, 3).toString());
            float quantity = Float.parseFloat(jTable1.getValueAt(index, 4).toString());
            float gstPercent = Float.parseFloat(jTable1.getValueAt(index, 5).toString());
            float gstAmount = Float.parseFloat(jTable1.getValueAt(index, 6).toString());
            float finalTotal = Float.parseFloat(jTable1.getValueAt(index, 7).toString());
            float availableQuantity = Float.parseFloat(jTable1.getValueAt(index, 8).toString());
           
            String mfg = dateFormat.format(jTable1.getValueAt(index, 9).toString());
            String exp = dateFormat.format(jTable1.getValueAt(index, 10).toString());
 
            float total = 0;
            
            float returnedQuantity = 0;
            float newTotal = 0;
            float newFinalTotal = 0;
            float newGstAmount = 0;
               
            JFrame frame = new JFrame("Input");
            
            try
            {
                returnedQuantity = Float.parseFloat(JOptionPane.showInputDialog(frame, "<HTML><FONT color=\"#000000\">Enter the quantity of: <strong><U>" + itemName + "</U></strong><br>Purchased Quantity = <strong><U>" + decimalFormat.format(quantity) + "</U></strong><br>Available Quantity = <strong><U>" + decimalFormat.format(availableQuantity) + "</FONT></HTML>" ));
                
                if(returnedQuantity > quantity)
                {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Returned Quantity can't be greater than Purchased Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(returnedQuantity > availableQuantity)
                {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Returned Quantity can't be greater than Available Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                newTotal = getTotal(unitPrice, returnedQuantity);
                newGstAmount = getGstAmount(gstPercent, newTotal);
                newFinalTotal = getFinalAmount(newGstAmount, newTotal);
                
                defaultTableModel.addRow(new Object[]{detailsId, itemId, itemName, unitPrice, decimalFormat.format(returnedQuantity), gstPercent, newGstAmount, decimalFormat1.format(newFinalTotal),mfg ,exp,index});
                
                jTable2.setModel(defaultTableModel);
                getTotal();
                
                quantity = quantity - returnedQuantity;
                total = getTotal(unitPrice, quantity);
                gstAmount = getGstAmount(gstPercent, total);
                finalTotal = getFinalAmount(gstAmount, total);
                
                defaultTableModel1.setValueAt(decimalFormat.format(quantity), index, 4);
                defaultTableModel1.setValueAt(decimalFormat1.format(gstAmount), index, 6);
                defaultTableModel1.setValueAt(decimalFormat1.format(finalTotal), index, 7);
                defaultTableModel1.setValueAt(decimalFormat.format(availableQuantity - returnedQuantity), index, 8);
                 
                defaultTableModel.setValueAt(dateFormat.format(mfg), index, 9);
                defaultTableModel.setValueAt(dateFormat.format(exp), index, 10);
                jTable1.setModel(defaultTableModel1);  
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter numeric value"), "Error Message", JOptionPane.ERROR_MESSAGE);
            }
        } 
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to return"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private float getTotal(float unitPrice, float quantity)
    {
        return (unitPrice * quantity);
    }
    
    private float getGstAmount(float gstPercent, float amount)
    {
        return ((gstPercent * amount)/100);
    }
    
    private float getFinalAmount(float gstAmount, float total)
    {
        return(gstAmount + total);
    }

    private void remove() 
    {
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable2.getModel();
        DefaultTableModel defaultTableModel1 = (DefaultTableModel)jTable1.getModel();
        try
        {
            DecimalFormat decimalFormat = new DecimalFormat("#0.000");
            DecimalFormat decimalFormat1 = new DecimalFormat("#0.00");
            
            int index = jTable2.getSelectedRow();
            int detailsId = Integer.parseInt(jTable2.getValueAt(index, 0).toString());
            int itemId = Integer.parseInt(jTable2.getValueAt(index, 1).toString());
            String itemName = jTable2.getValueAt(index, 2).toString();
            float unitPrice = Float.parseFloat(jTable2.getValueAt(index, 3).toString());
            float quantity = Float.parseFloat(jTable2.getValueAt(index, 4).toString());
            float gstPercent = Float.parseFloat(jTable2.getValueAt(index, 5).toString());
            float gstAmount = Float.parseFloat(jTable2.getValueAt(index, 6).toString());
            float finalTotal = Float.parseFloat(jTable2.getValueAt(index, 7).toString());
               
            int purchaseTableRow = Integer.parseInt(jTable2.getValueAt(index, 8).toString());
            
            String mfg = dateFormat.format(jTable2.getValueAt(index, 9).toString());
            String exp = dateFormat.format(jTable2.getValueAt(index, 10).toString());
           
            float total = 0;
            float newGstAmount = 0;
            float newFinalTotal = 0;
            
            float newQuantity = Float.parseFloat(jTable1.getValueAt(purchaseTableRow, 4).toString()) + quantity;
            float newAvailability = Float.parseFloat(jTable1.getValueAt(purchaseTableRow, 8).toString()) + quantity;
            total = getTotal(unitPrice, newQuantity);
            newGstAmount = getGstAmount(gstPercent, total);
            newFinalTotal = getFinalAmount(newGstAmount, total);
            
            
            defaultTableModel1.setValueAt(decimalFormat.format(newQuantity), purchaseTableRow, 4);
            defaultTableModel1.setValueAt(decimalFormat1.format(newGstAmount), purchaseTableRow, 6);
            defaultTableModel1.setValueAt(decimalFormat1.format(newFinalTotal), purchaseTableRow, 7);
            defaultTableModel1.setValueAt(decimalFormat.format(newAvailability), purchaseTableRow, 8);
            
//            defaultTableModel.setValueAt(dateFormat.format(mfg), purchaseTableRow, 9);
//            defaultTableModel.setValueAt(dateFormat.format(exp), purchaseTableRow, 9);
//            
//            defaultTableModel.setValueAt(dateFormat.format(mfg), purchaseTableRow, 10);
//            defaultTableModel.setValueAt(dateFormat.format(exp), purchaseTableRow, 10);
            
            jTable1.setModel(defaultTableModel1);
            
            defaultTableModel.removeRow(index);
            jTable2.setModel(defaultTableModel);
            getTotal();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to remove"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void save() 
    {
        if(jTable2.getRowCount() == 0)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("No items returned"), "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of returning these stocks?"));
        if(confirm == JOptionPane.YES_OPTION)
        {
            if(flag)
            {
                VendorBillMaster vendorBillMaster = new VendorBillMaster();
                VendorBillMasterQuery vendorBillMasterQuery = new VendorBillMasterQuery();

                ItemMaster itemMaster = new ItemMaster();

                ItemAvailability itemAvailability = new ItemAvailability();
                ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();

                StockDetails stockDetails = new StockDetails();
                StockDetailsQuery stockDetailsQuery = new StockDetailsQuery();

                VendorMaster vendorMaster = new VendorMaster();
                VendorQuery vendorQuery = new VendorQuery();

                PurchaseReturn purchaseReturn = new PurchaseReturn();
                PurchaseReturnQuery purchaseReturnQuery = new PurchaseReturnQuery();

                PurchaseReturnDetails purchaseReturnDetails = new PurchaseReturnDetails();
                PurchaseReturnDetailsQuery purchaseReturnDetailsQuery = new PurchaseReturnDetailsQuery();
                
                vendorBillMaster.setId(billId);

                List<Object[]> vendorBillMasterList = vendorBillMasterQuery.getPurchase(vendorBillMaster);

                for(Object[]object: vendorBillMasterList)
                {
                    VendorBillMaster vbm = (VendorBillMaster)object[0];

                    vendorBillMaster.setBillAmount(vbm.getBillAmount());
                    vendorBillMaster.setFinalBillAmount(vbm.getFinalBillAmount());

                    vendorMaster.setId(vbm.getVendorMaster().getId());
                    vendorMaster.setBalance(vbm.getVendorMaster().getBalance());
                }
                
                vendorBillMaster.setBillAmount(vendorBillMaster.getBillAmount().subtract(new BigDecimal(total.getText())));
                vendorBillMaster.setFinalBillAmount(vendorBillMaster.getFinalBillAmount().subtract(new BigDecimal(total.getText())));
                
                vendorBillMasterQuery.updateVendorBillMaster(vendorBillMaster);
                
                vendorMaster.setBalance(vendorMaster.getBalance().subtract(new BigDecimal(total.getText())));
                vendorQuery.updateVendorBalance(vendorMaster);

                int i = 0;
                while(i < jTable1.getRowCount())
                {
                    int detailsId = Integer.parseInt(jTable1.getValueAt(i, 0).toString());
                    int itemId = Integer.parseInt(jTable1.getValueAt(i, 1).toString());
                    String itemName = jTable1.getValueAt(i, 2).toString();
                    float unitPrice = Float.parseFloat(jTable1.getValueAt(i, 3).toString());
                    float quantity = Float.parseFloat(jTable1.getValueAt(i, 4).toString());
                    float gstPercent = Float.parseFloat(jTable1.getValueAt(i, 5).toString());
                    float gstAmount = Float.parseFloat(jTable1.getValueAt(i, 6).toString());
                    float finalTotal = Float.parseFloat(jTable1.getValueAt(i, 7).toString());
                    float availableQuantity = Float.parseFloat(jTable1.getValueAt(i, 8).toString());

                   String mfg = dateFormat.format(jTable1.getValueAt(i, 9).toString());
                   String exp = dateFormat.format(jTable1.getValueAt(i, 10).toString());

                    stockDetails.setId(detailsId);
                    stockDetails.setQuantity(new BigDecimal(quantity));
                    stockDetails.setGstAmount(new BigDecimal(gstAmount));
                    stockDetails.setFinalTotal(new BigDecimal(finalTotal));

                    stockDetailsQuery.updateStockDetails(stockDetails);

                    itemMaster.setId(itemId);

                    itemAvailability.setItemMaster(itemMaster);

                    List<ItemAvailability> itemAvailabilityList = itemAvailabilityQuery.checkItem(itemAvailability);

                    for(ItemAvailability ia: itemAvailabilityList)
                        itemAvailability.setId(ia.getId());

                    itemAvailability.setAvailability(new BigDecimal(availableQuantity));
                    itemAvailability.setThreshold(new BigDecimal(getThreshold(availableQuantity)));

                    itemAvailabilityQuery.updateItemAvailability(itemAvailability);

                    i++;
                }
                
                i = 0;
                
                purchaseReturn.setDate(returnDate.getDate());
                purchaseReturn.setVendorBillMaster(vendorBillMaster);
                purchaseReturn.setAmount(new BigDecimal(total.getText()));
                
                purchaseReturnQuery.insertIntoPurchaseReturnDetails(purchaseReturn);
                
                while(i < jTable2.getRowCount())
                {
                    int detailsId = Integer.parseInt(jTable1.getValueAt(i, 0).toString());
                    int itemId = Integer.parseInt(jTable1.getValueAt(i, 1).toString());
                    String itemName = jTable1.getValueAt(i, 2).toString();
                    float unitPrice = Float.parseFloat(jTable1.getValueAt(i, 3).toString());
                    float quantity = Float.parseFloat(jTable1.getValueAt(i, 4).toString());
                    float gstPercent = Float.parseFloat(jTable1.getValueAt(i, 5).toString());
                    float gstAmount = Float.parseFloat(jTable1.getValueAt(i, 6).toString());
                    float finalTotal = Float.parseFloat(jTable1.getValueAt(i, 7).toString());
                    
                   String mfg = dateFormat.format(jTable1.getValueAt(i, 9).toString());
                   String exp = dateFormat.format(jTable1.getValueAt(i, 10).toString());

                    
                    itemMaster.setId(itemId);
                    
                    purchaseReturnDetails.setPurchaseReturn(purchaseReturn);
                    purchaseReturnDetails.setItemMaster(itemMaster);
                    purchaseReturnDetails.setUnitPrice(new BigDecimal(unitPrice));
                    purchaseReturnDetails.setQuantity(new BigDecimal(quantity));
                    purchaseReturnDetails.setGstPercent(new BigDecimal(gstPercent));
                    purchaseReturnDetails.setGstAmount(new BigDecimal(gstAmount));
                    purchaseReturnDetails.setFinalTotal(new BigDecimal(finalTotal));
                    
                    purchaseReturnDetailsQuery.insertIntoPurchaseReturnDetails(purchaseReturnDetails);

                    i++;
                }
                
            }
            
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Stocks returned successfully"));
            dispose();
        }
    }
    
    public float getThreshold(float quantity)
    {
        return (float)(0.25 * quantity);
    }
}
