/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.view;

import com.grocery.bean.CustomerDetails;
import com.grocery.bean.Expenses;
import com.grocery.bean.ItemAvailability;
import com.grocery.bean.ItemMaster;
import com.grocery.bean.SaleDetails;
import com.grocery.bean.SaleMaster;
import com.grocery.bean.SaleReturn;
import com.grocery.bean.SaleReturnDetails;
import com.grocery.query.BeginningCashQuery;
import com.grocery.query.WarehoseDetailsQuery123;
import com.grocery.query.ExpensesQuery;
import com.grocery.query.ItemAvailabilityQuery;
import com.grocery.query.SaleDetailsQuery;
import com.grocery.query.SaleMasterQuery;
import com.grocery.query.SaleReturnDetailsQuery;
import com.grocery.query.SaleReturnQuery;
import com.grocery.read.MessageFormat;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class SaleReturnBillDetails extends javax.swing.JInternalFrame {

    private int billId;
    private Date date = new Date();
    private BigDecimal beginningCash;
    private BigDecimal expenses;
    
    public SaleReturnBillDetails(int billId) {
        initComponents();
        
        jLabel4.setVisible(false);
        remark.setVisible(false);
        
        jLabel6.setVisible(false);
        availableCash.setVisible(false);
        jLabel5.setVisible(false);
        balance.setVisible(false);
        payAmount.setVisible(false);
        deductBalance.setVisible(false);
        
        
        this.billId = billId;
        returnDate.setDate(date);
        
        jTable1.getTableHeader().setFont(new Font("Arial Unicode MS", Font.BOLD, 11));
        jTable2.getTableHeader().setFont(new Font("Arial Unicode MS", Font.BOLD, 11));
        
        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        
        jTable1.getColumnModel().getColumn(1).setMinWidth(0);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(0);
        
        jTable2.getColumnModel().getColumn(0).setMinWidth(0);
        jTable2.getColumnModel().getColumn(0).setMaxWidth(0);
        
        jTable2.getColumnModel().getColumn(1).setMinWidth(0);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(0);
        
        jTable2.getColumnModel().getColumn(8).setMinWidth(0);
        jTable2.getColumnModel().getColumn(8).setMaxWidth(0);                   
        
        loadTable();
        getTotal();
        loadBeginningCash();
        loadExpenses();
        loadCash();
        payAmount.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabelPurchased = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel17 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        add = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        remove = new javax.swing.JButton();
        save = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        remark = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        balance = new javax.swing.JTextField();
        payAmount = new javax.swing.JRadioButton();
        deductBalance = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        availableCash = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        returnDate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabelPurchased.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabelPurchased.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelPurchased.setText("सामान बिक चूका है:");

        jTable1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Details Id", "सामान आईडी", "वस्तु का नाम", "बार कोड", "यूनिट मूल्य", "मात्रा", "जीएसटी %", "अंतिम कुल"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel17.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("लौटे आइटम :");

        jTable2.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "विवरण आईडी", "सामान आईडी", "वस्तु का नाम", "बार कोड", "यूनिट मूल्य", "मात्रा", "जीएसटी %", "अंतिम कुल", "सूची"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jLabel2.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel2.setText("कुल रकम:");
        jLabel2.setToolTipText("total amount");

        total.setEditable(false);
        total.setBackground(new java.awt.Color(255, 255, 153));
        total.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        total.setForeground(new java.awt.Color(255, 0, 0));
        total.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        add.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        add.setText(" वापसी");
        add.setMnemonic(KeyEvent.VK_R);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        remove.setText("हटाना");
        remove.setMnemonic(KeyEvent.VK_M);
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        save.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        save.setText("सहेजें");
        save.setMnemonic(KeyEvent.VK_S);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        cancel.setText("रद्द करना");
        cancel.setMnemonic(KeyEvent.VK_C);
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel4.setText("Remark:");

        remark.setEditable(false);
        remark.setBackground(new java.awt.Color(255, 255, 153));
        remark.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        remark.setForeground(new java.awt.Color(255, 0, 0));
        remark.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel5.setText("संतुलन");

        balance.setEditable(false);
        balance.setBackground(new java.awt.Color(255, 255, 153));
        balance.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        balance.setForeground(new java.awt.Color(255, 0, 0));
        balance.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        buttonGroup1.add(payAmount);
        payAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        payAmount.setForeground(new java.awt.Color(255, 0, 0));
        payAmount.setText("Pay Amount");

        buttonGroup1.add(deductBalance);
        deductBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deductBalance.setForeground(new java.awt.Color(255, 0, 0));
        deductBalance.setText("Deduct From Balance");

        jLabel6.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel6.setText("उपलब्ध नकदी:");

        availableCash.setEditable(false);
        availableCash.setBackground(new java.awt.Color(255, 255, 153));
        availableCash.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        availableCash.setForeground(new java.awt.Color(255, 0, 0));
        availableCash.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        jLabel3.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("वापसी की तिथि:");

        returnDate.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("बिल का विवरण");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 414, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(137, 137, 137)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(returnDate, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 11, Short.MAX_VALUE))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(payAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deductBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPurchased, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(1207, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(availableCash, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(535, 535, 535))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1024, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(452, 452, 452)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(180, 180, 180)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(remark, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 1014, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 1014, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1002, Short.MAX_VALUE)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelPurchased, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(remark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(add))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(availableCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save)
                    .addComponent(cancel)
                    .addComponent(remove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payAmount)
                    .addComponent(deductBalance))
                .addGap(114, 114, 114))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1017, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            add();
    }//GEN-LAST:event_jTable1KeyPressed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        add();
    }//GEN-LAST:event_addActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        remove();
    }//GEN-LAST:event_removeActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        save();
    }//GEN-LAST:event_saveActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        cancel();
    }//GEN-LAST:event_cancelActionPerformed

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            remove();
    }//GEN-LAST:event_jTable2KeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField availableCash;
    private javax.swing.JTextField balance;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancel;
    private javax.swing.JRadioButton deductBalance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelPurchased;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JRadioButton payAmount;
    private javax.swing.JTextField remark;
    private javax.swing.JButton remove;
    private com.toedter.calendar.JDateChooser returnDate;
    private javax.swing.JButton save;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

    private float getTotal(float unitPrice, float quantity)
    {
        return (unitPrice * quantity);
    }
    
    private float getGstAmount(float gstPercent, float amount)
    {
        return ((gstPercent * amount)/100);
    }
    
    private float getFinalAmount(float gstAmount, float total)
    {
        return(gstAmount + total);
    }
    
    public float getThreshold(float quantity)
    {
        return (float)(0.25 * quantity);
    }

    private void loadTable() 
    {
        try
        {
            DefaultTableModel defaultTableModel = (DefaultTableModel)jTable1.getModel();
            defaultTableModel.setRowCount(0);

            SaleMaster saleMaster = new SaleMaster();
            saleMaster.setId(billId);

            SaleDetails saleDetails = new SaleDetails();

            saleDetails.setSaleMaster(saleMaster);

            SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();

            List<Object[]> list = saleDetailsQuery.getSaleDetails(saleDetails);

            for(Object[] object: list)
            {
                SaleDetails sd = (SaleDetails)object[1];
                defaultTableModel.addRow(new Object[]{sd.getId(), sd.getItemMaster().getId(), sd.getItemMaster().getName(), sd.getItemMaster().getBarCode(), sd.getUnitPrice(), sd.getQuantity(), sd.getGstPercent(), sd.getTotal()});
             //   remark.setText(sd.getSaleMaster().getRemark());
             //   balance.setText(String.valueOf(sd.getSaleMaster().getCustomerDetails().getBalance()));        
            }

            jTable1.setModel(defaultTableModel);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void getTotal() 
    {
        DecimalFormat decimalFormat = new DecimalFormat("#0.00");
        
        float sum = 0;
        int i = 0;
        
        while(i < jTable2.getRowCount())
        {
            sum = sum + Float.parseFloat(jTable2.getValueAt(i, 7).toString());
            i++;
        }
        
        total.setText(decimalFormat.format(sum));
    }
    
    private void add() 
    {
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable2.getModel();
        DefaultTableModel defaultTableModel1 = (DefaultTableModel)jTable1.getModel();
        try
        {
            DecimalFormat decimalFormat = new DecimalFormat("#0.000");
            DecimalFormat decimalFormat1 = new DecimalFormat("#0.00");
            
            int index = jTable1.getSelectedRow();
            int detailsId = Integer.parseInt(jTable1.getValueAt(index, 0).toString());
            int itemId = Integer.parseInt(jTable1.getValueAt(index, 1).toString());
            String itemName = jTable1.getValueAt(index, 2).toString();
            String barCode = jTable1.getValueAt(index, 3).toString();
            float unitPrice = Float.parseFloat(jTable1.getValueAt(index, 4).toString());
            float quantity = Float.parseFloat(jTable1.getValueAt(index, 5).toString());
            //float gstPercent = Float.parseFlossssssat(jTable1.getValueAt(index, 6).toString());     
            float finalTotal = Float.parseFloat(jTable1.getValueAt(index, 7).toString());

            float gstAmount = 0;
            
            float total = 0;
            
            float returnedQuantity = 0;
            float newTotal = 0;
            float newFinalTotal = 0;
            float newGstAmount = 0;
               
            JFrame frame = new JFrame("Input");
            
            try
            {
                returnedQuantity = Float.parseFloat(JOptionPane.showInputDialog(frame, "<HTML><FONT color=\"#000000\">Enter the quantity of: <strong><U>" + itemName + "</U></strong><br>Purchased Quantity = <strong><U>" + decimalFormat.format(quantity) + "</U></strong></FONT></HTML>" ));
                
                if(returnedQuantity > quantity)
                {
                    JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Returned Quantity can't be greater than Purchased Quantity"), "Error Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                newTotal = getTotal(unitPrice, returnedQuantity);
            //    newGstAmount = getGstAmount(gstPercent, newTotal);
                newFinalTotal = getFinalAmount(newGstAmount, newTotal);
                
                defaultTableModel.addRow(new Object[]{detailsId, itemId, itemName, barCode, unitPrice, decimalFormat.format(returnedQuantity), 0, decimalFormat1.format(newFinalTotal), index});
                
                jTable2.setModel(defaultTableModel);
                getTotal();
                
                quantity = quantity - returnedQuantity;
                total = getTotal(unitPrice, quantity);
              //  gstAmount = getGstAmount(gstPercent, total);
                finalTotal = getFinalAmount(gstAmount, total);
                
                defaultTableModel1.setValueAt(decimalFormat.format(quantity), index, 5);
                defaultTableModel1.setValueAt(decimalFormat1.format(finalTotal), index, 7);
                
                jTable1.setModel(defaultTableModel1);  
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please enter numeric value"), "Error Message", JOptionPane.ERROR_MESSAGE);
            }
            
            getTotal();
        }
        catch(Exception e)
        {
           // e.printStackTrace();
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to return"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void remove() 
    {
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable2.getModel();
        DefaultTableModel defaultTableModel1 = (DefaultTableModel)jTable1.getModel();
        try
        {
            DecimalFormat decimalFormat = new DecimalFormat("#0.000");
            DecimalFormat decimalFormat1 = new DecimalFormat("#0.00");
            
            int index = jTable2.getSelectedRow();
            int detailsId = Integer.parseInt(jTable2.getValueAt(index, 0).toString());
            int itemId = Integer.parseInt(jTable2.getValueAt(index, 1).toString());
            String itemName = jTable2.getValueAt(index, 2).toString();
            String barCode = jTable1.getValueAt(index, 3).toString();
            float unitPrice = Float.parseFloat(jTable2.getValueAt(index, 4).toString());
            float quantity = Float.parseFloat(jTable2.getValueAt(index, 5).toString());
            float gstPercent = Float.parseFloat(jTable2.getValueAt(index, 6).toString());
            float finalTotal = Float.parseFloat(jTable2.getValueAt(index, 7).toString());
            int purchaseTableRow = Integer.parseInt(jTable2.getValueAt(index, 8).toString());
            
            float total = 0;
            float newGstAmount = 0;
            float newFinalTotal = 0;
            
            float newQuantity = Float.parseFloat(jTable1.getValueAt(purchaseTableRow, 5).toString()) + quantity;
            
            total = getTotal(unitPrice, newQuantity);
            newGstAmount = getGstAmount(gstPercent, total);
            newFinalTotal = getFinalAmount(newGstAmount, total);
            
            
            defaultTableModel1.setValueAt(decimalFormat.format(newQuantity), purchaseTableRow, 5);
            defaultTableModel1.setValueAt(decimalFormat1.format(newFinalTotal), purchaseTableRow, 7);
            
            jTable1.setModel(defaultTableModel1);
            
            defaultTableModel.removeRow(index);
            jTable2.setModel(defaultTableModel);
            getTotal();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Please select the Item you want to remove"), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cancel() 
    {
        int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of Closing this form?"));
        if(confirm == JOptionPane.YES_OPTION)
            dispose();
    }
    
    private void loadBeginningCash() 
    {
        BeginningCashQuery beginningCashQuery = new BeginningCashQuery();
        
        List<BigDecimal> list = beginningCashQuery.getBeginningCash();
        
        for(BigDecimal bd: list)
            beginningCash = bd;
    }

    private void loadExpenses() 
    {
        ExpensesQuery expensesQuery = new ExpensesQuery();
        
        List<BigDecimal> list = expensesQuery.getExpenses();
        
        for(BigDecimal bd: list)
            expenses = bd;
    }

    private void loadCash() 
    {
        availableCash.setText(String.valueOf(beginningCash.subtract(expenses)));
    }

    private void save() 
    {
        if(jTable2.getRowCount() == 0)
        {
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("No items returned"), "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(null, MessageFormat.getMessage("Are you sure of returning these stocks?"));
        if(confirm == JOptionPane.YES_OPTION)
        {
            SaleMaster saleMaster = new SaleMaster();
            SaleMasterQuery saleMasterQuery = new SaleMasterQuery();
            
            SaleDetails saleDetails = new SaleDetails();
            SaleDetailsQuery saleDetailsQuery = new SaleDetailsQuery();
            
            ItemMaster itemMaster = new ItemMaster();
            
            ItemAvailability itemAvailability = new ItemAvailability();
            ItemAvailabilityQuery itemAvailabilityQuery = new ItemAvailabilityQuery();
            
            SaleReturn saleReturn = new SaleReturn();
            SaleReturnQuery saleReturnQuery = new SaleReturnQuery();
            
            SaleReturnDetails saleReturnDetails = new SaleReturnDetails();
            SaleReturnDetailsQuery saleReturnDetailsQuery = new SaleReturnDetailsQuery();
            
            CustomerDetails warehouseDetails = new CustomerDetails();
            WarehoseDetailsQuery123 warehoseDetailsQuery = new WarehoseDetailsQuery123();
            
            
            saleMaster.setId(billId);
            
            List<Object[]> list = saleMasterQuery.getSaleByBillId(saleMaster);
            
            for(Object[] object: list)
            {
                SaleDetails sd = (SaleDetails)object[0];
                
                saleMaster.setBillAmount(sd.getSaleMaster().getBillAmount().subtract(new BigDecimal(total.getText())));
                saleMaster.setFinalBillAmount(sd.getSaleMaster().getFinalBillAmount().subtract(new BigDecimal(total.getText())));
                
//                customerMaster.setId(sd.getSaleMaster().getCustomerDetails().getId());
//                customerMaster.setBalance(sd.getSaleMaster().getCustomerDetails().getBalance().subtract(new BigDecimal(total.getText())));
                warehouseDetails.setId(sd.getSaleMaster().getCustomerDetails().getId());
                warehouseDetails.setBalance(sd.getSaleMaster().getCustomerDetails().getBalance().subtract(new BigDecimal(total.getText())));
            }
            
            saleMasterQuery.updateBillAmount(saleMaster);
            
            int i = 0;
            while(i < jTable1.getRowCount())
            {
                int detailsId = Integer.parseInt(jTable1.getValueAt(i, 0).toString());
                int itemId = Integer.parseInt(jTable1.getValueAt(i, 1).toString());
                String itemName = jTable1.getValueAt(i, 2).toString();
                String barCode = jTable1.getValueAt(i, 3).toString();
                float unitPrice = Float.parseFloat(jTable1.getValueAt(i, 4).toString());
                float quantity = Float.parseFloat(jTable1.getValueAt(i, 5).toString());
                //float gstPercent = Float.parseFloat(jTable1.getValueAt(i, 6).toString());     
                float finalTotal = Float.parseFloat(jTable1.getValueAt(i, 7).toString());
                
                saleDetails.setId(detailsId);
                saleDetails.setQuantity(new BigDecimal(quantity));
                saleDetails.setTotal(new BigDecimal(finalTotal));
                
                if(quantity == 0)
                    saleDetailsQuery.deleteSaleDetails(saleDetails);
                else
                    saleDetailsQuery.updateSaleDetails(saleDetails);
                
                i++;
            }
            
            i = 0;
            
            saleReturn.setDate(returnDate.getDate());
            saleReturn.setSaleMaster(saleMaster);
            saleReturn.setAmount(new BigDecimal(total.getText()));
            if(deductBalance.isSelected())
                saleReturn.setRemark("Balance Deducted");
            else
                saleReturn.setRemark("Amount Paid");
            
            saleReturnQuery.insertIntoSaleReturnDetails(saleReturn);
            while(i < jTable2.getRowCount())
            {
                int detailsId = Integer.parseInt(jTable2.getValueAt(i, 0).toString());
                int itemId = Integer.parseInt(jTable2.getValueAt(i, 1).toString());
                String itemName = jTable2.getValueAt(i, 2).toString();
                String barCode = jTable1.getValueAt(i, 3).toString();
                float unitPrice = Float.parseFloat(jTable2.getValueAt(i, 4).toString());
                float quantity = Float.parseFloat(jTable2.getValueAt(i, 5).toString());
             //   float gstPercent = Float.parseFloat(jTable2.getValueAt(i, 6).toString());
                float finalTotal = Float.parseFloat(jTable2.getValueAt(i, 7).toString());
                
                itemMaster.setId(itemId);
                
                itemAvailability.setItemMaster(itemMaster);
                
                List<ItemAvailability> availabilityList = itemAvailabilityQuery.checkItem(itemAvailability);
                
                for(ItemAvailability ia: availabilityList)
                {
                    itemAvailability.setId(ia.getId());
                    itemAvailability.setAvailability(ia.getAvailability().add(new BigDecimal(quantity)));
                    itemAvailability.setThreshold(new BigDecimal(getThreshold(itemAvailability.getAvailability().floatValue())));
                }     
                
                itemAvailabilityQuery.updateItemAvailability(itemAvailability);
                
                saleReturnDetails.setSaleReturn(saleReturn);
                saleReturnDetails.setItemMaster(itemMaster);
                saleReturnDetails.setQuantity(new BigDecimal(quantity));
                saleReturnDetails.setUnitPrice(new BigDecimal(unitPrice));
                //saleReturnDetails.setGstPercent(new BigDecimal(gstPercent));
                //saleReturnDetails.setGstAmount(new BigDecimal(getGstAmount(gstPercent, (float)(unitPrice * quantity))));
                saleReturnDetails.setFinalTotal(new BigDecimal(finalTotal));
                
                saleReturnDetailsQuery.insertIntoSaleReturnDetails(saleReturnDetails);
                i++;
            }
            if(deductBalance.isSelected())
                warehoseDetailsQuery.updateWarehouseBalance(warehouseDetails);
            else
            {
                Expenses expenses = new Expenses();
                ExpensesQuery expensesQuery = new ExpensesQuery();
                
                expenses.setDate(returnDate.getDate());
                expenses.setAmount(new BigDecimal(total.getText()));
                expenses.setRemark("Amount Paid to warehouse with bill Id: " + billId);
                
                expensesQuery.insertIntoExpenses(expenses);
            }
            
            JOptionPane.showMessageDialog(null, MessageFormat.getMessage("Items Returned successfully"));
            dispose();
        }
    }
}
